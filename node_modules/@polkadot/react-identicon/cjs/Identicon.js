"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Identicon = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = tslib_1.__importDefault(require("react"));
const react_copy_to_clipboard_1 = tslib_1.__importDefault(require("react-copy-to-clipboard"));
const ui_settings_1 = require("@polkadot/ui-settings");
const util_1 = require("@polkadot/util");
const util_crypto_1 = require("@polkadot/util-crypto");
const index_js_1 = require("./icons/index.js");
const styled_js_1 = require("./styled.js");
const Fallback = index_js_1.Beachball;
const DEFAULT_SIZE = 64;
const Components = {
    beachball: index_js_1.Beachball,
    empty: index_js_1.Empty,
    ethereum: index_js_1.Ethereum,
    jdenticon: index_js_1.Jdenticon,
    polkadot: index_js_1.Polkadot,
    substrate: index_js_1.Jdenticon
};
class BaseIcon extends react_1.default.PureComponent {
    state = {
        address: '',
        publicKey: '0x'
    };
    static prefix = undefined;
    static setDefaultPrefix(prefix) {
        BaseIcon.prefix = prefix;
    }
    static getDerivedStateFromProps({ prefix = BaseIcon.prefix, theme, value }, prevState) {
        if (theme === 'ethereum') {
            const address = (0, util_1.isU8a)(value)
                ? (0, util_crypto_1.ethereumEncode)(value)
                : value || '';
            return { address, publicKey: '' };
        }
        try {
            const address = (0, util_1.isU8a)(value) || (0, util_1.isHex)(value)
                ? (0, util_crypto_1.encodeAddress)(value, prefix)
                : (value || '');
            const publicKey = (0, util_1.u8aToHex)((0, util_crypto_1.decodeAddress)(address, false, prefix));
            return address === prevState.address
                ? null
                : {
                    address,
                    publicKey
                };
        }
        catch {
            return {
                address: '',
                publicKey: '0x'
            };
        }
    }
    render() {
        const { address } = this.state;
        const wrapped = this.getWrapped(this.state, this.props);
        return !address
            ? wrapped
            : ((0, jsx_runtime_1.jsx)(react_copy_to_clipboard_1.default, { onCopy: this.onCopy, text: address, children: wrapped }));
    }
    getWrapped({ address, publicKey }, { Custom }) {
        const { className = '', isAlternative, isHighlight, size = DEFAULT_SIZE, style = {}, theme = ui_settings_1.settings.icon } = this.props;
        const Component = !address
            ? index_js_1.Empty
            : Custom || Components[theme === 'default' ? ui_settings_1.ICON_DEFAULT_HOST : theme] || Fallback;
        return ((0, jsx_runtime_1.jsx)(StyledDiv, { className: `ui--IdentityIcon  ${className}`, style: style, children: (0, jsx_runtime_1.jsx)(Component, { address: address, className: isHighlight ? 'highlight' : '', isAlternative: isAlternative, publicKey: publicKey, size: size }) }, address));
    }
    onCopy = () => {
        const { onCopy } = this.props;
        const { address } = this.state;
        if (address && onCopy) {
            onCopy(address);
        }
    };
}
function Icon(props) {
    return (0, jsx_runtime_1.jsx)(BaseIcon, { ...props });
}
const StyledDiv = styled_js_1.styled.div `
  cursor: copy;
  display: inline-block;
  line-height: 0;

  > .container {
    position: relative;

    > div,
    > svg {
      position: relative;
    }

    &.highlight:before {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      border-radius: 50%;
      box-shadow: 0 0 5px 2px #aaa;
      content: '';
    }
  }
`;
exports.Identicon = react_1.default.memo(Icon);
