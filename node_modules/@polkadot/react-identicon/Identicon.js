import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import CopyToClipboard from 'react-copy-to-clipboard';
import { ICON_DEFAULT_HOST, settings } from '@polkadot/ui-settings';
import { isHex, isU8a, u8aToHex } from '@polkadot/util';
import { decodeAddress, encodeAddress, ethereumEncode } from '@polkadot/util-crypto';
import { Beachball, Empty, Ethereum, Jdenticon, Polkadot } from './icons/index.js';
import { styled } from './styled.js';
const Fallback = Beachball;
const DEFAULT_SIZE = 64;
const Components = {
    beachball: Beachball,
    empty: Empty,
    ethereum: Ethereum,
    jdenticon: Jdenticon,
    polkadot: Polkadot,
    substrate: Jdenticon
};
class BaseIcon extends React.PureComponent {
    state = {
        address: '',
        publicKey: '0x'
    };
    static prefix = undefined;
    static setDefaultPrefix(prefix) {
        BaseIcon.prefix = prefix;
    }
    static getDerivedStateFromProps({ prefix = BaseIcon.prefix, theme, value }, prevState) {
        if (theme === 'ethereum') {
            const address = isU8a(value)
                ? ethereumEncode(value)
                : value || '';
            return { address, publicKey: '' };
        }
        try {
            const address = isU8a(value) || isHex(value)
                ? encodeAddress(value, prefix)
                : (value || '');
            const publicKey = u8aToHex(decodeAddress(address, false, prefix));
            return address === prevState.address
                ? null
                : {
                    address,
                    publicKey
                };
        }
        catch {
            return {
                address: '',
                publicKey: '0x'
            };
        }
    }
    render() {
        const { address } = this.state;
        const wrapped = this.getWrapped(this.state, this.props);
        return !address
            ? wrapped
            : (_jsx(CopyToClipboard, { onCopy: this.onCopy, text: address, children: wrapped }));
    }
    getWrapped({ address, publicKey }, { Custom }) {
        const { className = '', isAlternative, isHighlight, size = DEFAULT_SIZE, style = {}, theme = settings.icon } = this.props;
        const Component = !address
            ? Empty
            : Custom || Components[theme === 'default' ? ICON_DEFAULT_HOST : theme] || Fallback;
        return (_jsx(StyledDiv, { className: `ui--IdentityIcon  ${className}`, style: style, children: _jsx(Component, { address: address, className: isHighlight ? 'highlight' : '', isAlternative: isAlternative, publicKey: publicKey, size: size }) }, address));
    }
    onCopy = () => {
        const { onCopy } = this.props;
        const { address } = this.state;
        if (address && onCopy) {
            onCopy(address);
        }
    };
}
function Icon(props) {
    return _jsx(BaseIcon, { ...props });
}
const StyledDiv = styled.div `
  cursor: copy;
  display: inline-block;
  line-height: 0;

  > .container {
    position: relative;

    > div,
    > svg {
      position: relative;
    }

    &.highlight:before {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      border-radius: 50%;
      box-shadow: 0 0 5px 2px #aaa;
      content: '';
    }
  }
`;
export const Identicon = React.memo(Icon);
