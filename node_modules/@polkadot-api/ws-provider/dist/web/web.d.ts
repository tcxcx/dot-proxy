import { JsonRpcProvider } from '@polkadot-api/json-rpc-provider';
export { JsonRpcProvider } from '@polkadot-api/json-rpc-provider';

declare enum WsEvent {
    CONNECTING = 0,
    CONNECTED = 1,
    ERROR = 2,
    CLOSE = 3
}
type WsConnecting = {
    type: WsEvent.CONNECTING;
    uri: string;
    protocols?: string | string[];
};
type WsConnected = {
    type: WsEvent.CONNECTED;
    uri: string;
    protocols?: string | string[];
};
type WsError = {
    type: WsEvent.ERROR;
    event: any;
};
type WsClose = {
    type: WsEvent.CLOSE;
    event: any;
};
type StatusChange = WsConnecting | WsConnected | WsError | WsClose;
type WsJsonRpcProvider = JsonRpcProvider & {
    switch: (uri?: string, protocol?: string[]) => void;
    getStatus: () => StatusChange;
};
interface WsProviderConfig {
    endpoints: Array<string | {
        uri: string;
        protocol: string[];
    }>;
    onStatusChanged?: (status: StatusChange) => void;
    timeout?: number;
}
interface GetWsProviderInput {
    (uri: string, protocols?: string | string[], onStatusChanged?: (status: StatusChange) => void): WsJsonRpcProvider;
    (uri: string, onStatusChanged?: (status: StatusChange) => void): WsJsonRpcProvider;
    (endpoints: Array<string | {
        uri: string;
        protocol: string[];
    }>, onStatusChanged?: (status: StatusChange) => void): WsJsonRpcProvider;
    (wsProviderConfig: WsProviderConfig): WsJsonRpcProvider;
}

declare const getWsProvider: GetWsProviderInput;

export { type GetWsProviderInput, type StatusChange, type WsClose, type WsConnected, type WsConnecting, type WsError, WsEvent, type WsJsonRpcProvider, type WsProviderConfig, getWsProvider };
