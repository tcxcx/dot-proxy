'use strict';

var jsonRpcProviderProxy = require('@polkadot-api/json-rpc-provider-proxy');

var WsEvent = /* @__PURE__ */ ((WsEvent2) => {
  WsEvent2[WsEvent2["CONNECTING"] = 0] = "CONNECTING";
  WsEvent2[WsEvent2["CONNECTED"] = 1] = "CONNECTED";
  WsEvent2[WsEvent2["ERROR"] = 2] = "ERROR";
  WsEvent2[WsEvent2["CLOSE"] = 3] = "CLOSE";
  return WsEvent2;
})(WsEvent || {});

const methods = {};
["v1", "unstable"].forEach((version) => {
  methods[`chainHead_${version}_follow`] = "follow";
  methods[`chainHead_${version}_unfollow`] = "unfollow";
});
const followEnhancer = (base, forceDisconnect) => {
  const prematureStops = /* @__PURE__ */ new Set();
  const preOpId = /* @__PURE__ */ new Map();
  const onGoing = /* @__PURE__ */ new Set();
  let methodsRequestId;
  const result = (onMsg) => {
    const { send, disconnect } = base((fromProvider) => {
      const parsed = JSON.parse(fromProvider);
      if ("id" in parsed) {
        const { id, result: result2 } = parsed;
        if (id === methodsRequestId) {
          methodsRequestId = void 0;
          if (result2 && !result2.methods.some((x) => {
            const [group, , name] = x.split("_");
            return group === "chainHead" && name === "follow";
          })) {
            onMsg(fromProvider);
            forceDisconnect();
            return;
          }
        }
        const msg = preOpId.get(id);
        if (msg) {
          preOpId.delete(id);
          if (prematureStops.has(result2)) {
            prematureStops.delete(result2);
            return;
          }
          onGoing.add(result2);
          const currentSize = onGoing.size + preOpId.size;
          if (currentSize > 2)
            console.warn(
              `Too many chainHead follow subscriptions (${currentSize})`
            );
          else if (parsed.error) {
            console.warn(`chainHead follow failed on the ${currentSize} sub`);
            forceDisconnect();
            preOpId.set(id, msg);
            send(msg);
            return;
          }
        }
      } else {
        const { subscription, result: result2 } = parsed.params;
        if (result2?.event === "stop") {
          if (onGoing.has(subscription)) onGoing.delete(subscription);
          else prematureStops.add(subscription);
        }
      }
      onMsg(fromProvider);
    });
    return {
      send(toProvider) {
        const parsed = JSON.parse(toProvider);
        if (parsed.method === "rpc_methods") methodsRequestId = parsed.id;
        const method = methods[parsed.method];
        if (method === "follow") {
          preOpId.set(parsed.id, toProvider);
        } else if (method === "unfollow") {
          onGoing.delete(parsed.params[0]);
        }
        send(toProvider);
      },
      disconnect
    };
  };
  return Object.assign(result, {
    cleanup: () => {
      prematureStops.clear();
      preOpId.clear();
      onGoing.clear();
    }
  });
};

const timeoutError = {
  type: WsEvent.ERROR,
  event: { type: "timeout" }
};
const noop = () => {
};
const mapEndpoints = (endpoints) => endpoints.map((x) => typeof x === "string" ? [x] : [x.uri, x.protocol]);
const getInternalWsProvider = (WebsocketClass) => {
  return (...args) => {
    let endpoints = [];
    let onStatusChanged = noop;
    let timeout = 3500;
    const [firstArg] = args;
    if (args.length === 1 && typeof firstArg === "object" && !Array.isArray(firstArg)) {
      endpoints = mapEndpoints(firstArg.endpoints);
      onStatusChanged = firstArg.onStatusChanged ?? noop;
      timeout = firstArg.timeout ?? timeout;
    } else {
      if (typeof args[1] === "function")
        onStatusChanged = args[1];
      if (Array.isArray(firstArg)) endpoints = mapEndpoints(firstArg);
      else {
        endpoints = [[firstArg]];
        if (args[1] && args[1] !== onStatusChanged)
          endpoints[0][1] = args[1];
        if (args[2]) onStatusChanged = args[2];
      }
    }
    let idx = 0;
    let status;
    let switchTo = null;
    let disconnect = noop;
    let outerCleanup = noop;
    const result = followEnhancer(
      jsonRpcProviderProxy.getSyncProvider(async () => {
        const [uri, protocols] = switchTo || endpoints[idx++ % endpoints.length];
        switchTo = null;
        const socket = new WebsocketClass(uri, protocols);
        const forceSocketClose = () => {
          try {
            socket.addEventListener("error", noop, { once: true });
            socket.close();
          } catch {
          }
        };
        onStatusChanged(
          status = {
            type: WsEvent.CONNECTING,
            uri,
            protocols
          }
        );
        await new Promise((resolve, reject) => {
          const onOpen = () => {
            initialCleanup();
            resolve();
          };
          const onError = (e) => {
            initialCleanup();
            if (e == null) forceSocketClose();
            console.error(
              `Unable to connect to ${uri}${protocols ? ", protocols: " + protocols : ""}`
            );
            onStatusChanged(
              status = {
                type: e ? WsEvent.ERROR : WsEvent.CLOSE,
                event: e
              }
            );
            setTimeout(reject, e ? 300 : 0, e);
          };
          const timeoutToken = timeout !== Infinity ? setTimeout(() => {
            initialCleanup();
            forceSocketClose();
            onStatusChanged(status = timeoutError);
            reject(timeoutError.event);
          }, timeout) : void 0;
          const initialCleanup = () => {
            clearTimeout(timeoutToken);
            socket.removeEventListener("error", onError);
            socket.removeEventListener("open", onOpen);
          };
          socket.addEventListener("open", onOpen);
          socket.addEventListener("error", onError);
          disconnect = () => {
            onError(null);
          };
        });
        onStatusChanged(
          status = {
            type: WsEvent.CONNECTED,
            uri,
            protocols
          }
        );
        return (onMessage, onHalt) => {
          const _onMessage = (e) => {
            if (typeof e.data === "string") onMessage(e.data);
          };
          const innerHalt = (reason) => (e) => {
            console.warn(`WS halt (${reason})`);
            onStatusChanged(
              status = {
                type: reason,
                event: e
              }
            );
            onHalt();
          };
          const onError = innerHalt(WsEvent.ERROR);
          const onClose = innerHalt(WsEvent.CLOSE);
          socket.addEventListener("message", _onMessage);
          socket.addEventListener("error", onError);
          socket.addEventListener("close", onClose);
          disconnect = (withHalt) => {
            outerCleanup();
            disconnect = noop;
            socket.removeEventListener("message", _onMessage);
            socket.removeEventListener("error", onError);
            socket.removeEventListener("close", onClose);
            forceSocketClose();
            if (withHalt) onClose({});
          };
          return {
            send: (msg) => {
              socket.send(msg);
            },
            disconnect
          };
        };
      }),
      () => {
        switchFn();
      }
    );
    outerCleanup = result.cleanup;
    delete result.cleanup;
    const switchFn = (...args2) => {
      if (status.type === WsEvent.CLOSE) return;
      if (args2.length) switchTo = args2;
      if (status.type !== WsEvent.ERROR) disconnect(true);
    };
    return Object.assign(result, { switch: switchFn, getStatus: () => status });
  };
};

const getWsProvider = getInternalWsProvider(WebSocket);

exports.WsEvent = WsEvent;
exports.getWsProvider = getWsProvider;
//# sourceMappingURL=web.js.map
