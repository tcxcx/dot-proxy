var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class Queue {
  constructor(...vals) {
    __publicField(this, "first");
    __publicField(this, "last");
    if (vals.length === 0) return;
    vals.forEach((val) => this.push(val));
  }
  push(value) {
    const nextLast = { value };
    if (this.last === void 0) {
      this.last = nextLast;
      this.first = this.last;
    } else {
      this.last.next = nextLast;
      this.last = nextLast;
    }
  }
  pop() {
    const result = this.first?.value;
    if (this.first) {
      this.first = this.first.next;
      if (!this.first) {
        this.last = void 0;
      }
    }
    return result;
  }
  peek() {
    return this.first?.value;
  }
}

export { Queue as default };
//# sourceMappingURL=queue.mjs.map
