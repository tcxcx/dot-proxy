import { IN, OUT } from './types.mjs';

const withLogsRecorder = (persistLog, input) => {
  let nextId = 1;
  let token;
  let tickDate = "";
  const setTickDate = () => {
    tickDate = (/* @__PURE__ */ new Date()).toISOString();
    token = setTimeout(setTickDate, 0);
  };
  return (onMsg) => {
    const clientId = nextId++;
    setTickDate();
    const result = input((msg) => {
      persistLog(`${clientId}-${tickDate}-${IN}-${msg}`);
      onMsg(msg);
    });
    return {
      ...result,
      send: (msg) => {
        persistLog(`${clientId}-${tickDate}-${OUT}-${msg}`);
        result.send(msg);
      },
      disconnect() {
        clearTimeout(token);
        result.disconnect();
      }
    };
  };
};

export { withLogsRecorder };
//# sourceMappingURL=with-logs-recorder.mjs.map
