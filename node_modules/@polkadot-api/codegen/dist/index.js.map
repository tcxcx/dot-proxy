{"version":3,"file":"index.js","sources":["../src/internal-types/with-cache.ts","../src/internal-types/internal-types-builder.ts","../src/internal-types/type-representation.ts","../src/internal-types/generate-typescript.ts","../src/types-builder.ts","../src/get-new-types.ts","../src/anonymize.ts","../src/generate-descriptors.ts","../src/generate-types.ts","../src/get-used-types.ts","../src/known-types.ts","../src/whitelist.ts","../src/generate-multiple-descriptors.ts","../src/generate-docs-descriptors.ts","../src/internal-types/reused-nodes.ts","../src/ink-types.ts"],"sourcesContent":["import type { LookupEntry } from \"@polkadot-api/metadata-builders\"\n\ntype FnWithStack<Other extends Array<any>, T> = (\n  input: LookupEntry,\n  cache: Map<number, T>,\n  stack: Set<number>,\n  ...rest: Other\n) => T\n\nexport const withCache =\n  <Other extends Array<any>, T>(\n    fn: FnWithStack<Other, T>,\n    onEnterCircular: (\n      cacheGetter: () => T,\n      circular: LookupEntry,\n      ...rest: Other\n    ) => T,\n    onExitCircular: (\n      outter: T,\n      inner: T,\n      circular: LookupEntry,\n      ...rest: Other\n    ) => T,\n  ): FnWithStack<Other, T> =>\n  (input, cache, stack, ...rest) => {\n    const { id } = input\n    if (cache.has(id)) return cache.get(id)!\n\n    if (stack.has(id)) {\n      const res = onEnterCircular(() => cache.get(id)!, input, ...rest)\n      cache.set(id, res)\n      return res\n    }\n\n    stack.add(id)\n    let result = fn(input, cache, stack, ...rest)\n    stack.delete(id)\n\n    if (cache.has(id)) {\n      result = onExitCircular(result, cache.get(id)!, input, ...rest)\n    }\n\n    cache.set(id, result)\n    return result\n  }\n","import {\n  ArrayVar,\n  EnumVar,\n  LookupEntry,\n  MetadataPrimitives,\n  StructVar,\n  TupleVar,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  ArrayType,\n  EnumVariant,\n  FixedSizeBinary,\n  LookupTypeNode,\n  NativeType,\n  StructType,\n  TupleType,\n  TypeNode,\n} from \"./type-representation\"\nimport { withCache } from \"./with-cache\"\n\nexport const primitiveTypes: Record<\n  MetadataPrimitives | \"compactNumber\" | \"compactBn\",\n  NativeType\n> = {\n  bool: \"boolean\",\n  char: \"string\",\n  str: \"string\",\n  u8: \"number\",\n  u16: \"number\",\n  u32: \"number\",\n  u64: \"bigint\",\n  u128: \"bigint\",\n  u256: \"bigint\",\n  i8: \"number\",\n  i16: \"number\",\n  i32: \"number\",\n  i64: \"bigint\",\n  i128: \"bigint\",\n  i256: \"bigint\",\n  compactNumber: \"number\",\n  compactBn: \"bigint\",\n}\n\nconst buildType = withCache(\n  (\n    input: LookupEntry,\n    cache: Map<number, LookupTypeNode>,\n    stack: Set<number>,\n  ): LookupTypeNode => {\n    const buildNextType = (nextInput: LookupEntry) =>\n      buildType(nextInput, cache, stack)\n\n    const ltn = <T extends TypeNode[\"type\"]>(\n      type: T,\n      value: (TypeNode & { type: T })[\"value\"],\n    ): LookupTypeNode =>\n      ({\n        id: input.id,\n        type,\n        value,\n      }) as LookupTypeNode\n\n    if (input.type === \"primitive\")\n      return ltn(\"primitive\", primitiveTypes[input.value])\n    if (input.type === \"void\") return ltn(\"primitive\", \"undefined\")\n    if (input.type === \"AccountId20\") return ltn(\"chainPrimitive\", \"HexString\")\n    if (input.type === \"AccountId32\") return ltn(\"chainPrimitive\", \"SS58String\")\n    if (input.type === \"compact\") {\n      const value: TypeNode[] = []\n      value.push({\n        type: \"primitive\",\n        value: input.isBig ? \"bigint\" : \"number\",\n      })\n\n      return ltn(\"union\", value)\n    }\n    if (input.type === \"bitSequence\")\n      return ltn(\"chainPrimitive\", \"BitSequence\")\n\n    if (\n      input.type === \"sequence\" &&\n      input.value.type === \"primitive\" &&\n      input.value.value === \"u8\"\n    )\n      return ltn(\"chainPrimitive\", \"Binary\")\n\n    const buildArray = (array: ArrayVar): ArrayType | FixedSizeBinary => {\n      const { value, len } = array\n      if (value.type === \"primitive\" && value.value === \"u8\") {\n        return { type: \"fixedSizeBinary\", value: len }\n      }\n      return {\n        type: \"array\",\n        value: { value: buildNextType(value), len },\n        original: array,\n      }\n    }\n    const buildTuple = (tuple: TupleVar): TupleType => {\n      const { value, innerDocs } = tuple\n\n      return {\n        type: \"tuple\",\n        value: value.map((v, i) => ({\n          value: buildNextType(v),\n          docs: innerDocs[i] ?? [],\n        })),\n        original: tuple,\n      }\n    }\n    const buildStruct = (struct: StructVar): StructType => {\n      const { value, innerDocs } = struct\n      return {\n        type: \"struct\",\n        value: Object.entries(value).map(([label, value]) => ({\n          label,\n          docs: innerDocs[label] ?? [],\n          value: buildNextType(value),\n        })),\n        original: struct,\n      }\n    }\n\n    if (input.type === \"array\") return { id: input.id, ...buildArray(input) }\n    if (input.type === \"sequence\")\n      return ltn(\"array\", { value: buildNextType(input.value) })\n    if (input.type === \"tuple\") return { id: input.id, ...buildTuple(input) }\n    if (input.type === \"struct\") return { id: input.id, ...buildStruct(input) }\n\n    if (input.type === \"option\")\n      return ltn(\"option\", buildNextType(input.value))\n\n    if (input.type === \"result\")\n      return ltn(\"result\", {\n        ok: buildNextType(input.value.ok),\n        ko: buildNextType(input.value.ko),\n      })\n\n    // it has to be an enum by now\n    const buildInnerType = (\n      value: EnumVar[\"value\"][string],\n    ):\n      | LookupTypeNode\n      | TupleType\n      | StructType\n      | ArrayType\n      | FixedSizeBinary\n      | undefined => {\n      switch (value.type) {\n        case \"lookupEntry\":\n          return buildNextType(value.value)\n        case \"void\":\n          return undefined\n        case \"array\":\n          return buildArray(value)\n        case \"struct\":\n          return buildStruct(value)\n        case \"tuple\":\n          return buildTuple(value)\n      }\n    }\n\n    const variants = Object.entries(input.value).map(\n      ([label, value]): EnumVariant => ({\n        docs: input.innerDocs[label] ?? [],\n        label: label,\n        value: buildInnerType(value),\n      }),\n    )\n    return ltn(\"enum\", variants)\n  },\n  (_, circular) => ({\n    id: circular.id,\n    optional: circular.type === \"option\",\n    type: \"primitive\" as const,\n    value: \"undefined\" as const,\n  }),\n  (result, tmp) => Object.assign(tmp, result),\n)\n\nexport const getInternalTypesBuilder = (\n  lookup: (id: number) => LookupEntry,\n) => {\n  const cache = new Map<number, LookupTypeNode>()\n\n  return (id: number): LookupTypeNode => buildType(lookup(id), cache, new Set())\n}\n","import { ArrayVar, StructVar, TupleVar } from \"@polkadot-api/metadata-builders\"\n\ntype PrimitiveNode = PrimitiveType | ChainPrimitiveType | FixedSizeBinary\nexport type TypeNode =\n  | PrimitiveNode\n  | StructType\n  | ArrayType\n  | TupleType\n  | ResultType\n  | EnumType\n  | UnionType\n  | OptionType\nexport type LookupTypeNode = TypeNode & { id: number }\nexport type MaybeLookupNode = TypeNode | LookupTypeNode\n\nexport const isPrimitive = (node: TypeNode): node is PrimitiveNode =>\n  [\"chainPrimitive\", \"primitive\", \"fixedSizeBinary\"].includes(node.type)\n\nexport type NativeType =\n  | \"boolean\"\n  | \"string\"\n  | \"number\"\n  | \"bigint\"\n  | \"undefined\"\n  | \"Uint8Array\"\nexport type PrimitiveType = {\n  type: \"primitive\"\n  value: NativeType\n}\n\nexport type ChainPrimitive =\n  | \"HexString\"\n  | \"SS58String\"\n  | \"Binary\"\n  | \"BitSequence\"\nexport type ChainPrimitiveType = {\n  type: \"chainPrimitive\"\n  value: ChainPrimitive\n}\n\nexport type FixedSizeBinary = {\n  type: \"fixedSizeBinary\"\n  value: number\n}\n\n// Need it as separate otherwise TS annoying with \"maybe value is undefined even if it has the property!\"\ntype WithOriginal<T, O> = T & ({} | { original: O })\n\nexport type StructType = WithOriginal<\n  {\n    type: \"struct\"\n    value: Array<StructField>\n  },\n  StructVar\n>\nexport type StructField = {\n  label: string\n  value: MaybeLookupNode\n  docs: string[]\n}\n\nexport type ArrayType = WithOriginal<\n  {\n    type: \"array\"\n    value: {\n      value: MaybeLookupNode\n      len?: number\n    }\n  },\n  ArrayVar\n>\n\nexport type TupleType = WithOriginal<\n  {\n    type: \"tuple\"\n    value: Array<TupleField>\n  },\n  TupleVar\n>\nexport type TupleField = {\n  value: MaybeLookupNode\n  docs: string[]\n}\n\nexport type ResultType = {\n  type: \"result\"\n  value: {\n    ok: LookupTypeNode\n    ko: LookupTypeNode\n  }\n}\n\nexport type EnumType = {\n  type: \"enum\"\n  value: Array<EnumVariant>\n}\nexport type EnumVariant = {\n  label: string\n  docs: string[]\n  value:\n    | LookupTypeNode\n    | TupleType\n    | StructType\n    | ArrayType\n    | FixedSizeBinary\n    | undefined\n}\n\nexport type UnionType = {\n  type: \"union\"\n  value: MaybeLookupNode[]\n}\n\nexport type OptionType = {\n  type: \"option\"\n  value: MaybeLookupNode\n}\n","import {\n  EnumVariant,\n  LookupTypeNode,\n  StructField,\n  TypeNode,\n} from \"./type-representation\"\n\nexport interface CodegenOutput {\n  code: string\n  imports: Record<string, Set<string>>\n}\n\nexport type NodeCodeGenerator = (\n  innerNode: TypeNode | LookupTypeNode,\n  next: (node: TypeNode) => CodegenOutput,\n  level: number,\n) => CodegenOutput\n\n/**\n * This function is chain-type agnostic. It will try its best to generate all\n * types, but will fail for non-native types (e.g. Binary)\n * This can be enhanced through composition.\n */\nexport const nativeNodeCodegen = (\n  node: TypeNode,\n  next: (node: TypeNode) => CodegenOutput,\n): CodegenOutput => {\n  if (node.type === \"primitive\") return onlyCode(node.value)\n  if (node.type === \"chainPrimitive\")\n    throw new Error(\"Can't generate chain primitive type \" + node.value)\n  if (\n    node.type === \"result\" ||\n    node.type === \"enum\" ||\n    node.type === \"fixedSizeBinary\"\n  )\n    throw new Error(\"Can't generate chain primitive type \" + node.type)\n  if (node.type === \"array\") {\n    const { code, imports } = next(node.value.value)\n    return { code: `Array<${code}>`, imports }\n  }\n\n  if (node.type === \"struct\") {\n    return generateObjectCode(node.value, next)\n  }\n  if (node.type === \"tuple\") {\n    const tupleResults = node.value.map(({ value }) => next(value))\n    // docs seem to have no effect on tuples (VSCode)\n    return {\n      code: `[${tupleResults.map(({ code }) => code).join(\", \")}]`,\n      imports: mergeImports(tupleResults.map(({ imports }) => imports)),\n    }\n  }\n  if (node.type === \"union\") {\n    if (node.value.length === 1) return next(node.value[0])\n\n    const partResults = node.value.map(next)\n    return {\n      code: partResults.map(({ code }) => `(${code})`).join(\" | \"),\n      imports: mergeImports(partResults.map(({ imports }) => imports)),\n    }\n  }\n\n  // Must be an option\n  const optionResult = next(node.value)\n  return {\n    code: `(${optionResult.code}) | undefined`,\n    imports: optionResult.imports,\n  }\n}\n\nexport function generateTypescript(\n  node: TypeNode,\n  getNodeCode: NodeCodeGenerator,\n): CodegenOutput {\n  const next = (node: TypeNode, level: number): CodegenOutput =>\n    getNodeCode(node, (v) => next(v, level + 1), level)\n  return next(node, 0)\n}\n\nexport function processPapiPrimitives(\n  node: TypeNode,\n  getCode: (node: TypeNode) => CodegenOutput,\n  isKnown?: boolean,\n): CodegenOutput | null {\n  const clientImport = (value: string) => ({ client: new Set([value]) })\n\n  if (node.type === \"chainPrimitive\") {\n    return node.value === \"BitSequence\"\n      ? onlyCode(`{bytes: Uint8Array, bitsLen: number}`)\n      : {\n          code: node.value,\n          imports: {\n            client: new Set([node.value]),\n          },\n        }\n  }\n\n  if (node.type === \"result\") {\n    const okResult = getCode(node.value.ok)\n    const koResult = getCode(node.value.ko)\n\n    return {\n      code: `ResultPayload<${okResult.code}, ${koResult.code}>`,\n      imports: mergeImports([\n        okResult.imports,\n        koResult.imports,\n        clientImport(\"ResultPayload\"),\n      ]),\n    }\n  }\n\n  if (node.type === \"enum\") {\n    const innerCode = generateObjectCode(node.value, getCode)\n\n    if (!isKnown) {\n      return {\n        code: `AnonymousEnum<${innerCode.code}>`,\n        imports: innerCode.imports,\n      }\n    }\n    return {\n      code: `Enum<${innerCode.code}>`,\n      imports: mergeImports([innerCode.imports, clientImport(\"Enum\")]),\n    }\n  }\n\n  if (node.type === \"fixedSizeBinary\") {\n    return {\n      code: `FixedSizeBinary<${node.value}>`,\n      imports: clientImport(\"FixedSizeBinary\"),\n    }\n  }\n\n  if (node.type === \"array\" && node.value.len) {\n    const { code, imports } = getCode(node.value.value)\n    return {\n      code: `FixedSizeArray<${node.value.len}, ${code}>`,\n      imports: mergeImports([imports, clientImport(\"FixedSizeArray\")]),\n    }\n  }\n\n  return null\n}\n\nexport const generateObjectCode = (\n  fields: (StructField | EnumVariant)[],\n  next: (node: TypeNode) => CodegenOutput,\n): CodegenOutput => {\n  const innerValues = fields.map((field) => ({\n    ...field,\n    result: field.value ? next(field.value) : null,\n  }))\n\n  return {\n    code: `{${innerValues\n      .map(({ label, docs, value, result }) => {\n        const docsPrefix = docs.length\n          ? `\\n/**\\n${docs.map((doc) => ` *${doc}`).join(\"\\n\")}\\n */\\n`\n          : \"\"\n        if (result === null)\n          return docsPrefix + `${JSON.stringify(label)}: undefined`\n\n        const isOptional = value?.type === \"option\"\n        const key = JSON.stringify(label) + (isOptional ? \"?\" : \"\")\n        return docsPrefix + `${key}: ${result.code}`\n      })\n      .join(\", \")}}`,\n    imports: mergeImports(innerValues.map((v) => v.result?.imports ?? {})),\n  }\n}\n\nexport const mergeImports = (\n  imports: Array<CodegenOutput[\"imports\"]>,\n): CodegenOutput[\"imports\"] => {\n  if (!imports.length) return {}\n  const result = { ...imports[0] }\n  for (let i = 1; i < imports.length; i++) {\n    Object.entries(imports[i]).forEach(\n      ([type, value]) =>\n        (result[type] = new Set([...(result[type] ?? []), ...value])),\n    )\n  }\n  return result\n}\n\nexport const onlyCode = (code: string): CodegenOutput => ({ code, imports: {} })\n","import {\n  ArrayVar,\n  getChecksumBuilder,\n  MetadataLookup,\n  StructVar,\n  TupleVar,\n} from \"@polkadot-api/metadata-builders\"\nimport { getInternalTypesBuilder, isPrimitive } from \"./internal-types\"\nimport {\n  CodegenOutput,\n  generateTypescript,\n  mergeImports,\n  nativeNodeCodegen,\n  onlyCode,\n  processPapiPrimitives,\n} from \"./internal-types/generate-typescript\"\nimport type { KnownTypes } from \"./known-types\"\n\nexport interface Variable {\n  name: string\n\n  checksum: string\n  type: string\n}\n\nexport interface CodeDeclarations {\n  imports: Set<string>\n  // checksum -> Variable;\n  // in Mode.Anonymize contains normalized types for every checksum,\n  // in Mode.TerminateKnown contains expanded types, with duplication\n  variables: Map<string, Variable>\n  takenNames: Set<string>\n}\n\nexport const defaultDeclarations = (): CodeDeclarations => ({\n  imports: new Set(),\n  variables: new Map(),\n  takenNames: new Set(),\n})\n\nconst NEVER_STR = \"never\"\nconst opaqueHashers = new Set<string>([\n  \"Blake2128\",\n  \"Blake2256\",\n  \"Twox128\",\n  \"Twox256\",\n])\n\nexport const getTypesBuilder = (\n  declarations: CodeDeclarations,\n  getLookupEntryDef: MetadataLookup,\n  // checksum -> desired-name\n  knownTypes: KnownTypes,\n  checksumBuilder: ReturnType<typeof getChecksumBuilder>,\n) => {\n  const { metadata, call } = getLookupEntryDef\n  const callsChecksum = call ? checksumBuilder.buildDefinition(call) : null\n\n  const typeFileImports = new Set<string>()\n  const clientFileImports = new Set<string>()\n\n  const getChecksum = (id: number | StructVar | TupleVar | ArrayVar): string =>\n    typeof id === \"number\"\n      ? checksumBuilder.buildDefinition(id)!\n      : checksumBuilder.buildComposite(id)!\n\n  const internalBuilder = getInternalTypesBuilder(getLookupEntryDef)\n  const anonymize = (varName: string) => {\n    if (!varName.startsWith(\"I\")) return varName\n    const checksum = varName.slice(1)\n    return knownTypes[checksum] ? varName : `Anonymize<${varName}>`\n  }\n  const getName = (checksum: string) => {\n    if (!knownTypes[checksum]) return `I${checksum}`\n\n    const { name: originalName } = knownTypes[checksum]\n    let name = originalName\n    let i = 1\n    while (declarations.takenNames.has(name)) name = originalName + i++\n\n    declarations.takenNames.add(name)\n    return name\n  }\n\n  const buildDefinition = (id: number) => {\n    const node = internalBuilder(id)\n\n    return generateTypescript(node, (node, next, level) => {\n      // primitives are not assigned to intermediate types\n      if (node.type === \"primitive\") return nativeNodeCodegen(node, next)\n\n      const checksum =\n        \"id\" in node\n          ? getChecksum(node.id)\n          : // for types inlined in Enums, we might have an intermediate type\n            \"original\" in node\n            ? getChecksum(node.original)\n            : null\n\n      // We can't call this directly because we might have to prepare the\n      // `declarations.variables` if it turns out it's nested;\n      const getPapiPrimitive = (level: number) => {\n        const papiPrimitive = processPapiPrimitives(\n          node,\n          next,\n          !!checksum && !!knownTypes[checksum],\n        )\n        if (!papiPrimitive) return null\n        papiPrimitive.imports.client?.forEach((name) => {\n          if (level === 0) {\n            clientFileImports.add(name)\n          } else {\n            declarations.imports.add(name)\n          }\n        })\n        return onlyCode(papiPrimitive.code)\n      }\n\n      if (!checksum || isPrimitive(node) || node.type === \"union\") {\n        // It's not a lookup type nor an inlined Enum type\n        // Return the primitive type or the regular codegen.\n        // And if it's a chainPrimitive also return that primitive without creating\n        // and intermediate type.\n        return getPapiPrimitive(level) ?? nativeNodeCodegen(node, next)\n      }\n\n      if (level > 0 && checksum === callsChecksum) {\n        declarations.imports.add(\"TxCallData\")\n        return onlyCode(\"TxCallData\")\n      }\n\n      if (declarations.variables.has(checksum)) {\n        const entry = declarations.variables.get(checksum)!\n        if (level === 0) {\n          typeFileImports.add(entry.name)\n        }\n        return onlyCode(anonymize(entry.name))\n      }\n\n      const variable: Variable = {\n        checksum,\n        type: \"\",\n        name: getName(checksum),\n      }\n      if (level === 0) {\n        typeFileImports.add(variable.name)\n      }\n      declarations.variables.set(checksum, variable)\n      // We're wrapping the variable with another, so we increase a level.\n      variable.type = (\n        getPapiPrimitive(level + 1) ?? nativeNodeCodegen(node, next)\n      ).code\n\n      return onlyCode(anonymize(variable.name))\n    })\n  }\n\n  const buildTypeDefinition = (id: number) =>\n    anonymize(buildDefinition(id).code)\n\n  const buildStorage = (pallet: string, entry: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .storage!.items.find((s) => s.name === entry)!\n\n    if (storageEntry.type.tag === \"plain\")\n      return {\n        key: \"[]\",\n        val: `${buildTypeDefinition(storageEntry.type.value)}`,\n        opaque: NEVER_STR,\n      }\n\n    const hashers = storageEntry.type.value.hashers\n    const opaque =\n      hashers\n        .map((x, idx) => (opaqueHashers.has(x.tag) ? `\"${idx}\"` : null))\n        .filter(Boolean)\n        .join(\" | \") || NEVER_STR\n\n    const { key, value } = storageEntry.type.value\n    const val = buildTypeDefinition(value)\n\n    const returnKey =\n      storageEntry.type.value.hashers.length === 1\n        ? `[Key: ${buildTypeDefinition(key)}]`\n        : buildTypeDefinition(key)\n\n    return { key: returnKey, val, opaque }\n  }\n\n  const buildRuntimeCall = (api: string, method: string) => {\n    const entry = metadata.apis\n      .find((x) => x.name === api)\n      ?.methods.find((x) => x.name === method)\n    if (!entry) throw null\n\n    const innerTuple = entry.inputs\n      .map(({ name, type }) => `${name}: ${buildTypeDefinition(type)}`)\n      .join(\", \")\n\n    return {\n      args: `[${innerTuple}]`,\n      value: buildTypeDefinition(entry.output),\n    }\n  }\n\n  const buildVariant =\n    (type: \"errors\" | \"events\" | \"calls\") => (pallet: string, name: string) => {\n      const lookupEntry = getLookupEntryDef(\n        metadata.pallets.find((x) => x.name === pallet)![type]! as number,\n      )\n      if (lookupEntry.type !== \"enum\") throw null\n\n      // if (getChecksum(lookupEntry.id) !== \"ajkhn97prklo5\") return \"\"\n\n      // Generate the type that has all the variants - This is so the consumer can import the type, even if it's not used directly by the descriptor file\n      buildDefinition(lookupEntry.id)\n\n      const innerLookup = lookupEntry.value[name]\n\n      if (innerLookup.type === \"lookupEntry\") {\n        return buildTypeDefinition(innerLookup.value.id)\n      } else if (innerLookup.type === \"void\") {\n        return \"undefined\"\n      } else {\n        const result = declarations.variables.get(\n          getChecksum(innerLookup),\n        )!.name\n        typeFileImports.add(result)\n\n        return `Anonymize<${result}>`\n      }\n    }\n\n  const buildConstant = (pallet: string, constantName: string) => {\n    // return \"\"\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .constants!.find((s) => s.name === constantName)!\n\n    return buildTypeDefinition(storageEntry.type)\n  }\n\n  return {\n    buildTypeDefinition,\n    buildDefinition,\n    buildStorage,\n    buildEvent: buildVariant(\"events\"),\n    buildError: buildVariant(\"errors\"),\n    buildCall: buildVariant(\"calls\"),\n    buildRuntimeCall,\n    buildConstant,\n    getTypeFileImports: () => Array.from(typeFileImports),\n    getClientFileImports: () => Array.from(clientFileImports),\n  }\n}\n\nexport const getDocsTypesBuilder = (\n  getLookupEntryDef: MetadataLookup,\n  knownTypes: KnownTypes,\n  checksumBuilder: ReturnType<typeof getChecksumBuilder>,\n) => {\n  const { metadata, call } = getLookupEntryDef\n  const callsChecksum = call ? checksumBuilder.buildDefinition(call) : null\n  const clientFileImports = new Set<string>()\n  const fileTypeEntries = new Set<number>()\n\n  // checksum -> types that are imported for it\n  const importsPerType = new Map<string, CodegenOutput[\"imports\"]>()\n\n  const declarations = defaultDeclarations()\n\n  const getChecksum = (id: number | StructVar | TupleVar | ArrayVar): string =>\n    typeof id === \"number\"\n      ? checksumBuilder.buildDefinition(id)!\n      : checksumBuilder.buildComposite(id)!\n\n  const internalBuilder = getInternalTypesBuilder(getLookupEntryDef)\n\n  const buildTypeDefinition = (id: number) => {\n    fileTypeEntries.add(id)\n    const node = internalBuilder(id)\n\n    const visited = new Set<string>()\n    const result = generateTypescript(node, (node, next): CodegenOutput => {\n      const checksum =\n        \"id\" in node\n          ? getChecksum(node.id)\n          : // for types inlined in Enums, we might have an intermediate type\n            \"original\" in node\n            ? getChecksum(node.original)\n            : null\n\n      const getPapiPrimitive = () => processPapiPrimitives(node, next, true)\n\n      if (!checksum) {\n        // It's not a lookup type nor an inlined Enum type\n        // Return the primitive type or the regular codegen.\n        return getPapiPrimitive() ?? nativeNodeCodegen(node, next)\n      }\n\n      if (node.type === \"primitive\") return nativeNodeCodegen(node, next)\n      if (checksum === callsChecksum) {\n        return {\n          code: \"TxCallData\",\n          imports: {\n            client: new Set([\"TxCallData\"]),\n          },\n        }\n      }\n\n      if (checksum in knownTypes) {\n        if (declarations.variables.has(checksum)) {\n          const entry = declarations.variables.get(checksum)!\n          return {\n            code: entry.name,\n            imports: {\n              types: new Set([entry.name]),\n            },\n          }\n        }\n\n        const variable: Variable = {\n          checksum,\n          type: \"\",\n          name: knownTypes[checksum].name,\n        }\n        declarations.variables.set(checksum, variable)\n        const generated = getPapiPrimitive() ?? nativeNodeCodegen(node, next)\n        variable.type = generated.code\n        importsPerType.set(\n          checksum,\n          mergeImports([\n            generated.imports,\n            {\n              types: new Set([variable.name]),\n            },\n          ]),\n        )\n\n        return {\n          code: variable.name,\n          imports: {\n            types: new Set([variable.name]),\n          },\n        }\n      }\n\n      if (declarations.variables.has(checksum)) {\n        const entry = declarations.variables.get(checksum)!\n        return {\n          code: entry.type,\n          imports: importsPerType.get(checksum) ?? {},\n        }\n      }\n\n      if (visited.has(checksum)) {\n        return {\n          code: \"__Circular\",\n          imports: {\n            types: new Set([\"__Circular\"]),\n          },\n        }\n      }\n      visited.add(checksum)\n\n      const result = getPapiPrimitive() ?? nativeNodeCodegen(node, next)\n      declarations.variables.set(checksum, {\n        checksum,\n        type: result.code,\n        name: \"I\" + checksum,\n      })\n      importsPerType.set(checksum, result.imports)\n      return result\n    })\n    return result.code\n  }\n\n  const buildStorage = (pallet: string, entry: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .storage!.items.find((s) => s.name === entry)!\n\n    if (storageEntry.type.tag === \"plain\")\n      return {\n        opaque: NEVER_STR,\n        args: \"[]\",\n        payload: `${buildTypeDefinition(storageEntry.type.value)}`,\n      }\n\n    const { key, value } = storageEntry.type.value\n    const payload = buildTypeDefinition(value)\n\n    const hashers = storageEntry.type.value.hashers\n    const opaque =\n      hashers\n        .map((x, idx) => (opaqueHashers.has(x.tag) ? `\"${idx}\"` : null))\n        .filter(Boolean)\n        .join(\" | \") || NEVER_STR\n\n    const returnKey =\n      hashers.length === 1\n        ? `[Key: ${buildTypeDefinition(key)}]`\n        : buildTypeDefinition(key)\n\n    return { args: returnKey, payload, opaque }\n  }\n\n  const buildRuntimeCall = (api: string, method: string) => {\n    const entry = metadata.apis\n      .find((x) => x.name === api)\n      ?.methods.find((x) => x.name === method)\n    if (!entry) throw null\n\n    const innerTuple = entry.inputs\n      .map(({ name, type }) => `${name}: ${buildTypeDefinition(type)}`)\n      .join(\", \")\n\n    return {\n      args: `[${innerTuple}]`,\n      value: buildTypeDefinition(entry.output),\n    }\n  }\n\n  const buildVariant =\n    (type: \"errors\" | \"events\" | \"calls\") => (pallet: string, name: string) => {\n      const lookupEntry = getLookupEntryDef(\n        metadata.pallets.find((x) => x.name === pallet)![type]! as number,\n      )\n      if (lookupEntry.type !== \"enum\") throw null\n\n      const innerLookup = lookupEntry.value[name]\n\n      if (innerLookup.type === \"lookupEntry\") {\n        return buildTypeDefinition(innerLookup.value.id)\n      } else if (innerLookup.type === \"void\") {\n        return \"undefined\"\n      } else {\n        // building all variants, in order to populate declarations.variables\n        buildTypeDefinition(lookupEntry.id)\n        const innerChecksum = getChecksum(innerLookup)\n        const innerVariable = declarations.variables.get(innerChecksum)\n        if (!innerVariable) {\n          throw new Error(\n            `Unable to build ${type} variant for ${pallet}::${name}: ${innerChecksum} not populated`,\n          )\n        }\n\n        return innerVariable.type\n      }\n    }\n\n  const buildConstant = (pallet: string, constantName: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .constants!.find((s) => s.name === constantName)!\n\n    return buildTypeDefinition(storageEntry.type)\n  }\n\n  const recordTypeFileImports = (): string[] => {\n    const allImports = new Set<string>()\n    for (const id of fileTypeEntries) {\n      const thisTypeImports = importsPerType.get(getChecksum(id))\n      if (!thisTypeImports?.types) continue\n\n      for (const singleType of thisTypeImports.types.values()) {\n        allImports.add(singleType)\n      }\n    }\n    fileTypeEntries.clear()\n    return Array.from(allImports)\n  }\n\n  const getDescriptorsTypes = (): Variable[] =>\n    [...declarations.variables.entries()]\n      .filter(([checksum]) => knownTypes[checksum])\n      .map(([_, variable]) => variable)\n\n  return {\n    buildStorage,\n    buildRuntimeCall,\n    buildEvent: buildVariant(\"events\"),\n    buildError: buildVariant(\"errors\"),\n    buildCall: buildVariant(\"calls\"),\n    buildConstant,\n    declarations,\n    recordTypeFileImports,\n    getClientFileImports: () => Array.from(clientFileImports),\n    getDescriptorsTypes,\n  }\n}\n","import {\n  getChecksumBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport type { V15 } from \"@polkadot-api/substrate-bindings\"\nimport { KnownTypes } from \"./known-types\"\nimport { defaultDeclarations, getTypesBuilder } from \"./types-builder\"\n\ntype ArraVal<T extends Array<any>> = T extends Array<infer V> ? V : unknown\n\nexport const getNewTypes = (\n  lookup: MetadataLookup,\n  knownTypes: KnownTypes,\n  getTypeName: (data: ArraVal<V15[\"lookup\"]>) => string | null,\n) => {\n  const { metadata } = lookup\n  const checksumBuilder = getChecksumBuilder(lookup)\n  let declarations = defaultDeclarations()\n  let typesBuilder = getTypesBuilder(\n    declarations,\n    lookup,\n    knownTypes,\n    checksumBuilder,\n  )\n\n  let ignoredIds = new Set<number>(\n    \"outerEnums\" in metadata\n      ? [\n          metadata.outerEnums.call,\n          metadata.outerEnums.error,\n          metadata.outerEnums.event,\n        ]\n      : [],\n  )\n\n  ;(\"outerEnums\" in metadata\n    ? [metadata.outerEnums.call, metadata.outerEnums.event]\n    : []\n  )\n    .map(lookup)\n    .forEach((entry) => {\n      if (entry.type !== \"enum\") throw null\n      Object.values(entry.value).forEach((inner) => {\n        if (inner.type === \"void\") return\n        ignoredIds.add(Object.values(inner.value)[0].id)\n      })\n    })\n\n  const wannabes: KnownTypes = {}\n  const nameToChecksum = new Map<string, { path: string[]; checksum: string }>()\n\n  metadata.lookup.forEach((x) => {\n    const result = checksumBuilder.buildDefinition(x.id)!\n    typesBuilder.buildDefinition(x.id)\n    const variable = declarations.variables.get(result)\n\n    if (\n      !variable ||\n      !variable.type.startsWith(\"AnonymousEnum<\") ||\n      variable.checksum in wannabes\n    )\n      return\n\n    const typeName = getTypeName(x)\n    if (!typeName) return\n\n    let finalTypeName = typeName\n    for (let i = 1; nameToChecksum.has(finalTypeName); i++)\n      finalTypeName = typeName + i\n\n    wannabes[variable.checksum] = { name: finalTypeName, priority: 0 }\n    nameToChecksum.set(finalTypeName, {\n      checksum: variable.checksum,\n      path: x.path,\n    })\n  })\n\n  declarations = defaultDeclarations()\n  typesBuilder = getTypesBuilder(\n    declarations,\n    lookup,\n    wannabes,\n    checksumBuilder,\n  )\n\n  metadata.lookup.forEach(({ id }) => {\n    typesBuilder.buildDefinition(id)\n  })\n\n  return Object.fromEntries(\n    [...nameToChecksum].map(([name, { checksum, path }]) => {\n      return [\n        checksum,\n        {\n          name,\n          checksum,\n          type: declarations.variables.get(checksum)!.type,\n          path,\n        },\n      ]\n    }),\n  )\n}\n","export const anonymizeImports = [\n  \"Binary\",\n  \"FixedSizeBinary\",\n  \"Enum\",\n  \"FixedSizeArray\",\n]\n\nexport const anonymizeType = `type AnonymousEnum<T extends {}> = T & {\n  __anonymous: true\n}\n\ntype MyTuple<T> = [T, ...T[]]\n\ntype SeparateUndefined<T> = undefined extends T\n  ? undefined | Exclude<T, undefined>\n  : T\n\ntype Anonymize<T> = SeparateUndefined<\n  T extends FixedSizeBinary<infer L>\n    ? number extends L\n      ? Binary\n      : FixedSizeBinary<L>\n    : T extends\n          | string\n          | number\n          | bigint\n          | boolean\n          | void\n          | undefined\n          | null\n          | symbol\n          | Uint8Array\n          | Enum<any>\n      ? T\n      : T extends AnonymousEnum<infer V>\n        ? Enum<V>\n        : T extends MyTuple<any>\n          ? {\n              [K in keyof T]: T[K]\n            }\n          : T extends []\n            ? []\n            : T extends FixedSizeArray<infer L, infer T>\n              ? number extends L\n                ? Array<T>\n                : FixedSizeArray<L, T>\n              : {\n                  [K in keyof T & string]: T[K]\n                }\n>`\n","import {\n  getChecksumBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport { filterObject, mapObject } from \"@polkadot-api/utils\"\nimport { anonymizeImports, anonymizeType } from \"./anonymize\"\nimport { getTypesBuilder } from \"./types-builder\"\n\nconst isDocs = (x: any) => {\n  if (typeof x !== \"object\") return false\n  const keys = new Set(Object.keys(x))\n  if (keys.size !== 2) return false\n  return keys.has(\"docs\") && keys.has(\"value\")\n}\n\nexport const customStringifyObject = (\n  input: string | Record<string, any> | Array<any>,\n): string => {\n  if (typeof input === \"string\" || typeof input === \"number\") return input\n\n  if (Array.isArray(input))\n    return `[${input.map(customStringifyObject).join(\", \")}]`\n\n  return `{${Object.entries(\n    mapObject(input, (x) => (isDocs(x) ? x : customStringifyObject(x))),\n  )\n    .map(([key, value]) => {\n      if (isDocs(value)) {\n        return `\\n\\n/**\\n${value.docs\n          .map((doc: string) => ` *${doc}`)\n          .join(\"\\n\")}\\n */\\n${key}: ${customStringifyObject(value.value)}`\n      }\n      return `${key}: ${value}`\n    })\n    .join(\",\\n\")}}`\n}\n\n// type -> pallet -> name\nexport type DescriptorValues = Record<\n  \"storage\" | \"tx\" | \"events\" | \"constants\" | \"apis\",\n  Record<string, Record<string, number>>\n>\n\nexport function capitalize(value: string) {\n  return value.slice(0, 1).toUpperCase() + value.slice(1)\n}\n\nexport const generateDescriptors = (\n  lookupFn: MetadataLookup,\n  checksumToIdx: Map<string, number>,\n  typesBuilder: ReturnType<typeof getTypesBuilder>,\n  checksumBuilder: ReturnType<typeof getChecksumBuilder>,\n  key: string,\n  paths: {\n    client: string\n    metadataTypes: string\n    types: string\n    descriptorValues: string\n  },\n  genesis?: string,\n) => {\n  const prefix = capitalize(key)\n  const { metadata } = lookupFn\n  const buildEnumObj = <T>(\n    val: number | undefined,\n    cb: (name: string, docs: string[]) => T,\n  ): Record<string, T> => {\n    if (val === undefined) return {}\n\n    const lookup = metadata.lookup[val]\n    if (lookup.def.tag !== \"variant\") throw null\n    return Object.fromEntries(\n      lookup.def.value.map((x) => {\n        return [x.name!, cb(x.name, x.docs)]\n      }),\n    )\n  }\n\n  const storage = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        Object.fromEntries(\n          pallet.storage?.items.map(({ name, modifier, docs }) => {\n            const { key, val, opaque } = typesBuilder.buildStorage(\n              pallet.name,\n              name,\n            )\n            const checksum = checksumBuilder.buildStorage(pallet.name, name)!\n            const type = `StorageDescriptor<${key}, ${val}, ${!modifier}, ${opaque}>`\n            return [\n              name,\n              {\n                typeRef: checksumToIdx.get(checksum)!,\n                type,\n                name: `stg_${pallet.name}_${name}`,\n                docs,\n              },\n            ]\n          }) ?? [],\n        ),\n      ]\n    }),\n  )\n\n  const constants = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        Object.fromEntries(\n          pallet.constants?.map(({ name, docs }) => {\n            const checksum = checksumBuilder.buildConstant(pallet.name, name)!\n            const type = `PlainDescriptor<${typesBuilder.buildConstant(\n              pallet.name,\n              name,\n            )}>`\n            return [\n              name,\n              {\n                typeRef: checksumToIdx.get(checksum)!,\n                type,\n                name: `const_${pallet.name}_${name}`,\n                docs,\n              },\n            ]\n          }) ?? [],\n        ),\n      ]\n    }),\n  )\n\n  const calls = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        buildEnumObj(pallet.calls, (name, docs) => ({\n          typeRef: checksumToIdx.get(\n            checksumBuilder.buildCall(pallet.name, name)!,\n          )!,\n          type: `TxDescriptor<${typesBuilder.buildCall(pallet.name, name)}>`,\n          name: `call_${pallet.name}_${name}`,\n          docs,\n        })),\n      ]\n    }),\n  )\n\n  const events = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        buildEnumObj(pallet.events, (name, docs) => ({\n          typeRef: checksumToIdx.get(\n            checksumBuilder.buildEvent(pallet.name, name)!,\n          )!,\n          type: `PlainDescriptor<${typesBuilder.buildEvent(\n            pallet.name,\n            name,\n          )}>`,\n          name: `evt_${pallet.name}_${name}`,\n          docs,\n        })),\n      ]\n    }),\n  )\n\n  const errors = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        buildEnumObj(pallet.errors, (name, docs) => {\n          return {\n            typeRef: checksumToIdx.get(\n              checksumBuilder.buildError(pallet.name, name)!,\n            )!,\n            type: `PlainDescriptor<${typesBuilder.buildError(\n              pallet.name,\n              name,\n            )}>`,\n            name: `err_${pallet.name}_${name}`,\n            docs,\n          }\n        }),\n      ]\n    }),\n  )\n\n  const runtimeCalls = Object.fromEntries(\n    metadata.apis.map((api) => [\n      api.name,\n      {\n        docs: api.docs,\n        methods: Object.fromEntries(\n          api.methods.map((method) => {\n            const { args, value } = typesBuilder.buildRuntimeCall(\n              api.name,\n              method.name,\n            )\n            return [\n              method.name,\n              {\n                typeRef: checksumToIdx.get(\n                  checksumBuilder.buildRuntimeCall(api.name, method.name)!,\n                )!,\n                type: `RuntimeDescriptor<${args}, ${value}>`,\n                name: `runtime_${api.name}_${method.name}`,\n                docs: method.docs,\n              },\n            ]\n          }),\n        ),\n      },\n    ]),\n  )\n\n  const mapDescriptor = <T, R>(\n    descriptor: Record<string, Record<string, T>>,\n    mapFn: (value: T, pallet: string, name: string) => R,\n  ): Record<string, Record<string, R>> =>\n    filterObject(\n      mapObject(descriptor, (v, pallet) =>\n        mapObject(v, (value, name) => mapFn(value, pallet, name)),\n      ),\n      (v) => Object.keys(v).length > 0,\n    )\n\n  const extractValue = (input: { docs: string[]; type: string }) => ({\n    docs: input.docs,\n    value: input.type,\n  })\n\n  const iStorage = mapDescriptor(storage, extractValue)\n  const iCalls = mapDescriptor(calls, extractValue)\n  const iEvents = mapDescriptor(events, extractValue)\n  const iErrors = mapDescriptor(errors, extractValue)\n  const iConstants = mapDescriptor(constants, extractValue)\n\n  const descriptorValues: DescriptorValues = {\n    storage: {},\n    tx: {},\n    events: {},\n    constants: {},\n    apis: {},\n  }\n  const mapObjStr = mapObject as <I, O>(\n    input: Record<string, I>,\n    mapper: (i: I, k: string) => O,\n  ) => Record<string, O>\n  Object.keys(storage).forEach((pallet) => {\n    descriptorValues[\"storage\"][pallet] = mapObjStr(\n      storage[pallet],\n      (x, _: string) => x.typeRef,\n    )\n    descriptorValues[\"tx\"][pallet] = mapObjStr(calls[pallet], (x) => x.typeRef)\n    descriptorValues[\"events\"][pallet] = mapObjStr(\n      events[pallet],\n      (x) => x.typeRef,\n    )\n    descriptorValues[\"constants\"][pallet] = mapObjStr(\n      constants[pallet],\n      (x) => x.typeRef,\n    )\n  })\n\n  const iRuntimeCalls = mapObject(runtimeCalls, (api) => ({\n    docs: api.docs,\n    value: mapObject(api.methods, ({ docs, type: value }) => ({ docs, value })),\n  }))\n\n  if (lookupFn.call) {\n    // Generate the types to have it included in common types\n    typesBuilder.buildDefinition(lookupFn.call)\n  }\n\n  const callInterface = lookupFn.call\n    ? `I${checksumBuilder.buildDefinition(lookupFn.call)}`\n    : null\n\n  // & { value: { type: string }} to remove pallets without tx (otherwise it's not assignable to TxCallData)\n  const chainCallType = callInterface\n    ? `export type ${prefix}CallData = Anonymize<${callInterface}> & { value: { type: string } };`\n    : \"\"\n\n  descriptorValues[\"apis\"] = mapObject(runtimeCalls, (api) =>\n    mapObject(api.methods, (x) => x.typeRef),\n  )\n\n  const clientImports = [\n    ...new Set([\n      \"StorageDescriptor\",\n      \"PlainDescriptor\",\n      \"TxDescriptor\",\n      \"RuntimeDescriptor\",\n      \"Enum\",\n      \"_Enum\",\n      \"GetEnum\",\n      \"QueryFromPalletsDef\",\n      \"TxFromPalletsDef\",\n      \"EventsFromPalletsDef\",\n      \"ErrorsFromPalletsDef\",\n      \"ConstFromPalletsDef\",\n      ...typesBuilder.getClientFileImports(),\n      ...anonymizeImports,\n    ]),\n  ]\n\n  const assetId = getAssetId(lookupFn)\n  const assetType =\n    assetId == null ? \"void\" : typesBuilder.buildTypeDefinition(assetId)\n\n  const dispatchErrorId = getDispatchErrorId(lookupFn)\n  const dispatchErrorType =\n    dispatchErrorId == null\n      ? \"unknown\"\n      : typesBuilder.buildTypeDefinition(dispatchErrorId)\n\n  const commonTypeImports = typesBuilder.getTypeFileImports()\n\n  const exports = [\n    `default as ${key}`,\n    callInterface ? `${prefix}CallData` : null,\n  ].filter((v) => v !== null)\n\n  // Going through base64 conversion instead of using binary loader because of esbuild issue\n  // https://github.com/evanw/esbuild/issues/3894\n  const imports = `import {${clientImports.join(\", \")}} from \"${paths.client}\";\n  import {${commonTypeImports.join(\", \")}} from \"${paths.types}\";\n\n  const toBinary = (() => {\n    const table = new Uint8Array(128);\n    for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;\n    return (base64: string) => {\n      const n = base64.length,\n        bytes = new Uint8Array((n - Number(base64[n - 1] === '=') - Number(base64[n - 2] === '=')) * 3 / 4 | 0);\n      for (let i2 = 0, j = 0; i2 < n;) {\n        const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];\n        const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];\n        bytes[j++] = c0 << 2 | c1 >> 4;\n        bytes[j++] = c1 << 4 | c2 >> 2;\n        bytes[j++] = c2 << 6 | c3;\n      }\n      return bytes;\n    };\n  })();\n\n  const descriptorValues = import(\"${paths.descriptorValues}\").then(module => module[\"${prefix}\"]);\n  const metadataTypes = import(\"${paths.metadataTypes}\").then(\n    module => toBinary('default' in module ? module.default : module)\n  );\n  `\n\n  const descriptorTypes = `${imports}\n\n${anonymizeType}\n\ntype IStorage = ${customStringifyObject(iStorage)};\ntype ICalls = ${customStringifyObject(iCalls)};\ntype IEvent = ${customStringifyObject(iEvents)};\ntype IError = ${customStringifyObject(iErrors)};\ntype IConstants = ${customStringifyObject(iConstants)};\ntype IRuntimeCalls = ${customStringifyObject(iRuntimeCalls)};\ntype IAsset = PlainDescriptor<${assetType}>\nexport type ${prefix}DispatchError = ${dispatchErrorType}\nconst asset: IAsset = {} as IAsset\nconst getMetadata: () => Promise<Uint8Array> = () => import(\"./${key}_metadata\").then(\n  module => toBinary('default' in module ? module.default : module)\n)\nconst genesis: string | undefined = ${genesis ? `\"${genesis}\"` : undefined}\n\ntype PalletsTypedef = {\n  __storage: IStorage,\n  __tx: ICalls,\n  __event: IEvent,\n  __error: IError,\n  __const: IConstants\n}\n\ntype IDescriptors = {\n  descriptors: {\n    pallets: PalletsTypedef,\n    apis: IRuntimeCalls\n  } & Promise<any>,\n  metadataTypes: Promise<Uint8Array>\n  asset: IAsset\n  getMetadata: () => Promise<Uint8Array>\n  genesis: string | undefined\n};\nconst _allDescriptors = { descriptors: descriptorValues, metadataTypes, asset, getMetadata, genesis } as any as IDescriptors;\nexport default _allDescriptors;\n\nexport type ${prefix}Queries = QueryFromPalletsDef<PalletsTypedef>\nexport type ${prefix}Calls = TxFromPalletsDef<PalletsTypedef>\nexport type ${prefix}Events = EventsFromPalletsDef<PalletsTypedef>\nexport type ${prefix}Errors = ErrorsFromPalletsDef<PalletsTypedef>\nexport type ${prefix}Constants = ConstFromPalletsDef<PalletsTypedef>\n${chainCallType}\n\nexport type ${prefix}WhitelistEntry =\n  | PalletKey\n  | ApiKey<IRuntimeCalls>\n  | \\`query.\\${NestedKey<PalletsTypedef['__storage']>}\\`\n  | \\`tx.\\${NestedKey<PalletsTypedef['__tx']>}\\`\n  | \\`event.\\${NestedKey<PalletsTypedef['__event']>}\\`\n  | \\`error.\\${NestedKey<PalletsTypedef['__error']>}\\`\n  | \\`const.\\${NestedKey<PalletsTypedef['__const']>}\\`\n\ntype PalletKey = \\`*.\\${keyof (IStorage & ICalls & IEvent & IError & IConstants & IRuntimeCalls)}\\`\ntype NestedKey<D extends Record<string, Record<string, any>>> =\n  | \"*\"\n  | {\n      [P in keyof D & string]:\n        | \\`\\${P}.*\\`\n        | {\n            [N in keyof D[P] & string]: \\`\\${P}.\\${N}\\`\n          }[keyof D[P] & string]\n    }[keyof D & string]\n\ntype ApiKey<D extends Record<string, Record<string, any>>> =\n  | \"api.*\"\n  | {\n      [P in keyof D & string]:\n        | \\`api.\\${P}.*\\`\n        | {\n            [N in keyof D[P] & string]: \\`api.\\${P}.\\${N}\\`\n          }[keyof D[P] & string]\n    }[keyof D & string]\n`\n\n  return { descriptorTypes, descriptorValues, exports }\n}\n\nexport function getAssetId(lookup: MetadataLookup) {\n  const assetPayment = lookup.metadata.extrinsic.signedExtensions.find(\n    (x) => x.identifier === \"ChargeAssetTxPayment\",\n  )\n\n  if (assetPayment) {\n    const assetTxPayment = lookup(assetPayment.type)\n    if (assetTxPayment.type === \"struct\") {\n      const optionalAssetId = assetTxPayment.value.asset_id\n      if (optionalAssetId.type === \"option\") return optionalAssetId.value.id\n    }\n  }\n  return\n}\n\nexport function getDispatchErrorId(lookup: MetadataLookup) {\n  const systemPalletEventId = lookup.metadata.pallets.find(\n    (p) => p.name === \"System\",\n  )?.events\n  if (systemPalletEventId == null) return\n\n  const systemPalletEvent = lookup(systemPalletEventId)\n  if (systemPalletEvent.type !== \"enum\") return\n\n  const extrinsicFailed = systemPalletEvent.value.ExtrinsicFailed\n  if (extrinsicFailed?.type !== \"struct\") return\n\n  return extrinsicFailed.value.dispatch_error.id\n}\n","import { anonymizeImports, anonymizeType } from \"./anonymize\"\nimport { CodeDeclarations } from \"./types-builder\"\n\nexport const generateTypes = (\n  declarations: CodeDeclarations,\n  paths: {\n    client: string\n  },\n) => {\n  const clientImports = [\n    ...new Set([\n      \"Enum\",\n      \"_Enum\",\n      \"GetEnum\",\n      ...declarations.imports,\n      ...anonymizeImports,\n    ]),\n  ]\n\n  const imports = `import {${clientImports.join(\", \")}} from \"${paths.client}\";`\n\n  const baseTypes = [...declarations.variables.values()]\n    .map(({ name, type }) =>\n      type.startsWith(\"Enum<\")\n        ? `export type ${name} = ${type};\\nexport const ${name} = _Enum as unknown as GetEnum<${name}>;`\n        : `export type ${name} = ${type};`,\n    )\n    .join(\"\\n\\n\")\n\n  return `${imports}\n\n  ${anonymizeType}\n\n  ${baseTypes}\n  `\n}\n","import {\n  getChecksumBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  EntryPoint,\n  TypedefNode,\n  mapLookupToTypedef,\n  runtimeCallEntryPoint,\n  storageEntryPoint,\n  enumValueEntryPointNode,\n  singleValueEntryPoint,\n  voidEntryPointNode,\n  mapEntryPointReferences,\n} from \"@polkadot-api/metadata-compatibility\"\n\n/**\n * This function extracts from `metadata` all the types used from any entry\n * point (pallets and runtime APIs)\n * pruning and de-duplicating repeated types.\n *\n * It returns a map of `checksum => TypedefNode` for compatibility checking and\n * an array of checksums to map the dependencies of those `TypdefNode` (which\n * are expressed as indices) to the next checksum.\n * (Which will be needed when merging types from multiple chains)\n */\nexport const getUsedTypes = (\n  lookup: MetadataLookup,\n  builder: ReturnType<typeof getChecksumBuilder>,\n) => {\n  const checksums: string[] = new Array(lookup.metadata.lookup.length)\n  const visited = new Set<string>()\n  const types = new Map<string, TypedefNode>()\n  const entryPoints = new Map<string, EntryPoint>()\n\n  const addTypeFromLookup = (id: number | undefined) => {\n    if (id == null) return\n    const checksum = builder.buildDefinition(id)\n    if (!checksum) {\n      throw new Error(\"Unreachable: checksum not available for lookup type\")\n    }\n    checksums[id] = checksum\n    // We can't use `types` directly, because mapLookupToTypedef can recursively call this function.\n    if (visited.has(checksum)) return\n    visited.add(checksum)\n    types.set(checksum, mapLookupToTypedef(lookup(id), addTypeFromLookup))\n  }\n  const addTypeFromEntryPoint = (checksum: string, entry: EntryPoint) => {\n    entryPoints.set(checksum, entry)\n    mapEntryPointReferences(entry, (id) => {\n      addTypeFromLookup(id)\n      return id\n    })\n  }\n\n  const buildEnum = (\n    side: \"args\" | \"values\",\n    val: number | undefined,\n    cb: (name: string) => string,\n  ) => {\n    if (val === undefined) return\n    const entry = lookup(val)\n\n    if (entry.type === \"void\") return\n    if (entry.type !== \"enum\") throw new Error(\"Expected enum\")\n\n    Object.entries(entry.value).forEach(([name, value]) => {\n      const checksum = cb(name)\n      const node = enumValueEntryPointNode(value)\n      addTypeFromEntryPoint(checksum, {\n        args: side === \"args\" ? node : voidEntryPointNode,\n        values: side === \"args\" ? voidEntryPointNode : node,\n      })\n    })\n  }\n\n  lookup.metadata.pallets.forEach((pallet) => {\n    pallet.storage?.items.forEach((entry) => {\n      const checksum = builder.buildStorage(pallet.name, entry.name)!\n      addTypeFromEntryPoint(checksum, storageEntryPoint(entry))\n    })\n    pallet.constants.forEach(({ name, type }) => {\n      const checksum = builder.buildConstant(pallet.name, name)!\n      addTypeFromEntryPoint(checksum, singleValueEntryPoint(type))\n    })\n    buildEnum(\n      \"args\",\n      pallet.calls,\n      (name) => builder.buildCall(pallet.name, name)!,\n    )\n    buildEnum(\n      \"values\",\n      pallet.events,\n      (name) => builder.buildEvent(pallet.name, name)!,\n    )\n    buildEnum(\n      \"values\",\n      pallet.errors,\n      (name) => builder.buildError(pallet.name, name)!,\n    )\n  })\n\n  lookup.metadata.apis.forEach((api) =>\n    api.methods.forEach((method) => {\n      const checksum = builder.buildRuntimeCall(api.name, method.name)!\n      addTypeFromEntryPoint(checksum, runtimeCallEntryPoint(method))\n    }),\n  )\n\n  return { types, entryPoints, checksums }\n}\n","import { mapObject } from \"@polkadot-api/utils\"\n\nexport type KnownTypes = Record<\n  string,\n  {\n    name: string\n    priority: number\n  }\n>\n\ntype RepositoryEntry =\n  | string\n  | {\n      name: string\n      paths?: string[]\n      type?: string\n      chains?: string\n      priority?: number\n    }\n\nexport const knownTypesRepository: Record<string, RepositoryEntry> = {\n  \"1078dp8vlrjh3\": {\n    name: \"SessionEvent\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"pallet_session.pallet.Event\"],\n    type: \"Enum(NewSession)\",\n  },\n  \"11avansl9buvp\": {\n    name: \"XcmV2MultiassetAssetInstance\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.multiasset.AssetInstance\"],\n    type: \"Enum(Undefined, Index, Array4, Array8, Array16, Array32, Blob)\",\n  },\n  \"129huic8ces20\": {\n    name: \"CandidateEvent\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"polkadot_primitives.v7.CandidateEvent\"],\n    type: \"Enum(CandidateBacked, CandidateIncluded, CandidateTimedOut)\",\n  },\n  \"14qmevhulqskl\": {\n    name: \"NominationPoolsEvent\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"pallet_nomination_pools.pallet.Event\"],\n    type: \"Enum(Created, Bonded, PaidOut, Unbonded, Withdrawn, Destroyed, StateChanged, MemberRemoved, RolesUpdated, PoolSlashed, UnbondingPoolSlashed, PoolCommissionUpdated, PoolMaxCommissionUpdated, PoolCommissionChangeRateUpdated, PoolCommissionClaimPermissionUpdated, PoolCommissionClaimed, MinBalanceDeficitAdjusted, MinBalanceExcessAdjusted)\",\n  },\n  \"1e4e6h17tes8n\": {\n    name: \"XcmV2MultiassetFungibility\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.multiasset.Fungibility\"],\n    type: \"Enum(Fungible, NonFungible)\",\n  },\n  \"1lanl0ouai2l7\": {\n    name: \"NominationPoolsCommissionClaimPermission\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_nomination_pools.CommissionClaimPermission\"],\n    type: \"Enum(Permissionless, Account)\",\n  },\n  \"1pil5vhej188n\": {\n    name: \"CommonParasRegistrarEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_common.paras_registrar.pallet.Event\"],\n    type: \"Enum(Registered, Deregistered, Reserved, Swapped)\",\n  },\n  \"1pja0i3r5p1gp\": {\n    name: \"XcmPalletQueryStatus\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"pallet_xcm.pallet.QueryStatus\"],\n    type: \"Enum(Pending, VersionNotifier, Ready)\",\n  },\n  \"1ra0103q36u4i\": {\n    name: \"ElectionProviderMultiPhasePhase\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_election_provider_multi_phase.Phase\"],\n    type: \"Enum(Off, Signed, Unsigned, Emergency)\",\n  },\n  \"1rjg0rh02tt4m\": {\n    name: \"CommonCrowdloanLastContribution\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_common.crowdloan.LastContribution\"],\n    type: \"Enum(Never, PreEnding, Ending)\",\n  },\n  \"1tac42poi01n8\": {\n    name: \"OffencesEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_offences.pallet.Event\"],\n    type: \"Enum(Offence)\",\n  },\n  \"22g1a3o3q475f\": {\n    name: \"NominationPoolsPoolState\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_nomination_pools.PoolState\"],\n    type: \"Enum(Open, Blocked, Destroying)\",\n  },\n  \"264i12ff5ltjn\": {\n    name: \"MultiAddress\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_runtime.multiaddress.MultiAddress\"],\n    type: \"Enum(Id, Index, Raw, Address32, Address20)\",\n  },\n  \"29a9v38btsv3g\": {\n    name: \"ParachainsInclusionUmpQueueId\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.inclusion.UmpQueueId\"],\n    type: \"Enum(Para)\",\n  },\n  \"2bvq1blgrln1s\": {\n    name: \"NominationPoolsBondExtra\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_nomination_pools.BondExtra\"],\n    type: \"Enum(FreeBalance, Rewards)\",\n  },\n  \"2dcitigd3tk41\": {\n    name: \"XcmV2OriginKind\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v2.OriginKind\", \"xcm.v3.OriginKind\"],\n    type: \"Enum(Native, SovereignAccount, Superuser, Xcm)\",\n  },\n  \"2gj0h0im54fqd\": {\n    name: \"PreimageRequestStatus\",\n    chains:\n      \"polkadot, polkadot.collectives, kusama, paseo, westend, westend.collectives\",\n    paths: [\"pallet_preimage.RequestStatus\"],\n    type: \"Enum(Unrequested, Requested)\",\n  },\n  \"2qbmdeolj2cue\": {\n    name: \"BagsListEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_bags_list.pallet.Event\"],\n    type: \"Enum(Rebagged, ScoreUpdated)\",\n  },\n  \"2v2nj97k9o9e\": {\n    name: \"CommonClaimsEvent\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"polkadot_runtime_common.claims.pallet.Event\"],\n    type: \"Enum(Claimed)\",\n  },\n  \"302o6h1bqiqgu\": {\n    name: \"PreimageEvent\",\n    chains:\n      \"polkadot, polkadot.collectives, kusama, paseo, westend, westend.collectives\",\n    paths: [\"pallet_preimage.pallet.Event\"],\n    type: \"Enum(Noted, Requested, Cleared)\",\n  },\n  \"30v4njes1avsr\": {\n    name: \"XcmV2Response\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.Response\"],\n    type: \"Enum(Null, Assets, ExecutionResult, Version)\",\n  },\n  \"332pk9bjbk7p3\": {\n    name: \"XcmV3MultiassetWildMultiAsset\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.multiasset.WildMultiAsset\"],\n    type: \"Enum(All, AllOf, AllCounted, AllOfCounted)\",\n  },\n  \"341grmvm6j3e5\": {\n    name: \"ParachainsParasParaLifecycle\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.paras.ParaLifecycle\"],\n    type: \"Enum(Onboarding, Parathread, Parachain, UpgradingParathread, DowngradingParachain, OffboardingParathread, OffboardingParachain)\",\n  },\n  \"3bd4nvc4e2g3p\": {\n    name: \"StakingEvent\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"pallet_staking.pallet.pallet.Event\"],\n    type: \"Enum(EraPaid, Rewarded, Slashed, SlashReported, OldSlashingReportDiscarded, StakersElected, Bonded, Unbonded, Withdrawn, Kicked, StakingElectionFailed, Chilled, PayoutStarted, ValidatorPrefsSet, SnapshotVotersSizeExceeded, SnapshotTargetsSizeExceeded, ForceEra, ControllerBatchDeprecated)\",\n  },\n  \"3f4te0335d8h1\": {\n    name: \"WestendRuntimeGovernanceOriginsPalletCustomOriginsOrigin\",\n    chains: \"westend\",\n    paths: [\"westend_runtime.governance.origins.pallet_custom_origins.Origin\"],\n    type: \"Enum(StakingAdmin, Treasurer, FellowshipAdmin, GeneralAdmin, AuctionAdmin, LeaseAdmin, ReferendumCanceller, ReferendumKiller, SmallTipper, BigTipper, SmallSpender, MediumSpender, BigSpender, WhitelistedCaller, FellowshipInitiates, Fellows, FellowshipExperts, FellowshipMasters, Fellowship1Dan, Fellowship2Dan, Fellowship3Dan, Fellowship4Dan, Fellowship5Dan, Fellowship6Dan, Fellowship7Dan, Fellowship8Dan, Fellowship9Dan)\",\n  },\n  \"3g7a8g60ho721\": {\n    name: \"BabeAllowedSlots\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"sp_consensus_babe.AllowedSlots\"],\n    type: \"Enum(PrimarySlots, PrimaryAndSecondaryPlainSlots, PrimaryAndSecondaryVRFSlots)\",\n  },\n  \"3jnpd4dmb650\": {\n    name: \"XcmV2MultiassetWildMultiAsset\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.multiasset.WildMultiAsset\"],\n    type: \"Enum(All, AllOf)\",\n  },\n  \"3nveejfjt6cjg\": {\n    name: \"WestendRuntimeRuntimeHoldReason\",\n    chains: \"polkadot.collectives\",\n    paths: [\"collectives_polkadot_runtime.RuntimeHoldReason\"],\n    type: \"Enum(Preimage)\",\n  },\n  \"3psnvvr3d6p0t\": {\n    name: \"XcmVersionedXcm\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.VersionedXcm\"],\n    type: \"Enum(V3, V4, V5)\",\n    priority: 1,\n  },\n  \"3vrnp048j3b2d\": {\n    name: \"BalancesAdjustmentDirection\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"pallet_balances.types.AdjustmentDirection\"],\n    type: \"Enum(Increase, Decrease)\",\n  },\n  \"43e3ummb3h5dn\": {\n    name: \"PolkadotRuntimeCommonIdentityMigratorEvent\",\n    chains: \"westend, westend.people\",\n    paths: [\"polkadot_runtime_common.identity_migrator.pallet.Event\"],\n    type: \"Enum(IdentityReaped, DepositUpdated)\",\n  },\n  \"46j01db9schbn\": {\n    name: \"XcmV2BodyId\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.BodyId\"],\n    type: \"Enum(Unit, Named, Index, Executive, Technical, Legislative, Judicial, Defense, Administration, Treasury)\",\n  },\n  \"47gh5t4ppbcdj\": {\n    name: \"XcmVersionedAssetId\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.VersionedAssetId\"],\n    type: \"Enum(V3, V4, V5)\",\n    priority: 1,\n  },\n  \"49em457ob9ou0\": {\n    name: \"ParachainsOrigin\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.origin.pallet.Origin\"],\n    type: \"Enum(Parachain)\",\n  },\n  \"4cajo1lbs9cmt\": {\n    name: \"XcmV3MultiassetAssetId\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.multiasset.AssetId\"],\n    type: \"Enum(Concrete, Abstract)\",\n  },\n  \"4k4r9im11cdan\": {\n    name: \"PvfExecKind\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.PvfExecKind\",\n      \"polkadot_primitives.v8.PvfExecKind\",\n    ],\n    type: \"Enum(Backing, Approval)\",\n  },\n  \"4peoofcn0loqr\": {\n    name: \"StakingRewardDestination\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_staking.RewardDestination\"],\n    type: \"Enum(Staked, Stash, Controller, Account, None)\",\n  },\n  \"4sjnuvedkqa2r\": {\n    name: \"ParachainsInclusionAggregateMessageOrigin\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.inclusion.AggregateMessageOrigin\"],\n    type: \"Enum(Ump)\",\n  },\n  \"4vbt6tkj8bvqs\": {\n    name: \"OccupiedCoreAssumption\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.OccupiedCoreAssumption\",\n      \"polkadot_primitives.v8.OccupiedCoreAssumption\",\n    ],\n    type: \"Enum(Included, TimedOut, Free)\",\n  },\n  \"505kan7sticn1\": {\n    name: \"XcmV2Junction\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.junction.Junction\"],\n    type: \"Enum(Parachain, AccountId32, AccountIndex64, AccountKey20, PalletInstance, GeneralIndex, GeneralKey, OnlyChild, Plurality)\",\n  },\n  \"515gfvv2a6c4o\": {\n    name: \"PreimageOldRequestStatus\",\n    chains:\n      \"polkadot, polkadot.collectives, kusama, paseo, westend, westend.collectives\",\n    paths: [\"pallet_preimage.OldRequestStatus\"],\n    type: \"Enum(Unrequested, Requested)\",\n  },\n  \"543plq9vh7s3m\": {\n    name: \"XcmVersionedResponse\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.VersionedResponse\"],\n    type: \"Enum(V2, V3, V4)\",\n  },\n  \"5g0925eiftlcf\": {\n    name: \"XcmV3MaybeErrorCode\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.MaybeErrorCode\"],\n    type: \"Enum(Success, Error, TruncatedError)\",\n  },\n  \"5h5t0elhnbseq\": {\n    name: \"BagsListListListError\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_bags_list.list.ListError\"],\n    type: \"Enum(Duplicate, NotHeavier, NotInSameBag, NodeNotFound)\",\n  },\n  \"5ltp1mv4fr7n7\": {\n    name: \"TokenError\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_runtime.TokenError\"],\n    type: \"Enum(FundsUnavailable, OnlyProvider, BelowMinimum, CannotCreate, UnknownAsset, Frozen, Unsupported, CannotCreateHold, NotExpendable, Blocked)\",\n  },\n  \"5svrq9ei0ks3q\": {\n    name: \"XcmPalletOrigin\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"pallet_xcm.pallet.Origin\"],\n    type: \"Enum(Xcm, Response)\",\n  },\n  \"5tbcfetjk0h9h\": {\n    name: \"NominationPoolsConfigOp\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_nomination_pools.ConfigOp\"],\n    type: \"Enum(Noop, Set, Remove)\",\n  },\n  \"629bfqn3u6tle\": {\n    name: \"IdentityData\",\n    chains: \"polkadot.people, kusama.people, westend, westend.people\",\n    paths: [\"pallet_identity.types.Data\"],\n    type: \"Enum(None, Raw0, Raw1, Raw2, Raw3, Raw4, Raw5, Raw6, Raw7, Raw8, Raw9, Raw10, Raw11, Raw12, Raw13, Raw14, Raw15, Raw16, Raw17, Raw18, Raw19, Raw20, Raw21, Raw22, Raw23, Raw24, Raw25, Raw26, Raw27, Raw28, Raw29, Raw30, Raw31, Raw32, BlakeTwo256, Sha256, Keccak256, ShaThree256)\",\n  },\n  \"66mc66cqnpat1\": {\n    name: \"GrandpaStoredState\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_grandpa.StoredState\"],\n    type: \"Enum(Live, PendingPause, Paused, PendingResume)\",\n  },\n  \"6ag633d941o7v\": {\n    name: \"XcmV3Junction\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.junction.Junction\", \"staging_xcm.v4.junction.Junction\"],\n    type: \"Enum(Parachain, AccountId32, AccountIndex64, AccountKey20, PalletInstance, GeneralIndex, GeneralKey, OnlyChild, Plurality, GlobalConsensus)\",\n  },\n  \"6c90ieeim9tjd\": {\n    name: \"XcmPalletVersionMigrationStage\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"pallet_xcm.pallet.VersionMigrationStage\"],\n    type: \"Enum(MigrateSupportedVersion, MigrateVersionNotifiers, NotifyCurrentTargets, MigrateAndNotifyOldTargets)\",\n  },\n  \"6d7om5l62r3h6\": {\n    name: \"XcmV5Junctions\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v5.junctions.Junctions\"],\n    type: \"Enum(Here, X1, X2, X3, X4, X5, X6, X7, X8)\",\n  },\n  \"6hem0avr1eoco\": {\n    name: \"ParachainsDisputeResult\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.disputes.DisputeResult\"],\n    type: \"Enum(Valid, Invalid)\",\n  },\n  \"6rjjsd07rc200\": {\n    name: \"MmrPrimitivesError\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"sp_mmr_primitives.Error\"],\n    type: \"Enum(InvalidNumericOp, Push, GetRoot, Commit, GenerateProof, Verify, LeafNotFound, PalletNotIncluded, InvalidLeafIndex, InvalidBestKnownBlock)\",\n  },\n  \"710b6mh49al4f\": {\n    name: \"XcmV2NetworkId\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.NetworkId\"],\n    type: \"Enum(Any, Named, Polkadot, Kusama)\",\n  },\n  \"73beoct6oecc\": {\n    name: \"XcmV5NetworkId\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v5.junction.NetworkId\"],\n    type: \"Enum(ByGenesis, ByFork, Polkadot, Kusama, Ethereum, BitcoinCore, BitcoinCash, PolkadotBulletin)\",\n  },\n  \"769fta165mequ\": {\n    name: \"XcmV3WeightLimit\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.WeightLimit\"],\n    type: \"Enum(Unlimited, Limited)\",\n  },\n  \"7bvp9q4ceuk7\": {\n    name: \"DigestItem\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_runtime.generic.digest.DigestItem\"],\n    type: \"Enum(PreRuntime, Consensus, Seal, Other, RuntimeEnvironmentUpdated)\",\n  },\n  \"7ffbrur6hobca\": {\n    name: \"XcmV3Response\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.Response\"],\n    type: \"Enum(Null, Assets, ExecutionResult, Version, PalletsInfo, DispatchResult)\",\n  },\n  \"7t5v4k056sf3d\": {\n    name: \"PolkadotRuntimeParachainsCoretimeEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.coretime.pallet.Event\"],\n    type: \"Enum(RevenueInfoRequested, CoreAssigned)\",\n  },\n  \"7u481jea1442o\": {\n    name: \"BalanceStatus\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"frame_support.traits.tokens.misc.BalanceStatus\"],\n    type: \"Enum(Free, Reserved)\",\n  },\n  \"7ujvudkvg12so\": {\n    name: \"IdentityJudgement\",\n    chains: \"polkadot.people, kusama.people, westend, westend.people\",\n    paths: [\"pallet_identity.types.Judgement\"],\n    type: \"Enum(Unknown, FeePaid, Reasonable, KnownGood, OutOfDate, LowQuality, Erroneous)\",\n  },\n  \"7vujittrav0br\": {\n    name: \"XcmVersionedAssets\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.VersionedAssets\"],\n    type: \"Enum(V2, V3, V4)\",\n  },\n  \"85ca14rjo42j5\": {\n    name: \"VotingConviction\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_conviction_voting.conviction.Conviction\"],\n    type: \"Enum(None, Locked1x, Locked2x, Locked3x, Locked4x, Locked5x, Locked6x)\",\n  },\n  \"87r8lmtt997st\": {\n    name: \"ArithmeticError\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_arithmetic.ArithmeticError\"],\n    type: \"Enum(Underflow, Overflow, DivisionByZero)\",\n  },\n  \"88qf3i6ugbvsp\": {\n    name: \"IndicesEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_indices.pallet.Event\"],\n    type: \"Enum(IndexAssigned, IndexFreed, IndexFrozen)\",\n  },\n  \"890aui9hh0f9q\": {\n    name: \"AssetRateEvent\",\n    chains: \"polkadot, polkadot.collectives, kusama, paseo\",\n    paths: [\"pallet_asset_rate.pallet.Event\"],\n    type: \"Enum(AssetRateCreated, AssetRateRemoved, AssetRateUpdated)\",\n  },\n  \"8b4gf7pjdvue3\": {\n    name: \"NominationPoolsPalletFreezeReason\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_nomination_pools.pallet.FreezeReason\"],\n    type: \"Enum(PoolMinBalance)\",\n  },\n  \"8c614g2bc4iej\": {\n    name: \"XcmV3Instruction\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.Instruction\"],\n    type: \"Enum(WithdrawAsset, ReserveAssetDeposited, ReceiveTeleportedAsset, QueryResponse, TransferAsset, TransferReserveAsset, Transact, HrmpNewChannelOpenRequest, HrmpChannelAccepted, HrmpChannelClosing, ClearOrigin, DescendOrigin, ReportError, DepositAsset, DepositReserveAsset, ExchangeAsset, InitiateReserveWithdraw, InitiateTeleport, ReportHolding, BuyExecution, RefundSurplus, SetErrorHandler, SetAppendix, ClearError, ClaimAsset, Trap, SubscribeVersion, UnsubscribeVersion, BurnAsset, ExpectAsset, ExpectOrigin, ExpectError, ExpectTransactStatus, QueryPallet, ExpectPallet, ReportTransactStatus, ClearTransactStatus, UniversalOrigin, ExportMessage, LockAsset, UnlockAsset, NoteUnlockable, RequestUnlock, SetFeesMode, SetTopic, ClearTopic, AliasOrigin, UnpaidExecution)\",\n  },\n  \"8eicfpc71dtp2\": {\n    name: \"BountiesBountyStatus\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"pallet_bounties.BountyStatus\"],\n    type: \"Enum(Proposed, Approved, Funded, CuratorProposed, Active, PendingPayout)\",\n  },\n  \"8fgf6e6g02u7k\": {\n    name: \"ChildBountyStatus\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"pallet_child_bounties.ChildBountyStatus\"],\n    type: \"Enum(Added, CuratorProposed, Active, PendingPayout)\",\n  },\n  \"8g50cqebfncn4\": {\n    name: \"NominationPoolsClaimPermission\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_nomination_pools.ClaimPermission\"],\n    type: \"Enum(Permissioned, PermissionlessCompound, PermissionlessWithdraw, PermissionlessAll)\",\n  },\n  \"8j0abm9jkapk2\": {\n    name: \"XcmV3TraitsError\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.traits.Error\"],\n    type: \"Enum(Overflow, Unimplemented, UntrustedReserveLocation, UntrustedTeleportLocation, LocationFull, LocationNotInvertible, BadOrigin, InvalidLocation, AssetNotFound, FailedToTransactAsset, NotWithdrawable, LocationCannotHold, ExceedsMaxMessageSize, DestinationUnsupported, Transport, Unroutable, UnknownClaim, FailedToDecode, MaxWeightInvalid, NotHoldingFees, TooExpensive, Trap, ExpectationFalse, PalletNotFound, NameMismatch, VersionIncompatible, HoldingWouldOverflow, ExportError, ReanchorFailed, NoDeal, FeesNotMet, LockError, NoPermission, Unanchored, NotDepositable, UnhandledXcmVersion, WeightLimitReached, Barrier, WeightNotComputable, ExceedsStackLimit)\",\n  },\n  \"8jjr2rgj6aa2v\": {\n    name: \"SlashingOffenceKind\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.slashing.SlashingOffenceKind\",\n      \"polkadot_primitives.v8.slashing.SlashingOffenceKind\",\n    ],\n    type: \"Enum(ForInvalid, AgainstValid)\",\n  },\n  \"8mdo9fqa201s6\": {\n    name: \"TreasuryPaymentState\",\n    chains:\n      \"polkadot, polkadot.collectives, kusama, paseo, westend, westend.collectives\",\n    paths: [\"pallet_treasury.PaymentState\"],\n    type: \"Enum(Pending, Attempted, Failed)\",\n  },\n  \"8slcnsmtfbubd\": {\n    name: \"ExtensionsCheckMortality\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_runtime.generic.era.Era\"],\n    type: \"Enum(Immortal, Mortal1, Mortal2, Mortal3, Mortal4, Mortal5, Mortal6, Mortal7, Mortal8, Mortal9, Mortal10, Mortal11, Mortal12, Mortal13, Mortal14, Mortal15, Mortal16, Mortal17, Mortal18, Mortal19, Mortal20, Mortal21, Mortal22, Mortal23, Mortal24, Mortal25, Mortal26, Mortal27, Mortal28, Mortal29, Mortal30, Mortal31, Mortal32, Mortal33, Mortal34, Mortal35, Mortal36, Mortal37, Mortal38, Mortal39, Mortal40, Mortal41, Mortal42, Mortal43, Mortal44, Mortal45, Mortal46, Mortal47, Mortal48, Mortal49, Mortal50, Mortal51, Mortal52, Mortal53, Mortal54, Mortal55, Mortal56, Mortal57, Mortal58, Mortal59, Mortal60, Mortal61, Mortal62, Mortal63, Mortal64, Mortal65, Mortal66, Mortal67, Mortal68, Mortal69, Mortal70, Mortal71, Mortal72, Mortal73, Mortal74, Mortal75, Mortal76, Mortal77, Mortal78, Mortal79, Mortal80, Mortal81, Mortal82, Mortal83, Mortal84, Mortal85, Mortal86, Mortal87, Mortal88, Mortal89, Mortal90, Mortal91, Mortal92, Mortal93, Mortal94, Mortal95, Mortal96, Mortal97, Mortal98, Mortal99, Mortal100, Mortal101, Mortal102, Mortal103, Mortal104, Mortal105, Mortal106, Mortal107, Mortal108, Mortal109, Mortal110, Mortal111, Mortal112, Mortal113, Mortal114, Mortal115, Mortal116, Mortal117, Mortal118, Mortal119, Mortal120, Mortal121, Mortal122, Mortal123, Mortal124, Mortal125, Mortal126, Mortal127, Mortal128, Mortal129, Mortal130, Mortal131, Mortal132, Mortal133, Mortal134, Mortal135, Mortal136, Mortal137, Mortal138, Mortal139, Mortal140, Mortal141, Mortal142, Mortal143, Mortal144, Mortal145, Mortal146, Mortal147, Mortal148, Mortal149, Mortal150, Mortal151, Mortal152, Mortal153, Mortal154, Mortal155, Mortal156, Mortal157, Mortal158, Mortal159, Mortal160, Mortal161, Mortal162, Mortal163, Mortal164, Mortal165, Mortal166, Mortal167, Mortal168, Mortal169, Mortal170, Mortal171, Mortal172, Mortal173, Mortal174, Mortal175, Mortal176, Mortal177, Mortal178, Mortal179, Mortal180, Mortal181, Mortal182, Mortal183, Mortal184, Mortal185, Mortal186, Mortal187, Mortal188, Mortal189, Mortal190, Mortal191, Mortal192, Mortal193, Mortal194, Mortal195, Mortal196, Mortal197, Mortal198, Mortal199, Mortal200, Mortal201, Mortal202, Mortal203, Mortal204, Mortal205, Mortal206, Mortal207, Mortal208, Mortal209, Mortal210, Mortal211, Mortal212, Mortal213, Mortal214, Mortal215, Mortal216, Mortal217, Mortal218, Mortal219, Mortal220, Mortal221, Mortal222, Mortal223, Mortal224, Mortal225, Mortal226, Mortal227, Mortal228, Mortal229, Mortal230, Mortal231, Mortal232, Mortal233, Mortal234, Mortal235, Mortal236, Mortal237, Mortal238, Mortal239, Mortal240, Mortal241, Mortal242, Mortal243, Mortal244, Mortal245, Mortal246, Mortal247, Mortal248, Mortal249, Mortal250, Mortal251, Mortal252, Mortal253, Mortal254, Mortal255)\",\n  },\n  \"8ur8bpe8ahbdb\": {\n    name: \"TransactionValidityError\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"sp_runtime.transaction_validity.TransactionValidityError\"],\n    type: \"Enum(Invalid, Unknown)\",\n  },\n  \"8vj9hqgjobpdo\": {\n    name: \"ParachainsDisputesEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.disputes.pallet.Event\"],\n    type: \"Enum(DisputeInitiated, DisputeConcluded, Revert)\",\n  },\n  \"90bksimft5ia2\": {\n    name: \"DispatchClass\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"frame_support.dispatch.DispatchClass\"],\n    type: \"Enum(Normal, Operational, Mandatory)\",\n  },\n  \"910lmkjcsvii\": {\n    name: \"PolkadotRuntimeCommonAssignedSlotsSlotLeasePeriodStart\",\n    chains: \"westend\",\n    paths: [\"polkadot_runtime_common.assigned_slots.SlotLeasePeriodStart\"],\n    type: \"Enum(Current, Next)\",\n  },\n  \"926pkc9itkbdk\": {\n    name: \"ReferendaTypesCurve\",\n    chains:\n      \"polkadot, polkadot.collectives, kusama, paseo, westend, westend.collectives\",\n    paths: [\"pallet_referenda.types.Curve\"],\n    type: \"Enum(LinearDecreasing, SteppedDecreasing, Reciprocal)\",\n  },\n  \"982q4n5eor6ih\": {\n    name: \"XcmV3JunctionNetworkId\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.junction.NetworkId\", \"staging_xcm.v4.junction.NetworkId\"],\n    type: \"Enum(ByGenesis, ByFork, Polkadot, Kusama, Westend, Rococo, Wococo, Ethereum, BitcoinCore, BitcoinCash, PolkadotBulletin)\",\n  },\n  \"9d6sev8uj006q\": {\n    name: \"XcmV3MultiassetAssetInstance\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\n      \"xcm.v3.multiasset.AssetInstance\",\n      \"staging_xcm.v4.asset.AssetInstance\",\n      \"staging_xcm.v5.asset.AssetInstance\",\n    ],\n    type: \"Enum(Undefined, Index, Array4, Array8, Array16, Array32)\",\n  },\n  \"9fihu1euvgfa\": {\n    name: \"PolkadotPrimitivesV6ExecutorParamsExecutorParam\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.executor_params.ExecutorParam\",\n      \"polkadot_primitives.v8.executor_params.ExecutorParam\",\n    ],\n    type: \"Enum(MaxMemoryPages, StackLogicalMax, StackNativeMax, PrecheckingMaxMemory, PvfPrepTimeout, PvfExecTimeout, WasmExtBulkMemory)\",\n  },\n  \"9jj84pbmaraa\": {\n    name: \"TransactionValidityInvalidTransaction\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"sp_runtime.transaction_validity.InvalidTransaction\"],\n    type: \"Enum(Call, Payment, Future, Stale, BadProof, AncientBirthBlock, ExhaustsResources, Custom, BadMandatory, MandatoryValidation, BadSigner)\",\n  },\n  \"9lvi13skegcil\": {\n    name: \"ClaimsStatementKind\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"polkadot_runtime_common.claims.StatementKind\"],\n    type: \"Enum(Regular, Saft)\",\n  },\n  \"9pobt6o24rqdc\": {\n    name: \"UpgradeRestriction\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\n      \"polkadot_primitives.v7.UpgradeRestriction\",\n      \"polkadot_primitives.v8.UpgradeRestriction\",\n    ],\n    type: \"Enum(Present)\",\n  },\n  \"9uqvk3mspevjn\": {\n    name: \"BabeDigestsPreDigest\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"sp_consensus_babe.digests.PreDigest\"],\n    type: \"Enum(Primary, SecondaryPlain, SecondaryVRF)\",\n  },\n  a2kllcmf9u10g: {\n    name: \"ParachainsDisputeLocation\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.disputes.DisputeLocation\"],\n    type: \"Enum(Local, Remote)\",\n  },\n  a3gvv195g4jot: {\n    name: \"DispatchRawOrigin\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"frame_support.dispatch.RawOrigin\"],\n    type: \"Enum(Root, Signed, None)\",\n  },\n  a4b928jbpau7j: {\n    name: \"RecoveryEvent\",\n    chains: \"kusama, westend\",\n    paths: [\"pallet_recovery.pallet.Event\"],\n    type: \"Enum(RecoveryCreated, RecoveryInitiated, RecoveryVouched, RecoveryClosed, AccountRecovered, RecoveryRemoved)\",\n  },\n  a5gvqckojmehj: {\n    name: \"ChildBountiesEvent\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"pallet_child_bounties.pallet.Event\"],\n    type: \"Enum(Added, Awarded, Claimed, Canceled)\",\n  },\n  adqdire0qjg0e: {\n    name: \"XcmV2WeightLimit\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.WeightLimit\"],\n    type: \"Enum(Unlimited, Limited)\",\n  },\n  ajkhn97prklo5: {\n    name: \"ConvictionVotingEvent\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"pallet_conviction_voting.pallet.Event\"],\n    type: \"Enum(Delegated, Undelegated)\",\n  },\n  amc6gl7bd9por: {\n    name: \"XcmV2TraitsError\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.traits.Error\"],\n    type: \"Enum(Overflow, Unimplemented, UntrustedReserveLocation, UntrustedTeleportLocation, MultiLocationFull, MultiLocationNotInvertible, BadOrigin, InvalidLocation, AssetNotFound, FailedToTransactAsset, NotWithdrawable, LocationCannotHold, ExceedsMaxMessageSize, DestinationUnsupported, Transport, Unroutable, UnknownClaim, FailedToDecode, MaxWeightInvalid, NotHoldingFees, TooExpensive, Trap, UnhandledXcmVersion, WeightLimitReached, Barrier, WeightNotComputable)\",\n  },\n  andndh150vhd7: {\n    name: \"XcmV4Instruction\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v4.Instruction\"],\n    type: \"Enum(WithdrawAsset, ReserveAssetDeposited, ReceiveTeleportedAsset, QueryResponse, TransferAsset, TransferReserveAsset, Transact, HrmpNewChannelOpenRequest, HrmpChannelAccepted, HrmpChannelClosing, ClearOrigin, DescendOrigin, ReportError, DepositAsset, DepositReserveAsset, ExchangeAsset, InitiateReserveWithdraw, InitiateTeleport, ReportHolding, BuyExecution, RefundSurplus, SetErrorHandler, SetAppendix, ClearError, ClaimAsset, Trap, SubscribeVersion, UnsubscribeVersion, BurnAsset, ExpectAsset, ExpectOrigin, ExpectError, ExpectTransactStatus, QueryPallet, ExpectPallet, ReportTransactStatus, ClearTransactStatus, UniversalOrigin, ExportMessage, LockAsset, UnlockAsset, NoteUnlockable, RequestUnlock, SetFeesMode, SetTopic, ClearTopic, AliasOrigin, UnpaidExecution)\",\n  },\n  ap9sokavcmq5o: {\n    name: \"XcmVersionedLocation\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.VersionedLocation\"],\n    type: \"Enum(V2, V3, V4)\",\n  },\n  aquvu9nu2es05: {\n    name: \"XcmV2MultilocationJunctions\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.multilocation.Junctions\"],\n    type: \"Enum(Here, X1, X2, X3, X4, X5, X6, X7, X8)\",\n  },\n  au5bveb13r5dm: {\n    name: \"XcmV5AssetFilter\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v5.asset.AssetFilter\"],\n    type: \"Enum(Definite, Wild)\",\n  },\n  avhrl5td7rf4q: {\n    name: \"TransactionValidityUnknownTransaction\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_runtime.transaction_validity.UnknownTransaction\"],\n    type: \"Enum(CannotLookup, NoUnsignedValidator, Custom)\",\n  },\n  b1eprmg9d9eh2: {\n    name: \"CommonAuctionsEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_common.auctions.pallet.Event\"],\n    type: \"Enum(AuctionStarted, AuctionClosed, Reserved, Unreserved, ReserveConfiscated, BidAccepted, WinningOffset)\",\n  },\n  b5fd0r2ju9g0l: {\n    name: \"CoreState\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"polkadot_primitives.v7.CoreState\"],\n    type: \"Enum(Occupied, Scheduled, Free)\",\n  },\n  bb454pgf9ofrq: {\n    name: \"StakingPalletConfigOp\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"pallet_staking.pallet.pallet.ConfigOp\",\n      \"pallet_nomination_pools.ConfigOp\",\n    ],\n    type: \"Enum(Noop, Set, Remove)\",\n  },\n  bd6859lkk2107: {\n    name: \"XcmV3JunctionBodyId\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.junction.BodyId\"],\n    type: \"Enum(Unit, Moniker, Index, Executive, Technical, Legislative, Judicial, Defense, Administration, Treasury)\",\n  },\n  bgr9ooktct68l: {\n    name: \"BalancesTypesReasons\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"pallet_balances.types.Reasons\"],\n    type: \"Enum(Fee, Misc, All)\",\n  },\n  biemf2h6nh9pa: {\n    name: \"XcmV4AssetAssetFilter\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v4.asset.AssetFilter\"],\n    type: \"Enum(Definite, Wild)\",\n  },\n  bkbo8vqdq5g5a: {\n    name: \"MultiSignature\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_runtime.MultiSignature\"],\n    type: \"Enum(Ed25519, Sr25519, Ecdsa)\",\n  },\n  bl1lrline4to8: {\n    name: \"Phase\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"frame_system.Phase\"],\n    type: \"Enum(ApplyExtrinsic, Finalization, Initialization)\",\n  },\n  bnmfm52c5n7nq: {\n    name: \"XcmV4TraitsOutcome\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"staging_xcm.v4.traits.Outcome\"],\n    type: \"Enum(Complete, Incomplete, Error)\",\n  },\n  bnvffgg4ckmsj: {\n    name: \"PolkadotRuntimeOriginCaller\",\n    chains: \"polkadot, paseo\",\n    paths: [\"polkadot_runtime.OriginCaller\", \"paseo_runtime.OriginCaller\"],\n    type: \"Enum(system, Origins, ParachainsOrigin, XcmPallet, Void)\",\n  },\n  brvqfk00lp42n: {\n    name: \"GrandpaEquivocation\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"sp_consensus_grandpa.Equivocation\"],\n    type: \"Enum(Prevote, Precommit)\",\n  },\n  bs10onqorvq4b: {\n    name: \"StakingForcing\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_staking.Forcing\"],\n    type: \"Enum(NotForcing, ForceNew, ForceNone, ForceAlways)\",\n  },\n  bs56nuk6pe5bp: {\n    name: \"PolkadotPrimitivesV6DisputeStatement\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.DisputeStatement\",\n      \"polkadot_primitives.v8.DisputeStatement\",\n    ],\n    type: \"Enum(Valid, Invalid)\",\n  },\n  bs795i39p1rsf: {\n    name: \"XcmV5Instruction\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v5.Instruction\"],\n    type: \"Enum(WithdrawAsset, ReserveAssetDeposited, ReceiveTeleportedAsset, QueryResponse, TransferAsset, TransferReserveAsset, Transact, HrmpNewChannelOpenRequest, HrmpChannelAccepted, HrmpChannelClosing, ClearOrigin, DescendOrigin, ReportError, DepositAsset, DepositReserveAsset, ExchangeAsset, InitiateReserveWithdraw, InitiateTeleport, ReportHolding, BuyExecution, RefundSurplus, SetErrorHandler, SetAppendix, ClearError, ClaimAsset, Trap, SubscribeVersion, UnsubscribeVersion, BurnAsset, ExpectAsset, ExpectOrigin, ExpectError, ExpectTransactStatus, QueryPallet, ExpectPallet, ReportTransactStatus, ClearTransactStatus, UniversalOrigin, ExportMessage, LockAsset, UnlockAsset, NoteUnlockable, RequestUnlock, SetFeesMode, SetTopic, ClearTopic, AliasOrigin, UnpaidExecution, PayFees, InitiateTransfer, ExecuteWithOrigin, SetHints)\",\n  },\n  bta4mfoh73fpt: {\n    name: \"PolkadotPrimitivesV6ValidDisputeStatementKind\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.ValidDisputeStatementKind\",\n      \"polkadot_primitives.v8.ValidDisputeStatementKind\",\n    ],\n    type: \"Enum(Explicit, BackingSeconded, BackingValid, ApprovalChecking, ApprovalCheckingMultipleCandidates)\",\n  },\n  c0rsdcbsdt7kf: {\n    name: \"GovernanceOrigin\",\n    chains: \"polkadot, paseo\",\n    paths: [\n      \"polkadot_runtime.governance.origins.pallet_custom_origins.Origin\",\n      \"paseo_runtime.governance.origins.pallet_custom_origins.Origin\",\n    ],\n    type: \"Enum(StakingAdmin, Treasurer, FellowshipAdmin, GeneralAdmin, AuctionAdmin, LeaseAdmin, ReferendumCanceller, ReferendumKiller, SmallTipper, BigTipper, SmallSpender, MediumSpender, BigSpender, WhitelistedCaller, WishForChange)\",\n  },\n  c1jnealhlqk0n: {\n    name: \"WestendRuntimeRuntimeFreezeReason\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_runtime.RuntimeFreezeReason\",\n      \"staging_kusama_runtime.RuntimeFreezeReason\",\n      \"paseo_runtime.RuntimeFreezeReason\",\n      \"westend_runtime.RuntimeFreezeReason\",\n    ],\n    type: \"Enum(NominationPools)\",\n  },\n  c4alvt16n58rg: {\n    name: \"ParachainsHrmpEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.hrmp.pallet.Event\"],\n    type: \"Enum(OpenChannelRequested, OpenChannelCanceled, OpenChannelAccepted, ChannelClosed, HrmpChannelForceOpened, HrmpSystemChannelOpened, OpenChannelDepositsUpdated)\",\n  },\n  c5529239bmt3g: {\n    name: \"ElectionProviderMultiPhaseEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_election_provider_multi_phase.pallet.Event\"],\n    type: \"Enum(SolutionStored, ElectionFinalized, ElectionFailed, Rewarded, Slashed, PhaseTransitioned)\",\n  },\n  c7d5cscq9c6gi: {\n    name: \"PolkadotPrimitivesV6PvfPrepKind\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.PvfPrepKind\",\n      \"polkadot_primitives.v8.PvfPrepKind\",\n    ],\n    type: \"Enum(Precheck, Prepare)\",\n  },\n  cb4i7efmuhik2: {\n    name: \"ParachainsParasEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.paras.pallet.Event\"],\n    type: \"Enum(CurrentCodeUpdated, CurrentHeadUpdated, CodeUpgradeScheduled, NewHeadNoted, ActionQueued, PvfCheckStarted, PvfCheckAccepted, PvfCheckRejected)\",\n  },\n  cc0rvpoin8ucr: {\n    name: \"VersionedLocatableAsset\",\n    chains: \"polkadot, polkadot.collectives, kusama, paseo\",\n    paths: [\"polkadot_runtime_common.impls.VersionedLocatableAsset\"],\n    type: \"Enum(V3, V4)\",\n  },\n  cee77qkk3c81t: {\n    name: \"ConvictionVotingVoteAccountVote\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_conviction_voting.vote.AccountVote\"],\n    type: \"Enum(Standard, Split, SplitAbstain)\",\n  },\n  cg1p3hrtv6n5f: {\n    name: \"XcmV2MultiassetWildFungibility\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\n      \"xcm.v2.multiasset.WildFungibility\",\n      \"xcm.v3.multiasset.WildFungibility\",\n      \"staging_xcm.v4.asset.WildFungibility\",\n      \"staging_xcm.v5.asset.WildFungibility\",\n    ],\n    type: \"Enum(Fungible, NonFungible)\",\n  },\n  cg9t1ptkdnbi3: {\n    name: \"GrandpaEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_grandpa.pallet.Event\"],\n    type: \"Enum(NewAuthorities, Paused, Resumed)\",\n  },\n  cgde8bg5ldqpa: {\n    name: \"PreimagesBounded\",\n    chains:\n      \"polkadot, polkadot.collectives, kusama, paseo, westend, westend.collectives\",\n    paths: [\"frame_support.traits.preimages.Bounded\"],\n    type: \"Enum(Legacy, Inline, Lookup)\",\n  },\n  cgoc620vdl0ci: {\n    name: \"BrokerCoretimeInterfaceCoreAssignment\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_broker.coretime_interface.CoreAssignment\"],\n    type: \"Enum(Idle, Pool, Task)\",\n  },\n  chgaqm88qcdbe: {\n    name: \"XcmVersionedLocation\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.VersionedLocation\"],\n    type: \"Enum(V3, V4, V5)\",\n    priority: 1,\n  },\n  cjonl4a47pcm8: {\n    name: \"TransactionPaymentEvent\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"pallet_transaction_payment.pallet.Event\"],\n    type: \"Enum(TransactionFeePaid)\",\n  },\n  clvofdpge58e1: {\n    name: \"XcmVersionedAsset\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.VersionedAsset\"],\n    type: \"Enum(V3, V4, V5)\",\n    priority: 1,\n  },\n  cn24k411b4s6t: {\n    name: \"PolkadotRuntimeCommonAssignedSlotsEvent\",\n    chains: \"westend\",\n    paths: [\"polkadot_runtime_common.assigned_slots.pallet.Event\"],\n    type: \"Enum(PermanentSlotAssigned, TemporarySlotAssigned, MaxPermanentSlotsChanged, MaxTemporarySlotsChanged)\",\n  },\n  cpkfkhj5jq924: {\n    name: \"TransactionValidityTransactionSource\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_runtime.transaction_validity.TransactionSource\"],\n    type: \"Enum(InBlock, Local, External)\",\n  },\n  csmfdagrgtkj5: {\n    name: \"XcmV4Response\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v4.Response\"],\n    type: \"Enum(Null, Assets, ExecutionResult, Version, PalletsInfo, DispatchResult)\",\n  },\n  cuaiiptinb4jf: {\n    name: \"Version\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.collectives, kusama, kusama.assetHub, paseo, paseo.assetHub, westend, westend.collectives\",\n    paths: [\"pallet_vesting.Releases\", \"pallet_alliance.types.Version\"],\n    type: \"Enum(V0, V1)\",\n  },\n  d226b5du5oie9: {\n    name: \"VestingEvent\",\n    chains:\n      \"polkadot, polkadot.assetHub, kusama, kusama.assetHub, paseo, paseo.assetHub, westend\",\n    paths: [\"pallet_vesting.pallet.Event\"],\n    type: \"Enum(VestingUpdated, VestingCompleted)\",\n  },\n  d2d2vjc8h66mf: {\n    name: \"XcmV3MultiassetFungibility\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\n      \"xcm.v3.multiasset.Fungibility\",\n      \"staging_xcm.v4.asset.Fungibility\",\n      \"staging_xcm.v5.asset.Fungibility\",\n    ],\n    type: \"Enum(Fungible, NonFungible)\",\n  },\n  d7em8997pfm92: {\n    name: \"MultiSigner\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"sp_runtime.MultiSigner\"],\n    type: \"Enum(Ed25519, Sr25519, Ecdsa)\",\n  },\n  d7hag4aqiaqqv: {\n    name: \"PolkadotRuntimeParachainsSchedulerPalletCoreOccupied\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"polkadot_runtime_parachains.scheduler.pallet.CoreOccupied\"],\n    type: \"Enum(Free, Paras)\",\n  },\n  dp2d78gpqj4r6: {\n    name: \"ParachainsInclusionEvent\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"polkadot_runtime_parachains.inclusion.pallet.Event\"],\n    type: \"Enum(CandidateBacked, CandidateIncluded, CandidateTimedOut, UpwardMessagesReceived)\",\n  },\n  e252kk4p31sv6: {\n    name: \"XcmV4AssetWildAsset\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v4.asset.WildAsset\"],\n    type: \"Enum(All, AllOf, AllCounted, AllOfCounted)\",\n  },\n  e3otks9vj8a3b: {\n    name: \"TraitsScheduleDispatchTime\",\n    chains:\n      \"polkadot, polkadot.collectives, kusama, paseo, westend, westend.assetHub, westend.collectives\",\n    paths: [\"frame_support.traits.schedule.DispatchTime\"],\n    type: \"Enum(At, After)\",\n  },\n  e5ojv0odma80: {\n    name: \"ConvictionVotingVoteVoting\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_conviction_voting.vote.Voting\"],\n    type: \"Enum(Casting, Delegating)\",\n  },\n  ei6k1tdcht3q: {\n    name: \"BountiesEvent\",\n    chains: \"polkadot, kusama, paseo\",\n    paths: [\"pallet_bounties.pallet.Event\"],\n    type: \"Enum(BountyProposed, BountyRejected, BountyBecameActive, BountyAwarded, BountyClaimed, BountyCanceled, BountyExtended, BountyApproved, CuratorProposed, CuratorUnassigned, CuratorAccepted)\",\n  },\n  ek17d55ubjjm9: {\n    name: \"BabeDigestsNextConfigDescriptor\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"sp_consensus_babe.digests.NextConfigDescriptor\"],\n    type: \"Enum(V1)\",\n  },\n  es1oivk962n6f: {\n    name: \"XcmV2MultiassetAssetId\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.multiasset.AssetId\"],\n    type: \"Enum(Concrete, Abstract)\",\n  },\n  eu5nmcltehl17: {\n    name: \"XcmV5WildAsset\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v5.asset.WildAsset\"],\n    type: \"Enum(All, AllOf, AllCounted, AllOfCounted)\",\n  },\n  f331um1stp6g0: {\n    name: \"UpgradeGoAhead\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\n      \"polkadot_primitives.v7.UpgradeGoAhead\",\n      \"polkadot_primitives.v8.UpgradeGoAhead\",\n    ],\n    type: \"Enum(Abort, GoAhead)\",\n  },\n  f5frjbmqcgt5k: {\n    name: \"XcmV2JunctionBodyPart\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.junction.BodyPart\", \"xcm.v2.BodyPart\"],\n    type: \"Enum(Voice, Members, Fraction, AtLeastProportion, MoreThanProportion)\",\n  },\n  f6qqn0nd8o1nf: {\n    name: \"PolkadotRuntimeParachainsSchedulerCommonAssignment\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_parachains.scheduler.common.Assignment\"],\n    type: \"Enum(Pool, Bulk)\",\n  },\n  f87qnbuqe30lh: {\n    name: \"TransactionalError\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"sp_runtime.TransactionalError\"],\n    type: \"Enum(LimitReached, NoLayer)\",\n  },\n  f9rpgkuafvsb4: {\n    name: \"InvalidDisputeStatementKind\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.InvalidDisputeStatementKind\",\n      \"polkadot_primitives.v8.InvalidDisputeStatementKind\",\n    ],\n    type: \"Enum(Explicit)\",\n  },\n  faafmcb1jmm2o: {\n    name: \"XcmV3Junctions\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.junctions.Junctions\", \"staging_xcm.v4.junctions.Junctions\"],\n    type: \"Enum(Here, X1, X2, X3, X4, X5, X6, X7, X8)\",\n  },\n  fbiij71gdkvth: {\n    name: \"WestendRuntimeProxyType\",\n    chains: \"westend\",\n    paths: [\"westend_runtime.ProxyType\"],\n    type: \"Enum(Any, NonTransfer, Governance, Staking, SudoBalances, IdentityJudgement, CancelProxy, Auction, NominationPools)\",\n  },\n  fcqan2gt5adqc: {\n    name: \"TransactionPaymentReleases\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"pallet_transaction_payment.Releases\"],\n    type: \"Enum(V1Ancient, V2)\",\n  },\n  fdctp8g6s725t: {\n    name: \"CommonSlotsEvent\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"polkadot_runtime_common.slots.pallet.Event\"],\n    type: \"Enum(NewLeasePeriod, Leased)\",\n  },\n  fddrr93rdab23: {\n    name: \"XcmV2MultiAssetFilter\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.multiasset.MultiAssetFilter\"],\n    type: \"Enum(Definite, Wild)\",\n  },\n  fedog0bf6e64f: {\n    name: \"XcmVersionedAssets\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.VersionedAssets\"],\n    type: \"Enum(V3, V4, V5)\",\n    priority: 1,\n  },\n  fms5l9j358vie: {\n    name: \"StakingPalletConfigOpBig\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"pallet_staking.pallet.pallet.ConfigOp\",\n      \"pallet_nomination_pools.ConfigOp\",\n    ],\n    type: \"Enum(Noop, Set, Remove)\",\n  },\n  fou8ip7o6q00t: {\n    name: \"XcmVersionedAssetId\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.VersionedAssetId\"],\n    type: \"Enum(V3, V4)\",\n  },\n  fqkhvelo2q77o: {\n    name: \"ValidityAttestation\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\n      \"polkadot_primitives.v7.ValidityAttestation\",\n      \"polkadot_primitives.v8.ValidityAttestation\",\n    ],\n    type: \"Enum(Implicit, Explicit)\",\n  },\n  hpogi4p6q6h5: {\n    name: \"PreimagePalletHoldReason\",\n    chains:\n      \"polkadot, polkadot.collectives, kusama, paseo, westend, westend.collectives\",\n    paths: [\"pallet_preimage.pallet.HoldReason\"],\n    type: \"Enum(Preimage)\",\n  },\n  htopdh9noje5: {\n    name: \"ElectionProviderMultiPhaseElectionCompute\",\n    chains: \"polkadot, kusama, paseo, westend\",\n    paths: [\"pallet_election_provider_multi_phase.ElectionCompute\"],\n    type: \"Enum(OnChain, Signed, Unsigned, Fallback, Emergency)\",\n  },\n  m2dj93rjj6ks: {\n    name: \"XcmVersionedXcm\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.VersionedXcm\"],\n    type: \"Enum(V2, V3, V4)\",\n  },\n  ml0q5vk4ei4e: {\n    name: \"XcmV2Instruction\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub\",\n    paths: [\"xcm.v2.Instruction\"],\n    type: \"Enum(WithdrawAsset, ReserveAssetDeposited, ReceiveTeleportedAsset, QueryResponse, TransferAsset, TransferReserveAsset, Transact, HrmpNewChannelOpenRequest, HrmpChannelAccepted, HrmpChannelClosing, ClearOrigin, DescendOrigin, ReportError, DepositAsset, DepositReserveAsset, ExchangeAsset, InitiateReserveWithdraw, InitiateTeleport, QueryHolding, BuyExecution, RefundSurplus, SetErrorHandler, SetAppendix, ClearError, ClaimAsset, Trap, SubscribeVersion, UnsubscribeVersion)\",\n  },\n  ndkvtfs34lhc: {\n    name: \"XcmV5Junction\",\n    chains:\n      \"westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"staging_xcm.v5.junction.Junction\"],\n    type: \"Enum(Parachain, AccountId32, AccountIndex64, AccountKey20, PalletInstance, GeneralIndex, GeneralKey, OnlyChild, Plurality, GlobalConsensus)\",\n  },\n  tofo38uukr3h: {\n    name: \"RootTestingEvent\",\n    chains: \"westend\",\n    paths: [\"pallet_root_testing.pallet.Event\"],\n    type: \"Enum(DefensiveTestCall)\",\n  },\n  ukot04uppvug: {\n    name: \"XcmV3MultiassetMultiAssetFilter\",\n    chains:\n      \"polkadot, polkadot.assetHub, polkadot.bridgeHub, polkadot.collectives, polkadot.people, kusama, kusama.assetHub, kusama.bridgeHub, kusama.people, paseo, paseo.assetHub, westend, westend.assetHub, westend.bridgeHub, westend.collectives, westend.people\",\n    paths: [\"xcm.v3.multiasset.MultiAssetFilter\"],\n    type: \"Enum(Definite, Wild)\",\n  },\n}\n\nexport const knownTypes: KnownTypes = mapObject(\n  knownTypesRepository,\n  (entry: RepositoryEntry) =>\n    typeof entry === \"string\"\n      ? { name: entry, priority: 0 }\n      : { name: entry.name, priority: entry.priority ?? 0 },\n)\n","import type { V14, V15 } from \"@polkadot-api/substrate-bindings\"\nimport { getUsedTypes } from \"./get-used-types\"\nimport {\n  getChecksumBuilder,\n  getLookupFn,\n} from \"@polkadot-api/metadata-builders\"\n\nexport function applyWhitelist(\n  metadata: V14 | V15,\n  whitelist: string[] | null,\n): V14 | V15 {\n  if (!whitelist) return metadata\n\n  const allApis = whitelist.includes(\"api.*\")\n  const fullApiRegex = /^api\\.(\\w+)\\.\\*$/\n  const fullApiIncluded = whitelist\n    .map((w) => fullApiRegex.exec(w)?.[1])\n    .filter((v) => !!v)\n  const apis = allApis\n    ? metadata.apis\n    : metadata.apis\n        .map((api) => {\n          if (fullApiIncluded.includes(api.name)) return api\n\n          return {\n            ...api,\n            methods: api.methods.filter((method) =>\n              whitelist.includes(`api.${api.name}.${method.name}`),\n            ),\n          }\n        })\n        .filter((api) => api.methods.length > 0)\n\n  const fullPalletRegex = /^\\*\\.(\\w+)$/\n  const fullPallets = whitelist\n    .map((w) => fullPalletRegex.exec(w)?.[1])\n    .filter((v) => !!v)\n\n  const filterEnum = (\n    whitelistPrefix: string,\n    palletName: string,\n    lookupIdx: number | undefined,\n  ) => {\n    if (!lookupIdx) return lookupIdx\n    if (\n      whitelist.includes(`${whitelistPrefix}.*`) ||\n      whitelist.includes(`${whitelistPrefix}.${palletName}.*`)\n    )\n      return lookupIdx\n\n    const def = metadata.lookup[lookupIdx].def\n    if (def.tag !== \"variant\") throw new Error(whitelistPrefix + \" not an enum\")\n\n    const prefixNotIncluded = whitelist.every(\n      (e) => !e.startsWith(`${whitelistPrefix}.${palletName}`),\n    )\n\n    const value = prefixNotIncluded\n      ? []\n      : def.value.filter(({ name }) =>\n          whitelist.includes(`${whitelistPrefix}.${palletName}.${name}`),\n        )\n\n    const idx = metadata.lookup.length\n    metadata.lookup.push({\n      ...metadata.lookup[lookupIdx],\n      id: idx,\n      def: {\n        tag: \"variant\",\n        value,\n      },\n    })\n    return idx\n  }\n  const getEnumLength = (lookupIdx: number | undefined) => {\n    if (!lookupIdx) return 0\n    const def = metadata.lookup[lookupIdx].def\n    if (def.tag !== \"variant\") throw new Error(\"not an enum\")\n    return def.value.length\n  }\n\n  const filterList = <T extends { name: string }>(\n    whitelistPrefix: string,\n    palletName: string,\n    list: Array<T>,\n  ) => {\n    if (\n      whitelist.includes(`${whitelistPrefix}.*`) ||\n      whitelist.includes(`${whitelistPrefix}.${palletName}.*`)\n    )\n      return list\n\n    const prefixNotIncluded = whitelist.every(\n      (e) => !e.startsWith(`${whitelistPrefix}.${palletName}`),\n    )\n    if (prefixNotIncluded) return []\n\n    return list.filter(({ name }) =>\n      whitelist.includes(`${whitelistPrefix}.${palletName}.${name}`),\n    )\n  }\n\n  const filterPallets = <T extends V14 | V15>(\n    pallets: T[\"pallets\"],\n    filterErrors: boolean,\n  ): T[\"pallets\"] =>\n    pallets\n      .map((pallet) => {\n        if (fullPallets.includes(pallet.name)) return pallet\n\n        return {\n          ...pallet,\n          calls: filterEnum(\"tx\", pallet.name, pallet.calls),\n          constants: filterList(\"const\", pallet.name, pallet.constants),\n          errors: filterErrors ? undefined : pallet.errors,\n          events: filterEnum(\"event\", pallet.name, pallet.events),\n          storage: pallet.storage\n            ? {\n                ...pallet.storage,\n                items: filterList(\"query\", pallet.name, pallet.storage.items),\n              }\n            : undefined,\n        }\n      })\n      .filter(\n        (pallet) =>\n          getEnumLength(pallet.calls) +\n          pallet.constants.length +\n          getEnumLength(pallet.errors) +\n          getEnumLength(pallet.events) +\n          (pallet.storage?.items.length ?? 0),\n      )\n\n  const pallets = filterPallets(metadata.pallets, false)\n\n  const visitedIdxs: number[] = []\n  const lookup = getLookupFn({ ...metadata, apis, pallets })\n  getUsedTypes(lookup, getChecksumBuilder(lookup)).checksums.forEach((_, idx) =>\n    visitedIdxs.push(idx),\n  )\n  let hasModuleError = false\n  for (const idx of visitedIdxs) {\n    const visited = lookup(idx)\n    // the only type we add byteLength is the decoded module error\n    if (visited.type === \"enum\" && visited.byteLength != null) {\n      hasModuleError = true\n      break\n    }\n  }\n\n  return {\n    ...metadata,\n    apis,\n    pallets: hasModuleError ? pallets : filterPallets(pallets, true),\n  }\n}\n","import {\n  getChecksumBuilder,\n  getLookupFn,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  EntryPoint,\n  mapEntryPointReferences,\n  mapReferences,\n  TypedefNode,\n} from \"@polkadot-api/metadata-compatibility\"\nimport type { HexString, V14, V15 } from \"@polkadot-api/substrate-bindings\"\nimport { mapObject } from \"@polkadot-api/utils\"\nimport {\n  capitalize,\n  DescriptorValues,\n  generateDescriptors,\n} from \"./generate-descriptors\"\nimport { generateTypes } from \"./generate-types\"\nimport { getUsedTypes } from \"./get-used-types\"\nimport { knownTypes, type KnownTypes } from \"./known-types\"\nimport { defaultDeclarations, getTypesBuilder, Variable } from \"./types-builder\"\nimport { applyWhitelist } from \"./whitelist\"\n\nexport const generateMultipleDescriptors = (\n  chains: Array<{\n    key: string\n    metadata: V14 | V15\n    knownTypes: KnownTypes\n    genesis?: HexString\n  }>,\n  paths: {\n    client: string\n    metadataTypes: string\n    types: string\n    descriptorValues: string\n  },\n  options: {\n    whitelist?: string[]\n  } = {},\n) => {\n  const chainData = chains.map((chain) => {\n    const metadata = options.whitelist\n      ? applyWhitelist(chain.metadata, options.whitelist)\n      : chain.metadata\n    const lookup = getLookupFn(metadata)\n    const builder = getChecksumBuilder(lookup)\n    const { checksums, types, entryPoints } = getUsedTypes(lookup, builder)\n    return {\n      ...chain,\n      lookup,\n      builder,\n      checksums,\n      types,\n      entryPoints,\n      knownTypes: {\n        ...knownTypes,\n        ...chain.knownTypes,\n      },\n    }\n  })\n  resolveConflicts(chainData)\n  const types = mergeTypes(chainData)\n\n  const declarations = defaultDeclarations()\n  const chainFiles = chainData.map((chain) =>\n    generateDescriptors(\n      chain.lookup,\n      types.checksumToIdx,\n      getTypesBuilder(\n        declarations,\n        chain.lookup,\n        chain.knownTypes,\n        chain.builder,\n      ),\n      chain.builder,\n      chain.key,\n      paths,\n      chain.genesis,\n    ),\n  )\n\n  const descriptorsFileContent = generateDescriptorValuesContent(\n    Object.fromEntries(\n      chainFiles.map((file, i) => [chainData[i].key, file.descriptorValues]),\n    ),\n  )\n\n  return {\n    descriptorsFileContent,\n    metadataTypes: types,\n    descriptorTypesFiles: chainFiles.map((file) => ({\n      content: file.descriptorTypes,\n      exports: file.exports,\n    })),\n    typesFileContent: generateTypes(declarations, paths),\n    publicTypes: getPublicTypes(declarations.variables),\n  }\n}\n\nfunction getPublicTypes(variables: Map<string, Variable>) {\n  return Array.from(variables.values())\n    .filter((variable) => variable.type.startsWith(\"Enum<\"))\n    .map((variable) => variable.name)\n}\n\nfunction resolveConflicts(\n  chainData: Array<{\n    key: string\n    checksums: string[]\n    knownTypes: KnownTypes\n  }>,\n) {\n  // Name => chain => checksum\n  const usedNames = new Map<string, Map<string, Set<string>>>()\n\n  chainData.forEach((chain) =>\n    chain.checksums.forEach((checksum) => {\n      const known = chain.knownTypes[checksum]\n      if (!known) return\n      const { name } = known\n      if (!usedNames.has(name)) {\n        usedNames.set(name, new Map())\n      }\n      if (!usedNames.get(name)!.has(chain.key)) {\n        usedNames.get(name)!.set(chain.key, new Set())\n      }\n      usedNames.get(name)!.get(chain.key)!.add(checksum)\n    }),\n  )\n\n  const conflictedNames = Array.from(usedNames.entries())\n    .filter(([_, chainToChecksums]) => {\n      const checksums = new Set(\n        Array.from(chainToChecksums.values()).flatMap((v) => [...v]),\n      )\n      if (checksums.size === 1) return false\n      const allAreTheSame = Array.from(chainToChecksums.values()).every(\n        (chainChecksums) => chainChecksums.size === checksums.size,\n      )\n      if (allAreTheSame) return false\n      return true\n    })\n    .map(([name]) => name)\n\n  conflictedNames.forEach((name) => {\n    const nameChecksums = Array.from(\n      new Set(\n        Array.from(usedNames.get(name)?.values() ?? []).flatMap((v) =>\n          Array.from(v),\n        ),\n      ),\n    )\n\n    const checksumMaxPriority = nameChecksums.map((checksum) => ({\n      checksum,\n      priority: chainData\n        .map((chain) => chain.knownTypes[checksum]?.priority ?? 0)\n        .reduce((a, b) => Math.max(a, b), 0),\n    }))\n    const absoluteMax = checksumMaxPriority\n      .map((v) => v.priority)\n      .reduce((a, b) => Math.max(a, b), 0)\n    const checksumsLowPriority = checksumMaxPriority.filter(\n      (v) => v.priority !== absoluteMax,\n    )\n\n    const checksumsChangingName =\n      checksumsLowPriority.length === checksumMaxPriority.length - 1\n        ? checksumsLowPriority\n        : checksumMaxPriority\n\n    chainData.forEach((chain) =>\n      checksumsChangingName.forEach(({ checksum }) => {\n        if (!chain.knownTypes[checksum]) return\n        chain.knownTypes[checksum] = {\n          name: capitalize(chain.key) + name,\n          priority: chain.knownTypes[checksum].priority,\n        }\n      }),\n    )\n  })\n}\n\nfunction mergeTypes(\n  chainData: Array<{\n    types: Map<string, TypedefNode>\n    entryPoints: Map<string, EntryPoint>\n    checksums: string[]\n  }>,\n) {\n  const typedefs: Array<[TypedefNode, string[]]> = []\n  const entryPoints: Array<[EntryPoint, string[]]> = []\n  const loookupToTypedefIdx: Map<string, number> = new Map()\n  const checksumToIdx: Map<string, number> = new Map()\n\n  chainData.forEach(({ types, entryPoints: chainEntryPoints, checksums }) => {\n    for (const entry of types.entries()) {\n      const [checksum, value] = entry\n      if (loookupToTypedefIdx.has(checksum)) continue\n      loookupToTypedefIdx.set(checksum, typedefs.length)\n      typedefs.push([value, checksums])\n    }\n    for (const entry of chainEntryPoints.entries()) {\n      const [checksum, value] = entry\n      if (checksumToIdx.has(checksum)) continue\n      checksumToIdx.set(checksum, entryPoints.length)\n      entryPoints.push([value, checksums])\n    }\n  })\n\n  // Update indices to the new one\n  const updatedTypedefs = typedefs.map(([typedef, checksums]) =>\n    mapReferences(typedef, (id) => loookupToTypedefIdx.get(checksums[id])!),\n  )\n  const updatedEntryPoints = entryPoints.map(([entryPoint, checksums]) =>\n    mapEntryPointReferences(\n      entryPoint,\n      (id) => loookupToTypedefIdx.get(checksums[id])!,\n    ),\n  )\n\n  return {\n    typedefs: updatedTypedefs,\n    entryPoints: updatedEntryPoints,\n    checksumToIdx,\n  }\n}\n\nfunction generateDescriptorValuesContent(\n  descriptorValues: Record<string, DescriptorValues>,\n) {\n  const usages: Record<string, number> = {}\n  const countUsages = (obj: Record<string, any>): void =>\n    Object.entries(obj).forEach(([key, value]) => {\n      usages[key] = usages[key] ?? 0\n      usages[key]++\n      if (typeof value === \"object\") countUsages(value)\n    })\n  countUsages(descriptorValues)\n\n  const tokens: Array<string> = []\n  const tokenToIdx: Record<string, number> = {}\n  const minifyKeys = <T extends Record<string | number, any>>(obj: T): T =>\n    Object.fromEntries(\n      Object.entries(obj).map(([key, value]) => {\n        const newValue = typeof value === \"number\" ? value : minifyKeys(value)\n        if (usages[key] <= 1) return [key, newValue]\n        if (!(key in tokenToIdx)) {\n          tokenToIdx[key] = tokens.length\n          tokens.push(key)\n        }\n        return [tokenToIdx[key], newValue]\n      }),\n    ) as T\n  const minified = mapObject(descriptorValues, minifyKeys)\n\n  const getTreeKey = (tree: Record<string, unknown>): string =>\n    Object.entries(tree)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(\n        ([key, value]) =>\n          `[${key}:${typeof value === \"object\" ? getTreeKey(value as any) : value}]`,\n      )\n      .join(\"\")\n\n  type Transformed = Record<string, number | Record<string, number>>\n  /**\n   * Modifies in-place, changes type to Transformed.\n   */\n  const findCommonTrees = (\n    values: Array<Record<string, Record<string, unknown>>>,\n  ) => {\n    const treeUsages: Record<string, number> = {}\n    const keys = values.map((obj) =>\n      mapObject(obj, (tree) => {\n        const key = getTreeKey(tree)\n        treeUsages[key] = treeUsages[key] ?? 0\n        treeUsages[key]++\n        return key\n      }),\n    )\n\n    const commonTrees: Array<Record<string, unknown>> = []\n    const keyToCommonTree: Record<string, number> = {}\n    values.forEach((obj, i) =>\n      Object.entries(obj).forEach(([objKey, tree]) => {\n        const key = keys[i][objKey]\n        if (treeUsages[key] > 1) {\n          if (!(key in keyToCommonTree)) {\n            keyToCommonTree[key] = commonTrees.length\n            commonTrees.push(tree)\n          }\n          ;(obj as Transformed)[objKey] = keyToCommonTree[key]\n        }\n      }),\n    )\n\n    return commonTrees\n  }\n\n  const commonTrees = findCommonTrees(\n    Object.keys(Object.values(minified)[0]).flatMap((type) =>\n      Object.values(minified).map((d) => d[type as keyof DescriptorValues]),\n    ),\n  )\n\n  const data = JSON.stringify([minified, commonTrees, tokens])\n\n  return `\n    const [minified, commonTrees, tokens] = JSON.parse(\\`${data}\\`);\n\n    const replaceTokens = <T>(obj: Record<string | number, T>): Record<string, T> =>\n      Object.fromEntries(\n        Object.entries(obj).map(([key, value]) => {\n          const unwrappedValue =\n            typeof value === \"object\" ? replaceTokens(value as any) : value\n          const numericKey = Number(key)\n          if (Number.isNaN(numericKey)) {\n            return [key, unwrappedValue]\n          }\n          return [tokens[numericKey], unwrappedValue]\n        }),\n      ) as Record<string, T>\n    const tokenizedCommonTrees = commonTrees.map(replaceTokens)\n\n    const unwrap = (\n      obj: Record<string, object | number>,\n      depth: number,\n    ): Record<string, object> =>\n      depth === 0\n        ? (obj as Record<string, object>)\n        : Object.fromEntries(\n            Object.entries(obj).map(([key, value]) => [\n              key,\n              unwrap(\n                typeof value === \"object\" ? value : tokenizedCommonTrees[value],\n                depth - 1,\n              ),\n            ]),\n          )\n\n    const getChainDescriptors = (key: string) =>\n      unwrap(replaceTokens(minified[key]), 2)\n\n    ${Object.keys(descriptorValues)\n      .map(\n        (key) =>\n          `export const ${capitalize(key)} = getChainDescriptors(\"${key}\")`,\n      )\n      .join(\"\\n\")}\n  `\n}\n","import { V14, V15 } from \"@polkadot-api/substrate-bindings\"\n\nimport {\n  getChecksumBuilder,\n  getLookupFn,\n} from \"@polkadot-api/metadata-builders\"\nimport { getDocsTypesBuilder } from \"@/types-builder\"\nimport { knownTypes } from \"./known-types\"\n\nexport type FileTree = {\n  [key: string]: string | FileTree\n}\n\nconst paths = {\n  client: \"polkadot-api\",\n  types: \"types\",\n}\n\nexport async function generateDocsDescriptors(\n  key: string,\n  metadata: V14 | V15,\n): Promise<FileTree> {\n  const lookup = getLookupFn(metadata)\n  const checksumBuilder = getChecksumBuilder(lookup)\n  const docsTypesBuilder = getDocsTypesBuilder(\n    lookup,\n    knownTypes,\n    checksumBuilder,\n  )\n\n  const getClientImports = () => [\n    \"StorageDescriptor\",\n    \"PlainDescriptor\",\n    \"TxDescriptor\",\n    \"RuntimeDescriptor\",\n    \"Enum\",\n    \"_Enum\",\n    \"Binary\",\n    \"FixedSizeBinary\",\n    \"FixedSizeArray\",\n    \"QueryFromPalletsDef\",\n    \"TxFromPalletsDef\",\n    \"EventsFromPalletsDef\",\n    \"ErrorsFromPalletsDef\",\n    \"ConstFromPalletsDef\",\n    \"SS58String\",\n    \"ResultPayload\",\n    \"TxCallData\",\n    ...docsTypesBuilder.getClientFileImports(),\n  ]\n\n  const storageOutput = await buildStorage(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n\n  const runtimeCallsOutput = await buildRuntimeCalls(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const errorsOutput = await buildErrors(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const constantsOutput = await buildConstants(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const eventsOutput = await buildEvents(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n  const callsOutput = await buildCalls(\n    metadata,\n    docsTypesBuilder,\n    getClientImports,\n  )\n\n  const descriptorsTypesFileContent =\n    `import {\\n  ${getClientImports().join(\",\\n  \")}\\n} from \"${paths.client}\";\\n` +\n    docsTypesBuilder\n      .getDescriptorsTypes()\n      .map((variable) => {\n        return `export type ${variable.name} = ${variable.type};`\n      })\n      .join(\"\\n\") +\n    `\n/**\n * This is a special type that we're using only in this docs.\n * It's not present in descriptors generated by polkadot-api, and only used for \n * marking circular types, if they aren't a known type.  \n */\nexport type __Circular = any;\n`\n\n  const index = getIndexFileDocs({ chainName: key })\n\n  return {\n    index,\n    types: descriptorsTypesFileContent,\n    Storage: storageOutput,\n    RuntimeCalls: runtimeCallsOutput,\n    Errors: errorsOutput,\n    Constants: constantsOutput,\n    Events: eventsOutput,\n    Transactions: callsOutput,\n  }\n}\n\nconst buildEnumObj = <T>(\n  metadata: V14 | V15,\n  val: number | undefined,\n  cb: (name: string, docs: string[]) => T,\n): Record<string, T> => {\n  if (val === undefined) return {}\n\n  const lookup = metadata.lookup[val]\n  if (lookup.def.tag !== \"variant\") throw null\n  return Object.fromEntries(\n    lookup.def.value.map((x) => {\n      return [x.name!, cb(x.name, x.docs)]\n    }),\n  )\n}\n\nasync function buildErrors(\n  metadata: V14 | V15,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const errors = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: buildEnumObj(metadata, pallet.errors, (name, docs) => {\n            return {\n              type: `PlainDescriptor<${docsTypesBuilder.buildError(\n                pallet.name,\n                name,\n              )}>`,\n              docs,\n            }\n          }),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(errors, getClientImports)\n}\n\nasync function buildConstants(\n  metadata: V14 | V15,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const constants: FolderFileInput = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: Object.fromEntries(\n            pallet.constants?.map(({ name, docs }) => {\n              const type = `PlainDescriptor<${docsTypesBuilder.buildConstant(\n                pallet.name,\n                name,\n              )}>`\n              return [\n                name,\n                {\n                  type,\n                  docs,\n                },\n              ]\n            }) ?? [],\n          ),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(constants, getClientImports)\n}\n\nasync function buildEvents(\n  metadata: V14 | V15,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const events: FolderFileInput = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: buildEnumObj(metadata, pallet.events, (name, docs) => {\n            return {\n              type: `PlainDescriptor<${docsTypesBuilder.buildEvent(\n                pallet.name,\n                name,\n              )}>`,\n              docs,\n            }\n          }),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(events, getClientImports)\n}\n\nasync function buildCalls(\n  metadata: V14 | V15,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const calls: FolderFileInput = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: buildEnumObj(metadata, pallet.calls, (name, docs) => {\n            return {\n              type: `TxDescriptor<${docsTypesBuilder.buildCall(\n                pallet.name,\n                name,\n              )}>`,\n              docs,\n            }\n          }),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(calls, getClientImports)\n}\n\nasync function buildRuntimeCalls(\n  metadata: V14 | V15,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const runtimeCalls = Object.fromEntries(\n    metadata.apis.map((api) => [\n      api.name,\n      {\n        docs: api.docs,\n        values: Object.fromEntries(\n          api.methods.map((method) => {\n            const { args, value } = docsTypesBuilder.buildRuntimeCall(\n              api.name,\n              method.name,\n            )\n            return [\n              method.name,\n              {\n                type: `RuntimeDescriptor<${args}, ${value}>`,\n                docs: method.docs,\n              },\n            ]\n          }),\n        ),\n        descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n      },\n    ]),\n  )\n  return buildTypeFolder(runtimeCalls, getClientImports)\n}\n\nasync function buildStorage(\n  metadata: V14 | V15,\n  docsTypesBuilder: ReturnType<typeof getDocsTypesBuilder>,\n  getClientImports: () => string[],\n): Promise<FileTree> {\n  const storage: FolderFileInput = Object.fromEntries(\n    metadata.pallets.map((pallet) => {\n      return [\n        pallet.name,\n        {\n          docs: pallet.docs,\n          values: Object.fromEntries(\n            pallet.storage?.items.map((item) => {\n              const { name, docs, modifier } = item\n\n              if (pallet.name === \"System\" && name === \"Events\") {\n                return [\n                  \"Events\",\n                  {\n                    type: `StorageDescriptor<[], any, ${!modifier}, \"never\">`,\n                    docs: [\n                      ...docs,\n                      \"\",\n                      \" Due to readability reasons, return type of Events item is omitted in this documentation\",\n                    ],\n                  },\n                ]\n              }\n\n              const { args, payload, opaque } = docsTypesBuilder.buildStorage(\n                pallet.name,\n                name,\n              )\n              return [\n                name,\n                {\n                  type: `StorageDescriptor<${args}, ${payload}, ${!modifier}, ${opaque}>`,\n                  docs,\n                },\n              ]\n            }) ?? [],\n          ),\n          descriptorsTypesImports: docsTypesBuilder.recordTypeFileImports(),\n        },\n      ]\n    }),\n  )\n\n  return buildTypeFolder(storage, getClientImports)\n}\n\ntype FolderFileInput = {\n  [p: string]: {\n    docs: string[]\n    descriptorsTypesImports: string[]\n    values: { [p: string]: { type: string; docs: string[] } }\n  }\n}\n\nfunction buildTypeFolder(\n  input: FolderFileInput,\n  getClientImports: () => string[],\n): { [p: string]: string } {\n  const output: { [p: string]: string } = {}\n\n  output[\"index\"] = \"\"\n\n  for (const [\n    section,\n    { docs, values, descriptorsTypesImports },\n  ] of Object.entries(input)) {\n    if (Object.keys(values).length === 0) continue\n\n    const sectionDocs =\n      docs.length > 0\n        ? `\n/**\n${docs.map((doc: string) => ` *${doc}`).join(\"\\n\")}\n * @packageDocumentation\n */\\n\\n\n`\n        : \"\"\n\n    const imports = `\nimport {\\n  ${getClientImports().join(\",\\n  \")}\\n} from \"${paths.client}\";\\n\nimport {\\n  ${descriptorsTypesImports.join(\",\\n  \")}\\n} from \"../${paths.types}\";\n  `\n\n    output[section] =\n      sectionDocs +\n      imports +\n      Object.entries(values)\n        .map(\n          ([typeName, typeDef]) =>\n            formatDocs(typeDef.docs) +\n            // splitting type declaration and export allows us to curcumvent potential\n            // collisions between imports and type names\n            `\ntype ${section}_${typeName} = ${typeDef.type};\nexport {${section}_${typeName} as ${typeName}};`,\n        )\n        .join(\"\\n\")\n\n    output[\"index\"] += `export * as ${section} from \"./${section}\";\\n`\n  }\n\n  return output\n}\n\nfunction formatDocs(docs: string[]): string {\n  return `/**\n${docs.map((doc: string) => ` *${doc}`).join(\"\\n\")}\n*/\n`\n}\n\nfunction getIndexFileDocs({ chainName }: { chainName: string }): string {\n  return `\n/**\n * This is generated documentation for TypedAPI decriptors for **${chainName}** chain  \n * \n * **TypedApi calls** section describes apis that are available via calls like  \n * \\`\\`\\`ts\n * api.tx.XcmPallet.limited_teleport_assets({...})\n * \\`\\`\\`\n * Where \\`api\\` is returned by \\`client.getTypedApi(${chainName})\\` call  \n *\n * Each section has APIs grouped by pallet name  \n * \n * **Types** represent TypeScript types that are to be imported\n * from \\`@polkadot-api/descriptors\\`:  \n * \\`\\`\\`ts\n * import { XcmVersionedLocation, XcmV3Junctions } from \"@polkadot-api/descriptors\"\n * \\`\\`\\`\n * \n * @see [papi.how](https://papi.how/) for generic documentation on \\`polkadot-api\\`\n * \n * @packageDocumentation\n */\n\n/**\n * Storage queries reference\n * \n * Each item described here is a\n *\\`StorageDescriptor<Args, ReturnType, Optional, Opaque>\\`  \n * For example, \\`System.Account\\` is of type\n * \\`\\`\\`ts\n * Account: StorageDescriptor<[Key: SS58String], {\n *     consumers: number;\n *     data: {\n *         flags: bigint;\n *         free: bigint;\n *         frozen: bigint;\n *         reserved: bigint;\n *     };\n *     nonce: number;\n *     providers: number;\n *     sufficients: number;\n * }, false, \"never\">\n * \\`\\`\\`\n * and can be queried via\n * \\`\\`\\`ts\n * const account = await api.query.System.Account.getValue(\"<AccountId>\")\n * console.log(account.data.free)\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/queries) on storage queries for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as Storage from \"./Storage\";\n\n/**\n * Constants reference\n * \n * Each item described here is a \\`PlainDescriptor<T>\\`  \n * \n * For example, \\`System.Version\\` is of type\n * \\`\\`\\`ts\n * Version: PlainDescriptor<{\n *     apis: [FixedSizeBinary<8>, number][];\n *     authoring_version: number;\n *     impl_name: string;\n *     impl_version: number;\n *     spec_name: string;\n *     spec_version: number;\n *     state_version: number;\n *     transaction_version: number;\n * }>\n * \\`\\`\\`\n * and can be queried via\n * \\`\\`\\`ts\n * const version = await typedApi.constants.System.Version()\n * console.log(version.spec_version)\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/constants) on constants for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as Constants from \"./Constants\";\n\n/**\n * Errors\n * \n * This section is temporarily commented out, \n * as errors aren't documented in papi yet\n * https://github.com/polkadot-api/polkadot-api-docs/issues/25 \n * \n * @namespace\n * @category Types\n */\n// export * as Errors from \"./Errors\";\n\n/**\n * Transactions reference\n * \n * Each item described here is a \\`TxDescriptor<T>\\`, where \\`T\\` describes\n * all the arguments required by the extrinsic\n * \n * For example, \\`Balances.transfer_keep_alive\\` is of type\n * \\`\\`\\`ts\n * transfer_keep_alive: TxDescriptor<{\n *     dest: MultiAddress;\n *     value: bigint;\n * }>\n * \\`\\`\\`\n * and can be used like this\n * \\`\\`\\`ts\n * const tx = api.tx.Balances.transfer_keep_alive({\n *   dest: MultiAddress.Id(userAddress),\n *   value: 10n ** 10n, // 1 DOT\n * })\n * await tx.signAndSubmit(signer)\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/tx) on transactions for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as Transactions from \"./Transactions\";\n\n/**\n * Events\n * \n * Each item described here is a \\`PlainDescriptor<T>\\`  \n * \n * For example, \\`System.NewAccount\\` is of type\n * \\`\\`\\`ts\n * NewAccount: PlainDescriptor<{ \"account\": SS58String }>;\n * \\`\\`\\`\n * and can be queried via\n * \\`\\`\\`ts\n * const newAccountEvents = await api.event.System.NewAccount.pull()\n * newAccountEvents.forEach(newAccount => {\n *  const address: SS58String = newAccount.payload.account\n *  console.log(address)\n * })\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/events) on events for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as Events from \"./Events\";\n\n/**\n * Runtime calls\n * \n * Each item described here is a \\`RuntimeDescriptor<Args, ReturnType>\\`\n * \n * For example, \\`Metadata.metadata_at_version\\` is of type\n * \\`\\`\\`ts\n * metadata_at_version: RuntimeDescriptor<[version: number], Binary | undefined>\n * \\`\\`\\`\n * and can be called like this:\n * \\`\\`\\`ts\n *  const metadata = await api.apis.Metadata.metadata_at_version(15)\n *  console.log(metadata?.asHex())\n * })\n * \\`\\`\\`\n * \n * @see [PAPI docs](https://papi.how/typed/apis) on runtime APIs for more\n * \n * @namespace\n * @category TypedApi calls\n */\nexport * as RuntimeCalls from \"./RuntimeCalls\";\n\n/**\n * Descriptors types\n * \n * These are the types used in API calls and imported out of descriptors  \n * \n * For example, \\`XcmVersionedLocation\\` is an enum:\n * \\`\\`\\`ts\n * XcmVersionedLocation: Enum<{\n *     V2: { ... };\n *     V3: {\n *         interior: XcmV3Junctions;\n *         parents: number;\n *     };\n *     V4: { ... };\n * }>\n * \\`\\`\\`\n * and can be used like this\n * \\`\\`\\`ts\n * import { XcmVersionedLocation, XcmV3Junctions } from \"@polkadot-api/descriptors\"\n * await typedApi.tx.XcmPallet.limited_teleport_assets({\n      dest: XcmVersionedLocation.V3({\n        parents: 0,\n        interior: XcmV3Junctions.X1(XcmV3Junction.Parachain(parachain_id)),\n      }),\n * \\`\\`\\`\n * \n * @namespace\n * @category Types\n */\nexport * as Types from \"./types\";\n  `\n}\n","import { isPrimitive, LookupTypeNode, TypeNode } from \"./type-representation\"\n\n/**\n * Given a list of starting points, returns those nodes that are being shared by\n * multiple paths.\n *\n * This can be used to avoid generating intermediate types which are being used\n * from just one single point.\n *\n * `exclude` is a set of ids to stop exploring. E.g. known types.\n * It might be a good idea to also have the excluded types as part of the entry\n * points.\n *\n * It might return types in the `start` or `exclude` set if those are being\n * referenced from more than one path.\n */\nexport function getReusedNodes(\n  start: (TypeNode | LookupTypeNode)[],\n  exclude: Set<number>,\n) {\n  const reused = new Set<number>()\n  const visited = new Set<number>()\n  let heads = [...start]\n\n  while (heads.length) {\n    const head = heads.pop()!\n    if (\"id\" in head) {\n      if (visited.has(head.id)) {\n        reused.add(head.id)\n        continue\n      }\n      visited.add(head.id)\n      if (exclude.has(head.id)) {\n        continue\n      }\n    }\n\n    heads = [...heads, ...getEdges(head)]\n  }\n\n  return reused\n}\n\nconst unique = <T>(arr: T[]) => [...new Set(arr)]\n\nfunction getEdges(node: TypeNode): LookupTypeNode[] {\n  const lookupEdge = (node: TypeNode | LookupTypeNode): LookupTypeNode[] =>\n    \"id\" in node ? [node] : getEdges(node)\n\n  if (isPrimitive(node)) return []\n\n  switch (node.type) {\n    case \"array\":\n      return lookupEdge(node.value.value)\n    case \"enum\":\n      // enum entries can be undefined => []\n      // enum entries can be lookupEntries => [lookupEntry]\n      // enum entries can be inline array/structs/etc => getEdges(_)\n      return unique(\n        node.value.flatMap((v) => (v.value ? lookupEdge(v.value) : [])),\n      )\n    case \"option\":\n      return lookupEdge(node.value)\n    case \"result\":\n      return [node.value.ok, node.value.ko]\n    case \"struct\":\n    case \"tuple\":\n      return unique(node.value.flatMap((v) => lookupEdge(v.value)))\n    case \"union\":\n      return unique(node.value.flatMap(lookupEdge))\n  }\n}\n","import {\n  InkMetadataLookup,\n  MessageParamSpec,\n  TypeSpec,\n} from \"@polkadot-api/ink-contracts\"\nimport {\n  EnumVariant,\n  getInternalTypesBuilder,\n  isPrimitive,\n  LookupTypeNode,\n  StructField,\n  TypeNode,\n} from \"./internal-types\"\nimport { getReusedNodes } from \"./internal-types/reused-nodes\"\nimport {\n  CodegenOutput,\n  generateTypescript,\n  mergeImports,\n  nativeNodeCodegen,\n  processPapiPrimitives,\n} from \"./internal-types/generate-typescript\"\nimport { anonymizeImports, anonymizeType } from \"./anonymize\"\n\nexport function generateInkTypes(lookup: InkMetadataLookup) {\n  const internalBuilder = getInternalTypesBuilder(lookup)\n\n  const buildCallable = (callable: {\n    args: Array<MessageParamSpec>\n    returnType: TypeSpec\n  }) => {\n    const call: TypeNode = {\n      type: \"struct\",\n      value: callable.args.map((param) => ({\n        label: param.label,\n        value: internalBuilder(param.type.type),\n        docs: [],\n      })),\n    }\n\n    return {\n      call,\n      value: internalBuilder(callable.returnType.type),\n    }\n  }\n  const constructors = lookup.metadata.spec.constructors.map((ct) => ({\n    ...ct,\n    types: buildCallable(ct),\n  }))\n  const messages = lookup.metadata.spec.messages.map((ct) => ({\n    ...ct,\n    types: buildCallable(ct),\n  }))\n\n  const event: TypeNode = {\n    type: \"enum\",\n    value: lookup.metadata.spec.events.map(\n      (evt): EnumVariant => ({\n        label: evt.label,\n        value: {\n          type: \"struct\",\n          value: evt.args.map(\n            (arg): StructField => ({\n              label: arg.label,\n              value: internalBuilder(arg.type.type),\n              docs: arg.docs,\n            }),\n          ),\n        },\n        docs: evt.docs,\n      }),\n    ),\n  }\n\n  const storageRoots = Object.entries(lookup.storage).map(([name, value]) => ({\n    name,\n    key: value.key !== null ? internalBuilder(value.key) : null,\n    value: internalBuilder(value.typeId),\n  }))\n  const storageRoot: TypeNode = {\n    type: \"struct\",\n    value: storageRoots.map(({ name, key, value }) => ({\n      docs: [],\n      label: name,\n      value: {\n        type: \"struct\",\n        value: [\n          {\n            docs: [],\n            label: \"key\",\n            value: key ?? { type: \"primitive\", value: \"undefined\" },\n          },\n          {\n            docs: [],\n            label: \"value\",\n            value,\n          },\n        ],\n      },\n    })),\n  }\n\n  const entryPoints: TypeNode[] = [\n    storageRoot,\n    ...constructors.flatMap((v) => [v.types.call, v.types.value]),\n    ...messages.flatMap((v) => [v.types.call, v.types.value]),\n  ]\n  const rootNodes = getReusedNodes(entryPoints, new Set())\n\n  const assignedNames: Record<number, string> = {}\n  let nextAnonymousId = 0\n  const getName = (id: number) => {\n    if (!assignedNames[id]) {\n      assignedNames[id] = `T${nextAnonymousId++}`\n    }\n    return assignedNames[id]\n  }\n\n  // Exclude primitive types from rootNodes\n  const filteredRootNodes = Array.from(rootNodes).filter(\n    (id) => !isPrimitive(internalBuilder(id)),\n  )\n\n  const types: Record<number, CodegenOutput & { name?: string }> = {}\n  const generateNodeType = (node: TypeNode | LookupTypeNode): CodegenOutput => {\n    const anonymize = (name: string) => `Anonymize<${name}>`\n\n    const result = generateTypescript(node, (node, next): CodegenOutput => {\n      if (!(\"id\" in node) || isPrimitive(node)) {\n        return (\n          processPapiPrimitives(node, next, true) ??\n          nativeNodeCodegen(node, next)\n        )\n      }\n      if (types[node.id]) {\n        const cached = types[node.id]\n        return cached.name\n          ? {\n              code: anonymize(cached.name),\n              imports: {\n                types: new Set([cached.name]),\n              },\n            }\n          : cached\n      }\n\n      const assignedName =\n        (assignedNames[node.id] as any as null) ??\n        (filteredRootNodes.includes(node.id) ? getName(node.id) : null)\n      if (assignedName) {\n        // Preassign the type to allow recursion\n        types[node.id] = {\n          code: \"\",\n          imports: {},\n          name: assignedName,\n        }\n      }\n\n      const result =\n        processPapiPrimitives(node, next, true) ?? nativeNodeCodegen(node, next)\n      if (assignedName) {\n        types[node.id].code = result.code\n        types[node.id].imports = result.imports\n        return {\n          code: anonymize(assignedName),\n          imports: {\n            types: new Set([assignedName]),\n          },\n        }\n      }\n      types[node.id] = result\n      return types[node.id]\n    })\n\n    if (\"id\" in node && types[node.id]?.name) {\n      const name = types[node.id].name!\n      return {\n        code: anonymize(name),\n        imports: {\n          types: new Set([name]),\n        },\n      }\n    }\n    return result\n  }\n\n  const createCallableDescriptor = (\n    callables: Array<{\n      label: string\n      docs: string[]\n      types: ReturnType<typeof buildCallable>\n    }>,\n  ) =>\n    generateNodeType({\n      type: \"struct\",\n      value: callables.map(\n        (callable): StructField => ({\n          label: callable.label,\n          value: {\n            type: \"struct\",\n            value: [\n              {\n                label: \"message\",\n                value: callable.types.call,\n                docs: [],\n              },\n              {\n                label: \"response\",\n                value: callable.types.value,\n                docs: [],\n              },\n            ],\n          },\n          docs: callable.docs,\n        }),\n      ),\n    })\n  const constructorsDescriptor = createCallableDescriptor(constructors)\n  const messagesDescriptor = createCallableDescriptor(messages)\n  const eventDescriptor = generateNodeType(event)\n  const storageTypes = generateNodeType(storageRoot)\n\n  const namedTypes = Object.entries(assignedNames)\n    .filter(([id]) => types[Number(id)])\n    .map(([id, value]) => `type ${value} = ${types[Number(id)].code};`)\n    .join(\"\\n\")\n\n  const clientImports = Array.from(\n    mergeImports([\n      storageTypes.imports,\n      messagesDescriptor.imports,\n      constructorsDescriptor.imports,\n      eventDescriptor.imports,\n      ...Object.values(types).map((v) => v.imports),\n      {\n        client: new Set(anonymizeImports),\n      },\n    ]).client,\n  )\n\n  const result = `\n    import type { ${clientImports.join(\", \")} } from 'polkadot-api';\n    import type { InkDescriptors } from 'polkadot-api/ink';\n\n    ${anonymizeType}\n\n    ${namedTypes}\n\n    type StorageDescriptor = ${storageTypes.code};\n    type MessagesDescriptor = ${messagesDescriptor.code};\n    type ConstructorsDescriptor = ${constructorsDescriptor.code};\n    type EventDescriptor = ${eventDescriptor.code};\n\n    export const descriptor: InkDescriptors<StorageDescriptor, MessagesDescriptor, ConstructorsDescriptor, EventDescriptor> = { metadata: ${JSON.stringify(lookup.metadata)} } as any;\n  `\n\n  return result\n}\n"],"names":["value","node","level","result","getChecksumBuilder","mapObject","key","filterObject","mapLookupToTypedef","mapEntryPointReferences","enumValueEntryPointNode","voidEntryPointNode","storageEntryPoint","singleValueEntryPoint","runtimeCallEntryPoint","pallets","getLookupFn","types","mapReferences","commonTrees"],"mappings":"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"}