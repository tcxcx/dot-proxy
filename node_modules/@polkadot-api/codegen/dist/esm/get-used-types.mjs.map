{"version":3,"file":"get-used-types.mjs","sources":["../../src/get-used-types.ts"],"sourcesContent":["import {\n  getChecksumBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  EntryPoint,\n  TypedefNode,\n  mapLookupToTypedef,\n  runtimeCallEntryPoint,\n  storageEntryPoint,\n  enumValueEntryPointNode,\n  singleValueEntryPoint,\n  voidEntryPointNode,\n  mapEntryPointReferences,\n} from \"@polkadot-api/metadata-compatibility\"\n\n/**\n * This function extracts from `metadata` all the types used from any entry\n * point (pallets and runtime APIs)\n * pruning and de-duplicating repeated types.\n *\n * It returns a map of `checksum => TypedefNode` for compatibility checking and\n * an array of checksums to map the dependencies of those `TypdefNode` (which\n * are expressed as indices) to the next checksum.\n * (Which will be needed when merging types from multiple chains)\n */\nexport const getUsedTypes = (\n  lookup: MetadataLookup,\n  builder: ReturnType<typeof getChecksumBuilder>,\n) => {\n  const checksums: string[] = new Array(lookup.metadata.lookup.length)\n  const visited = new Set<string>()\n  const types = new Map<string, TypedefNode>()\n  const entryPoints = new Map<string, EntryPoint>()\n\n  const addTypeFromLookup = (id: number | undefined) => {\n    if (id == null) return\n    const checksum = builder.buildDefinition(id)\n    if (!checksum) {\n      throw new Error(\"Unreachable: checksum not available for lookup type\")\n    }\n    checksums[id] = checksum\n    // We can't use `types` directly, because mapLookupToTypedef can recursively call this function.\n    if (visited.has(checksum)) return\n    visited.add(checksum)\n    types.set(checksum, mapLookupToTypedef(lookup(id), addTypeFromLookup))\n  }\n  const addTypeFromEntryPoint = (checksum: string, entry: EntryPoint) => {\n    entryPoints.set(checksum, entry)\n    mapEntryPointReferences(entry, (id) => {\n      addTypeFromLookup(id)\n      return id\n    })\n  }\n\n  const buildEnum = (\n    side: \"args\" | \"values\",\n    val: number | undefined,\n    cb: (name: string) => string,\n  ) => {\n    if (val === undefined) return\n    const entry = lookup(val)\n\n    if (entry.type === \"void\") return\n    if (entry.type !== \"enum\") throw new Error(\"Expected enum\")\n\n    Object.entries(entry.value).forEach(([name, value]) => {\n      const checksum = cb(name)\n      const node = enumValueEntryPointNode(value)\n      addTypeFromEntryPoint(checksum, {\n        args: side === \"args\" ? node : voidEntryPointNode,\n        values: side === \"args\" ? voidEntryPointNode : node,\n      })\n    })\n  }\n\n  lookup.metadata.pallets.forEach((pallet) => {\n    pallet.storage?.items.forEach((entry) => {\n      const checksum = builder.buildStorage(pallet.name, entry.name)!\n      addTypeFromEntryPoint(checksum, storageEntryPoint(entry))\n    })\n    pallet.constants.forEach(({ name, type }) => {\n      const checksum = builder.buildConstant(pallet.name, name)!\n      addTypeFromEntryPoint(checksum, singleValueEntryPoint(type))\n    })\n    buildEnum(\n      \"args\",\n      pallet.calls,\n      (name) => builder.buildCall(pallet.name, name)!,\n    )\n    buildEnum(\n      \"values\",\n      pallet.events,\n      (name) => builder.buildEvent(pallet.name, name)!,\n    )\n    buildEnum(\n      \"values\",\n      pallet.errors,\n      (name) => builder.buildError(pallet.name, name)!,\n    )\n  })\n\n  lookup.metadata.apis.forEach((api) =>\n    api.methods.forEach((method) => {\n      const checksum = builder.buildRuntimeCall(api.name, method.name)!\n      addTypeFromEntryPoint(checksum, runtimeCallEntryPoint(method))\n    }),\n  )\n\n  return { types, entryPoints, checksums }\n}\n"],"names":[],"mappings":"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"}