import { getChecksumBuilder } from '@polkadot-api/metadata-builders';
import { getTypesBuilder, defaultDeclarations } from './types-builder.mjs';

const getNewTypes = (lookup, knownTypes, getTypeName) => {
  const { metadata } = lookup;
  const checksumBuilder = getChecksumBuilder(lookup);
  let declarations = defaultDeclarations();
  let typesBuilder = getTypesBuilder(
    declarations,
    lookup,
    knownTypes,
    checksumBuilder
  );
  let ignoredIds = new Set(
    "outerEnums" in metadata ? [
      metadata.outerEnums.call,
      metadata.outerEnums.error,
      metadata.outerEnums.event
    ] : []
  );
  ("outerEnums" in metadata ? [metadata.outerEnums.call, metadata.outerEnums.event] : []).map(lookup).forEach((entry) => {
    if (entry.type !== "enum") throw null;
    Object.values(entry.value).forEach((inner) => {
      if (inner.type === "void") return;
      ignoredIds.add(Object.values(inner.value)[0].id);
    });
  });
  const wannabes = {};
  const nameToChecksum = /* @__PURE__ */ new Map();
  metadata.lookup.forEach((x) => {
    const result = checksumBuilder.buildDefinition(x.id);
    typesBuilder.buildDefinition(x.id);
    const variable = declarations.variables.get(result);
    if (!variable || !variable.type.startsWith("AnonymousEnum<") || variable.checksum in wannabes)
      return;
    const typeName = getTypeName(x);
    if (!typeName) return;
    let finalTypeName = typeName;
    for (let i = 1; nameToChecksum.has(finalTypeName); i++)
      finalTypeName = typeName + i;
    wannabes[variable.checksum] = { name: finalTypeName, priority: 0 };
    nameToChecksum.set(finalTypeName, {
      checksum: variable.checksum,
      path: x.path
    });
  });
  declarations = defaultDeclarations();
  typesBuilder = getTypesBuilder(
    declarations,
    lookup,
    wannabes,
    checksumBuilder
  );
  metadata.lookup.forEach(({ id }) => {
    typesBuilder.buildDefinition(id);
  });
  return Object.fromEntries(
    [...nameToChecksum].map(([name, { checksum, path }]) => {
      return [
        checksum,
        {
          name,
          checksum,
          type: declarations.variables.get(checksum).type,
          path
        }
      ];
    })
  );
};

export { getNewTypes };
//# sourceMappingURL=get-new-types.mjs.map
