{"version":3,"file":"whitelist.mjs","sources":["../../src/whitelist.ts"],"sourcesContent":["import type { V14, V15 } from \"@polkadot-api/substrate-bindings\"\nimport { getUsedTypes } from \"./get-used-types\"\nimport {\n  getChecksumBuilder,\n  getLookupFn,\n} from \"@polkadot-api/metadata-builders\"\n\nexport function applyWhitelist(\n  metadata: V14 | V15,\n  whitelist: string[] | null,\n): V14 | V15 {\n  if (!whitelist) return metadata\n\n  const allApis = whitelist.includes(\"api.*\")\n  const fullApiRegex = /^api\\.(\\w+)\\.\\*$/\n  const fullApiIncluded = whitelist\n    .map((w) => fullApiRegex.exec(w)?.[1])\n    .filter((v) => !!v)\n  const apis = allApis\n    ? metadata.apis\n    : metadata.apis\n        .map((api) => {\n          if (fullApiIncluded.includes(api.name)) return api\n\n          return {\n            ...api,\n            methods: api.methods.filter((method) =>\n              whitelist.includes(`api.${api.name}.${method.name}`),\n            ),\n          }\n        })\n        .filter((api) => api.methods.length > 0)\n\n  const fullPalletRegex = /^\\*\\.(\\w+)$/\n  const fullPallets = whitelist\n    .map((w) => fullPalletRegex.exec(w)?.[1])\n    .filter((v) => !!v)\n\n  const filterEnum = (\n    whitelistPrefix: string,\n    palletName: string,\n    lookupIdx: number | undefined,\n  ) => {\n    if (!lookupIdx) return lookupIdx\n    if (\n      whitelist.includes(`${whitelistPrefix}.*`) ||\n      whitelist.includes(`${whitelistPrefix}.${palletName}.*`)\n    )\n      return lookupIdx\n\n    const def = metadata.lookup[lookupIdx].def\n    if (def.tag !== \"variant\") throw new Error(whitelistPrefix + \" not an enum\")\n\n    const prefixNotIncluded = whitelist.every(\n      (e) => !e.startsWith(`${whitelistPrefix}.${palletName}`),\n    )\n\n    const value = prefixNotIncluded\n      ? []\n      : def.value.filter(({ name }) =>\n          whitelist.includes(`${whitelistPrefix}.${palletName}.${name}`),\n        )\n\n    const idx = metadata.lookup.length\n    metadata.lookup.push({\n      ...metadata.lookup[lookupIdx],\n      id: idx,\n      def: {\n        tag: \"variant\",\n        value,\n      },\n    })\n    return idx\n  }\n  const getEnumLength = (lookupIdx: number | undefined) => {\n    if (!lookupIdx) return 0\n    const def = metadata.lookup[lookupIdx].def\n    if (def.tag !== \"variant\") throw new Error(\"not an enum\")\n    return def.value.length\n  }\n\n  const filterList = <T extends { name: string }>(\n    whitelistPrefix: string,\n    palletName: string,\n    list: Array<T>,\n  ) => {\n    if (\n      whitelist.includes(`${whitelistPrefix}.*`) ||\n      whitelist.includes(`${whitelistPrefix}.${palletName}.*`)\n    )\n      return list\n\n    const prefixNotIncluded = whitelist.every(\n      (e) => !e.startsWith(`${whitelistPrefix}.${palletName}`),\n    )\n    if (prefixNotIncluded) return []\n\n    return list.filter(({ name }) =>\n      whitelist.includes(`${whitelistPrefix}.${palletName}.${name}`),\n    )\n  }\n\n  const filterPallets = <T extends V14 | V15>(\n    pallets: T[\"pallets\"],\n    filterErrors: boolean,\n  ): T[\"pallets\"] =>\n    pallets\n      .map((pallet) => {\n        if (fullPallets.includes(pallet.name)) return pallet\n\n        return {\n          ...pallet,\n          calls: filterEnum(\"tx\", pallet.name, pallet.calls),\n          constants: filterList(\"const\", pallet.name, pallet.constants),\n          errors: filterErrors ? undefined : pallet.errors,\n          events: filterEnum(\"event\", pallet.name, pallet.events),\n          storage: pallet.storage\n            ? {\n                ...pallet.storage,\n                items: filterList(\"query\", pallet.name, pallet.storage.items),\n              }\n            : undefined,\n        }\n      })\n      .filter(\n        (pallet) =>\n          getEnumLength(pallet.calls) +\n          pallet.constants.length +\n          getEnumLength(pallet.errors) +\n          getEnumLength(pallet.events) +\n          (pallet.storage?.items.length ?? 0),\n      )\n\n  const pallets = filterPallets(metadata.pallets, false)\n\n  const visitedIdxs: number[] = []\n  const lookup = getLookupFn({ ...metadata, apis, pallets })\n  getUsedTypes(lookup, getChecksumBuilder(lookup)).checksums.forEach((_, idx) =>\n    visitedIdxs.push(idx),\n  )\n  let hasModuleError = false\n  for (const idx of visitedIdxs) {\n    const visited = lookup(idx)\n    // the only type we add byteLength is the decoded module error\n    if (visited.type === \"enum\" && visited.byteLength != null) {\n      hasModuleError = true\n      break\n    }\n  }\n\n  return {\n    ...metadata,\n    apis,\n    pallets: hasModuleError ? pallets : filterPallets(pallets, true),\n  }\n}\n"],"names":["pallets"],"mappings":"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"}