{"version":3,"file":"get-new-types.mjs","sources":["../../src/get-new-types.ts"],"sourcesContent":["import {\n  getChecksumBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport type { V15 } from \"@polkadot-api/substrate-bindings\"\nimport { KnownTypes } from \"./known-types\"\nimport { defaultDeclarations, getTypesBuilder } from \"./types-builder\"\n\ntype ArraVal<T extends Array<any>> = T extends Array<infer V> ? V : unknown\n\nexport const getNewTypes = (\n  lookup: MetadataLookup,\n  knownTypes: KnownTypes,\n  getTypeName: (data: ArraVal<V15[\"lookup\"]>) => string | null,\n) => {\n  const { metadata } = lookup\n  const checksumBuilder = getChecksumBuilder(lookup)\n  let declarations = defaultDeclarations()\n  let typesBuilder = getTypesBuilder(\n    declarations,\n    lookup,\n    knownTypes,\n    checksumBuilder,\n  )\n\n  let ignoredIds = new Set<number>(\n    \"outerEnums\" in metadata\n      ? [\n          metadata.outerEnums.call,\n          metadata.outerEnums.error,\n          metadata.outerEnums.event,\n        ]\n      : [],\n  )\n\n  ;(\"outerEnums\" in metadata\n    ? [metadata.outerEnums.call, metadata.outerEnums.event]\n    : []\n  )\n    .map(lookup)\n    .forEach((entry) => {\n      if (entry.type !== \"enum\") throw null\n      Object.values(entry.value).forEach((inner) => {\n        if (inner.type === \"void\") return\n        ignoredIds.add(Object.values(inner.value)[0].id)\n      })\n    })\n\n  const wannabes: KnownTypes = {}\n  const nameToChecksum = new Map<string, { path: string[]; checksum: string }>()\n\n  metadata.lookup.forEach((x) => {\n    const result = checksumBuilder.buildDefinition(x.id)!\n    typesBuilder.buildDefinition(x.id)\n    const variable = declarations.variables.get(result)\n\n    if (\n      !variable ||\n      !variable.type.startsWith(\"AnonymousEnum<\") ||\n      variable.checksum in wannabes\n    )\n      return\n\n    const typeName = getTypeName(x)\n    if (!typeName) return\n\n    let finalTypeName = typeName\n    for (let i = 1; nameToChecksum.has(finalTypeName); i++)\n      finalTypeName = typeName + i\n\n    wannabes[variable.checksum] = { name: finalTypeName, priority: 0 }\n    nameToChecksum.set(finalTypeName, {\n      checksum: variable.checksum,\n      path: x.path,\n    })\n  })\n\n  declarations = defaultDeclarations()\n  typesBuilder = getTypesBuilder(\n    declarations,\n    lookup,\n    wannabes,\n    checksumBuilder,\n  )\n\n  metadata.lookup.forEach(({ id }) => {\n    typesBuilder.buildDefinition(id)\n  })\n\n  return Object.fromEntries(\n    [...nameToChecksum].map(([name, { checksum, path }]) => {\n      return [\n        checksum,\n        {\n          name,\n          checksum,\n          type: declarations.variables.get(checksum)!.type,\n          path,\n        },\n      ]\n    }),\n  )\n}\n"],"names":[],"mappings":";;;AAUO,MAAM,WAAc,GAAA,CACzB,MACA,EAAA,UAAA,EACA,WACG,KAAA;AACH,EAAM,MAAA,EAAE,UAAa,GAAA,MAAA;AACrB,EAAM,MAAA,eAAA,GAAkB,mBAAmB,MAAM,CAAA;AACjD,EAAA,IAAI,eAAe,mBAAoB,EAAA;AACvC,EAAA,IAAI,YAAe,GAAA,eAAA;AAAA,IACjB,YAAA;AAAA,IACA,MAAA;AAAA,IACA,UAAA;AAAA,IACA;AAAA,GACF;AAEA,EAAA,IAAI,aAAa,IAAI,GAAA;AAAA,IACnB,gBAAgB,QACZ,GAAA;AAAA,MACE,SAAS,UAAW,CAAA,IAAA;AAAA,MACpB,SAAS,UAAW,CAAA,KAAA;AAAA,MACpB,SAAS,UAAW,CAAA;AAAA,QAEtB;AAAC,GACP;AAEC,EAAA,CAAC,gBAAgB,QACd,GAAA,CAAC,QAAS,CAAA,UAAA,CAAW,MAAM,QAAS,CAAA,UAAA,CAAW,KAAK,CAAA,GACpD,EAED,EAAA,GAAA,CAAI,MAAM,CACV,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AAClB,IAAI,IAAA,KAAA,CAAM,IAAS,KAAA,MAAA,EAAc,MAAA,IAAA;AACjC,IAAA,MAAA,CAAO,OAAO,KAAM,CAAA,KAAK,CAAE,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AAC5C,MAAI,IAAA,KAAA,CAAM,SAAS,MAAQ,EAAA;AAC3B,MAAW,UAAA,CAAA,GAAA,CAAI,OAAO,MAAO,CAAA,KAAA,CAAM,KAAK,CAAE,CAAA,CAAC,EAAE,EAAE,CAAA;AAAA,KAChD,CAAA;AAAA,GACF,CAAA;AAEH,EAAA,MAAM,WAAuB,EAAC;AAC9B,EAAM,MAAA,cAAA,uBAAqB,GAAkD,EAAA;AAE7E,EAAS,QAAA,CAAA,MAAA,CAAO,OAAQ,CAAA,CAAC,CAAM,KAAA;AAC7B,IAAA,MAAM,MAAS,GAAA,eAAA,CAAgB,eAAgB,CAAA,CAAA,CAAE,EAAE,CAAA;AACnD,IAAa,YAAA,CAAA,eAAA,CAAgB,EAAE,EAAE,CAAA;AACjC,IAAA,MAAM,QAAW,GAAA,YAAA,CAAa,SAAU,CAAA,GAAA,CAAI,MAAM,CAAA;AAElD,IACE,IAAA,CAAC,YACD,CAAC,QAAA,CAAS,KAAK,UAAW,CAAA,gBAAgB,CAC1C,IAAA,QAAA,CAAS,QAAY,IAAA,QAAA;AAErB,MAAA;AAEF,IAAM,MAAA,QAAA,GAAW,YAAY,CAAC,CAAA;AAC9B,IAAA,IAAI,CAAC,QAAU,EAAA;AAEf,IAAA,IAAI,aAAgB,GAAA,QAAA;AACpB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,cAAe,CAAA,GAAA,CAAI,aAAa,CAAG,EAAA,CAAA,EAAA;AACjD,MAAA,aAAA,GAAgB,QAAW,GAAA,CAAA;AAE7B,IAAA,QAAA,CAAS,SAAS,QAAQ,CAAA,GAAI,EAAE,IAAM,EAAA,aAAA,EAAe,UAAU,CAAE,EAAA;AACjE,IAAA,cAAA,CAAe,IAAI,aAAe,EAAA;AAAA,MAChC,UAAU,QAAS,CAAA,QAAA;AAAA,MACnB,MAAM,CAAE,CAAA;AAAA,KACT,CAAA;AAAA,GACF,CAAA;AAED,EAAA,YAAA,GAAe,mBAAoB,EAAA;AACnC,EAAe,YAAA,GAAA,eAAA;AAAA,IACb,YAAA;AAAA,IACA,MAAA;AAAA,IACA,QAAA;AAAA,IACA;AAAA,GACF;AAEA,EAAA,QAAA,CAAS,MAAO,CAAA,OAAA,CAAQ,CAAC,EAAE,IAAS,KAAA;AAClC,IAAA,YAAA,CAAa,gBAAgB,EAAE,CAAA;AAAA,GAChC,CAAA;AAED,EAAA,OAAO,MAAO,CAAA,WAAA;AAAA,IACZ,CAAC,GAAG,cAAc,CAAA,CAAE,GAAI,CAAA,CAAC,CAAC,IAAA,EAAM,EAAE,QAAA,EAAU,IAAK,EAAC,CAAM,KAAA;AACtD,MAAO,OAAA;AAAA,QACL,QAAA;AAAA,QACA;AAAA,UACE,IAAA;AAAA,UACA,QAAA;AAAA,UACA,IAAM,EAAA,YAAA,CAAa,SAAU,CAAA,GAAA,CAAI,QAAQ,CAAG,CAAA,IAAA;AAAA,UAC5C;AAAA;AACF,OACF;AAAA,KACD;AAAA,GACH;AACF;;;;"}