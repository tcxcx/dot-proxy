{"version":3,"file":"type-representation.mjs","sources":["../../../src/internal-types/type-representation.ts"],"sourcesContent":["import { ArrayVar, StructVar, TupleVar } from \"@polkadot-api/metadata-builders\"\n\ntype PrimitiveNode = PrimitiveType | ChainPrimitiveType | FixedSizeBinary\nexport type TypeNode =\n  | PrimitiveNode\n  | StructType\n  | ArrayType\n  | TupleType\n  | ResultType\n  | EnumType\n  | UnionType\n  | OptionType\nexport type LookupTypeNode = TypeNode & { id: number }\nexport type MaybeLookupNode = TypeNode | LookupTypeNode\n\nexport const isPrimitive = (node: TypeNode): node is PrimitiveNode =>\n  [\"chainPrimitive\", \"primitive\", \"fixedSizeBinary\"].includes(node.type)\n\nexport type NativeType =\n  | \"boolean\"\n  | \"string\"\n  | \"number\"\n  | \"bigint\"\n  | \"undefined\"\n  | \"Uint8Array\"\nexport type PrimitiveType = {\n  type: \"primitive\"\n  value: NativeType\n}\n\nexport type ChainPrimitive =\n  | \"HexString\"\n  | \"SS58String\"\n  | \"Binary\"\n  | \"BitSequence\"\nexport type ChainPrimitiveType = {\n  type: \"chainPrimitive\"\n  value: ChainPrimitive\n}\n\nexport type FixedSizeBinary = {\n  type: \"fixedSizeBinary\"\n  value: number\n}\n\n// Need it as separate otherwise TS annoying with \"maybe value is undefined even if it has the property!\"\ntype WithOriginal<T, O> = T & ({} | { original: O })\n\nexport type StructType = WithOriginal<\n  {\n    type: \"struct\"\n    value: Array<StructField>\n  },\n  StructVar\n>\nexport type StructField = {\n  label: string\n  value: MaybeLookupNode\n  docs: string[]\n}\n\nexport type ArrayType = WithOriginal<\n  {\n    type: \"array\"\n    value: {\n      value: MaybeLookupNode\n      len?: number\n    }\n  },\n  ArrayVar\n>\n\nexport type TupleType = WithOriginal<\n  {\n    type: \"tuple\"\n    value: Array<TupleField>\n  },\n  TupleVar\n>\nexport type TupleField = {\n  value: MaybeLookupNode\n  docs: string[]\n}\n\nexport type ResultType = {\n  type: \"result\"\n  value: {\n    ok: LookupTypeNode\n    ko: LookupTypeNode\n  }\n}\n\nexport type EnumType = {\n  type: \"enum\"\n  value: Array<EnumVariant>\n}\nexport type EnumVariant = {\n  label: string\n  docs: string[]\n  value:\n    | LookupTypeNode\n    | TupleType\n    | StructType\n    | ArrayType\n    | FixedSizeBinary\n    | undefined\n}\n\nexport type UnionType = {\n  type: \"union\"\n  value: MaybeLookupNode[]\n}\n\nexport type OptionType = {\n  type: \"option\"\n  value: MaybeLookupNode\n}\n"],"names":[],"mappings":"AAea,MAAA,WAAA,GAAc,CAAC,IAAA,KAC1B,CAAC,gBAAA,EAAkB,aAAa,iBAAiB,CAAA,CAAE,QAAS,CAAA,IAAA,CAAK,IAAI;;;;"}