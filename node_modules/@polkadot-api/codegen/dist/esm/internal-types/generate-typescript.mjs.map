{"version":3,"file":"generate-typescript.mjs","sources":["../../../src/internal-types/generate-typescript.ts"],"sourcesContent":["import {\n  EnumVariant,\n  LookupTypeNode,\n  StructField,\n  TypeNode,\n} from \"./type-representation\"\n\nexport interface CodegenOutput {\n  code: string\n  imports: Record<string, Set<string>>\n}\n\nexport type NodeCodeGenerator = (\n  innerNode: TypeNode | LookupTypeNode,\n  next: (node: TypeNode) => CodegenOutput,\n  level: number,\n) => CodegenOutput\n\n/**\n * This function is chain-type agnostic. It will try its best to generate all\n * types, but will fail for non-native types (e.g. Binary)\n * This can be enhanced through composition.\n */\nexport const nativeNodeCodegen = (\n  node: TypeNode,\n  next: (node: TypeNode) => CodegenOutput,\n): CodegenOutput => {\n  if (node.type === \"primitive\") return onlyCode(node.value)\n  if (node.type === \"chainPrimitive\")\n    throw new Error(\"Can't generate chain primitive type \" + node.value)\n  if (\n    node.type === \"result\" ||\n    node.type === \"enum\" ||\n    node.type === \"fixedSizeBinary\"\n  )\n    throw new Error(\"Can't generate chain primitive type \" + node.type)\n  if (node.type === \"array\") {\n    const { code, imports } = next(node.value.value)\n    return { code: `Array<${code}>`, imports }\n  }\n\n  if (node.type === \"struct\") {\n    return generateObjectCode(node.value, next)\n  }\n  if (node.type === \"tuple\") {\n    const tupleResults = node.value.map(({ value }) => next(value))\n    // docs seem to have no effect on tuples (VSCode)\n    return {\n      code: `[${tupleResults.map(({ code }) => code).join(\", \")}]`,\n      imports: mergeImports(tupleResults.map(({ imports }) => imports)),\n    }\n  }\n  if (node.type === \"union\") {\n    if (node.value.length === 1) return next(node.value[0])\n\n    const partResults = node.value.map(next)\n    return {\n      code: partResults.map(({ code }) => `(${code})`).join(\" | \"),\n      imports: mergeImports(partResults.map(({ imports }) => imports)),\n    }\n  }\n\n  // Must be an option\n  const optionResult = next(node.value)\n  return {\n    code: `(${optionResult.code}) | undefined`,\n    imports: optionResult.imports,\n  }\n}\n\nexport function generateTypescript(\n  node: TypeNode,\n  getNodeCode: NodeCodeGenerator,\n): CodegenOutput {\n  const next = (node: TypeNode, level: number): CodegenOutput =>\n    getNodeCode(node, (v) => next(v, level + 1), level)\n  return next(node, 0)\n}\n\nexport function processPapiPrimitives(\n  node: TypeNode,\n  getCode: (node: TypeNode) => CodegenOutput,\n  isKnown?: boolean,\n): CodegenOutput | null {\n  const clientImport = (value: string) => ({ client: new Set([value]) })\n\n  if (node.type === \"chainPrimitive\") {\n    return node.value === \"BitSequence\"\n      ? onlyCode(`{bytes: Uint8Array, bitsLen: number}`)\n      : {\n          code: node.value,\n          imports: {\n            client: new Set([node.value]),\n          },\n        }\n  }\n\n  if (node.type === \"result\") {\n    const okResult = getCode(node.value.ok)\n    const koResult = getCode(node.value.ko)\n\n    return {\n      code: `ResultPayload<${okResult.code}, ${koResult.code}>`,\n      imports: mergeImports([\n        okResult.imports,\n        koResult.imports,\n        clientImport(\"ResultPayload\"),\n      ]),\n    }\n  }\n\n  if (node.type === \"enum\") {\n    const innerCode = generateObjectCode(node.value, getCode)\n\n    if (!isKnown) {\n      return {\n        code: `AnonymousEnum<${innerCode.code}>`,\n        imports: innerCode.imports,\n      }\n    }\n    return {\n      code: `Enum<${innerCode.code}>`,\n      imports: mergeImports([innerCode.imports, clientImport(\"Enum\")]),\n    }\n  }\n\n  if (node.type === \"fixedSizeBinary\") {\n    return {\n      code: `FixedSizeBinary<${node.value}>`,\n      imports: clientImport(\"FixedSizeBinary\"),\n    }\n  }\n\n  if (node.type === \"array\" && node.value.len) {\n    const { code, imports } = getCode(node.value.value)\n    return {\n      code: `FixedSizeArray<${node.value.len}, ${code}>`,\n      imports: mergeImports([imports, clientImport(\"FixedSizeArray\")]),\n    }\n  }\n\n  return null\n}\n\nexport const generateObjectCode = (\n  fields: (StructField | EnumVariant)[],\n  next: (node: TypeNode) => CodegenOutput,\n): CodegenOutput => {\n  const innerValues = fields.map((field) => ({\n    ...field,\n    result: field.value ? next(field.value) : null,\n  }))\n\n  return {\n    code: `{${innerValues\n      .map(({ label, docs, value, result }) => {\n        const docsPrefix = docs.length\n          ? `\\n/**\\n${docs.map((doc) => ` *${doc}`).join(\"\\n\")}\\n */\\n`\n          : \"\"\n        if (result === null)\n          return docsPrefix + `${JSON.stringify(label)}: undefined`\n\n        const isOptional = value?.type === \"option\"\n        const key = JSON.stringify(label) + (isOptional ? \"?\" : \"\")\n        return docsPrefix + `${key}: ${result.code}`\n      })\n      .join(\", \")}}`,\n    imports: mergeImports(innerValues.map((v) => v.result?.imports ?? {})),\n  }\n}\n\nexport const mergeImports = (\n  imports: Array<CodegenOutput[\"imports\"]>,\n): CodegenOutput[\"imports\"] => {\n  if (!imports.length) return {}\n  const result = { ...imports[0] }\n  for (let i = 1; i < imports.length; i++) {\n    Object.entries(imports[i]).forEach(\n      ([type, value]) =>\n        (result[type] = new Set([...(result[type] ?? []), ...value])),\n    )\n  }\n  return result\n}\n\nexport const onlyCode = (code: string): CodegenOutput => ({ code, imports: {} })\n"],"names":["node"],"mappings":"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"}