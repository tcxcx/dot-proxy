{"version":3,"file":"generate-types.mjs","sources":["../../src/generate-types.ts"],"sourcesContent":["import { anonymizeImports, anonymizeType } from \"./anonymize\"\nimport { CodeDeclarations } from \"./types-builder\"\n\nexport const generateTypes = (\n  declarations: CodeDeclarations,\n  paths: {\n    client: string\n  },\n) => {\n  const clientImports = [\n    ...new Set([\n      \"Enum\",\n      \"_Enum\",\n      \"GetEnum\",\n      ...declarations.imports,\n      ...anonymizeImports,\n    ]),\n  ]\n\n  const imports = `import {${clientImports.join(\", \")}} from \"${paths.client}\";`\n\n  const baseTypes = [...declarations.variables.values()]\n    .map(({ name, type }) =>\n      type.startsWith(\"Enum<\")\n        ? `export type ${name} = ${type};\\nexport const ${name} = _Enum as unknown as GetEnum<${name}>;`\n        : `export type ${name} = ${type};`,\n    )\n    .join(\"\\n\\n\")\n\n  return `${imports}\n\n  ${anonymizeType}\n\n  ${baseTypes}\n  `\n}\n"],"names":[],"mappings":";;AAGa,MAAA,aAAA,GAAgB,CAC3B,YAAA,EACA,KAGG,KAAA;AACH,EAAA,MAAM,aAAgB,GAAA;AAAA,IACpB,uBAAO,GAAI,CAAA;AAAA,MACT,MAAA;AAAA,MACA,OAAA;AAAA,MACA,SAAA;AAAA,MACA,GAAG,YAAa,CAAA,OAAA;AAAA,MAChB,GAAG;AAAA,KACJ;AAAA,GACH;AAEA,EAAM,MAAA,OAAA,GAAU,WAAW,aAAc,CAAA,IAAA,CAAK,IAAI,CAAC,CAAA,QAAA,EAAW,MAAM,MAAM,CAAA,EAAA,CAAA;AAE1E,EAAA,MAAM,YAAY,CAAC,GAAG,aAAa,SAAU,CAAA,MAAA,EAAQ,CAClD,CAAA,GAAA;AAAA,IAAI,CAAC,EAAE,IAAM,EAAA,IAAA,EACZ,KAAA,IAAA,CAAK,UAAW,CAAA,OAAO,CACnB,GAAA,CAAA,YAAA,EAAe,IAAI,CAAA,GAAA,EAAM,IAAI,CAAA;AAAA,aAAA,EAAmB,IAAI,CAAkC,+BAAA,EAAA,IAAI,OAC1F,CAAe,YAAA,EAAA,IAAI,MAAM,IAAI,CAAA,CAAA;AAAA,GACnC,CACC,KAAK,MAAM,CAAA;AAEd,EAAA,OAAO,GAAG,OAAO;;AAAA,EAAA,EAEf,aAAa;;AAAA,EAAA,EAEb,SAAS;AAAA,EAAA,CAAA;AAEb;;;;"}