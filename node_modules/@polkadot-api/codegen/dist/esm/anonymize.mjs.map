{"version":3,"file":"anonymize.mjs","sources":["../../src/anonymize.ts"],"sourcesContent":["export const anonymizeImports = [\n  \"Binary\",\n  \"FixedSizeBinary\",\n  \"Enum\",\n  \"FixedSizeArray\",\n]\n\nexport const anonymizeType = `type AnonymousEnum<T extends {}> = T & {\n  __anonymous: true\n}\n\ntype MyTuple<T> = [T, ...T[]]\n\ntype SeparateUndefined<T> = undefined extends T\n  ? undefined | Exclude<T, undefined>\n  : T\n\ntype Anonymize<T> = SeparateUndefined<\n  T extends FixedSizeBinary<infer L>\n    ? number extends L\n      ? Binary\n      : FixedSizeBinary<L>\n    : T extends\n          | string\n          | number\n          | bigint\n          | boolean\n          | void\n          | undefined\n          | null\n          | symbol\n          | Uint8Array\n          | Enum<any>\n      ? T\n      : T extends AnonymousEnum<infer V>\n        ? Enum<V>\n        : T extends MyTuple<any>\n          ? {\n              [K in keyof T]: T[K]\n            }\n          : T extends []\n            ? []\n            : T extends FixedSizeArray<infer L, infer T>\n              ? number extends L\n                ? Array<T>\n                : FixedSizeArray<L, T>\n              : {\n                  [K in keyof T & string]: T[K]\n                }\n>`\n"],"names":[],"mappings":"AAAO,MAAM,gBAAmB,GAAA;AAAA,EAC9B,QAAA;AAAA,EACA,iBAAA;AAAA,EACA,MAAA;AAAA,EACA;AACF;AAEO,MAAM,aAAgB,GAAA,CAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA;;;;"}