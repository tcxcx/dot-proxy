{"version":3,"file":"index.js","sources":["../src/parsed.ts","../src/methods.ts","../src/parsed-enhancers/chain-spec.ts","../src/parsed-enhancers/fix-premature-blocks.ts","../src/utils.ts","../src/parsed-enhancers/fix-descendant-values.ts","../src/parsed-enhancers/fix-unordered-blocks.ts","../src/parsed-enhancers/fix-unordered-events.ts","../src/parsed-enhancers/patch-chainhead-events.ts","../src/parsed-enhancers/unpin-hash.ts","../src/parsed-enhancers/translate.ts","../src/parsed-enhancers/numeric-ids.ts","../src/index.ts"],"sourcesContent":["import { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\n\nexport interface ParsedJsonRpcConnection {\n  send: <T extends {}>(message: T) => void\n  disconnect: () => void\n}\n\nexport type ParsedJsonRpcProvider = (\n  onMesage: <T extends {}>(message: T) => void,\n) => ParsedJsonRpcConnection\n\nexport type ParsedJsonRpcEnhancer = (\n  base: ParsedJsonRpcProvider,\n) => ParsedJsonRpcProvider\n\nexport const toParsed = (base: JsonRpcProvider): ParsedJsonRpcProvider => {\n  let _onMsg: null | (<T extends {}>(msg: T) => void) = null\n  const { send, disconnect } = base((msg) => {\n    _onMsg?.(JSON.parse(msg))\n  })\n\n  return (onMsg) => {\n    _onMsg = onMsg\n    return {\n      send(msg) {\n        send(JSON.stringify(msg))\n      },\n      disconnect() {\n        _onMsg = null\n        disconnect()\n      },\n    }\n  }\n}\n\nexport const fromParsed = (base: ParsedJsonRpcProvider): JsonRpcProvider => {\n  let _onMsg: null | ((msg: string) => void) = null\n  const { send, disconnect } = base((msg) => {\n    _onMsg?.(JSON.stringify(msg))\n  })\n\n  return (onMsg) => {\n    _onMsg = onMsg\n    return {\n      send(msg) {\n        send(JSON.parse(msg))\n      },\n      disconnect() {\n        _onMsg = null\n        disconnect()\n      },\n    }\n  }\n}\n\nexport const parsed =\n  (\n    ...enhancers: Array<ParsedJsonRpcEnhancer>\n  ): ((base: JsonRpcProvider) => JsonRpcProvider) =>\n  (base) =>\n    fromParsed(enhancers.reduce((a, b) => b(a), toParsed(base)))\n","const chainHead = {\n  body: \"\",\n  call: \"\",\n  continue: \"\",\n  follow: \"\",\n  header: \"\",\n  stopOperation: \"\",\n  storage: \"\",\n  unfollow: \"\",\n  unpin: \"\",\n}\n\nconst transaction = {\n  broadcast: \"\",\n  stop: \"\",\n}\n\nconst chainSpec = {\n  chainName: \"\",\n  genesisHash: \"\",\n  properties: \"\",\n}\n\nObject.entries({ chainHead, chainSpec, transaction }).forEach(\n  ([fnGroupName, methods]) => {\n    Object.keys(methods).forEach((methodName) => {\n      ;(methods as any)[methodName] = `${fnGroupName}_v1_${methodName}`\n    })\n  },\n)\n\nexport { chainHead, transaction, chainSpec }\n","import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { chainSpec } from \"@/methods\"\n\nexport const fixChainSpec: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const { send: originalSend, disconnect } = base(onMsg)\n\n  const send = (msg: any) => {\n    switch (msg.method) {\n      case chainSpec.chainName:\n        return originalSend({ ...msg, method: \"system_chain\" })\n      case chainSpec.genesisHash:\n        return originalSend({\n          ...msg,\n          method: \"chain_getBlockHash\",\n          params: [0],\n        })\n      case chainSpec.properties:\n        return originalSend({ ...msg, method: \"system_properties\" })\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n","import { chainHead } from \"@/methods\"\nimport type { ParsedJsonRpcEnhancer } from \"@/parsed\"\n\ninterface InitializedRpc {\n  event: \"initialized\"\n  finalizedBlockHashes: string[]\n}\n\ninterface NewBlockRpc {\n  event: \"newBlock\"\n  blockHash: string\n  parentBlockHash: string\n}\n\ninterface BestBlockChangedRpc {\n  event: \"bestBlockChanged\"\n  bestBlockHash: string\n}\n\ninterface FinalizedRpc {\n  event: \"finalized\"\n  finalizedBlockHashes: Array<string>\n  prunedBlockHashes: Array<string>\n}\n\nexport interface StopRpc {\n  event: \"stop\"\n}\n\ntype FollowEvent =\n  | InitializedRpc\n  | NewBlockRpc\n  | BestBlockChangedRpc\n  | FinalizedRpc\n  | StopRpc\n\nexport const fixPrematureBlocks: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const pendingChainHeadSubs = new Set<string>()\n  const pinnedBlocksInSub = new Map<string, Set<string>>()\n  const prematureBlocks = new Map<string, Map<string, Array<{}>>>()\n\n  const { send: originalSend, disconnect } = base((message) => {\n    // it's a response\n    if (\"id\" in message) {\n      onMsg(message)\n      const { id, result } = message as unknown as {\n        id: string\n        result: string\n      }\n\n      if (pendingChainHeadSubs.has(id)) {\n        pendingChainHeadSubs.delete(id)\n        pinnedBlocksInSub.set(result, new Set())\n        prematureBlocks.set(result, new Map())\n        return\n      }\n    } else {\n      // it's a notification\n      const { subscription } = (message as any).params\n      const pinnedBlocks = pinnedBlocksInSub.get(subscription)\n      const prematureSub = prematureBlocks.get(subscription)!\n      if (pinnedBlocks) {\n        const result = (message as any).params.result as FollowEvent\n        const { event } = result\n        if (event === \"initialized\") {\n          result.finalizedBlockHashes.forEach((hash) => {\n            pinnedBlocks.add(hash)\n          })\n        }\n\n        if (event === \"newBlock\") {\n          const { parentBlockHash } = result\n          if (!pinnedBlocks.has(parentBlockHash)) {\n            const list = prematureSub.get(parentBlockHash) ?? []\n            list.push(message)\n            prematureSub.set(parentBlockHash, list)\n            return\n          }\n\n          const hash = result.blockHash\n          pinnedBlocks.add(result.blockHash)\n          onMsg(message)\n\n          const prematureMessages = prematureSub.get(hash)\n          if (prematureMessages) {\n            prematureSub.delete(hash)\n            prematureMessages.forEach((msg) => {\n              pinnedBlocks.add((msg as any).params.result.blockHash)\n              onMsg(msg)\n            })\n          }\n          return\n        }\n\n        if (event === \"stop\") {\n          pinnedBlocks.delete(subscription)\n          prematureBlocks.delete(subscription)\n        }\n      }\n      onMsg(message)\n    }\n  })\n\n  const send = (msg: any) => {\n    const subId = msg.params[0]\n    switch (msg.method) {\n      case chainHead.follow:\n        pendingChainHeadSubs.add(msg.id)\n        break\n\n      case chainHead.unpin:\n        const [subscription, blocks] = msg.params as [string, string[]]\n        blocks.forEach((block) => {\n          pinnedBlocksInSub.get(subscription)?.delete(block)\n          prematureBlocks.get(subscription)?.delete(block)\n        })\n        break\n\n      case chainHead.unfollow:\n        pinnedBlocksInSub.delete(subId)\n        prematureBlocks.delete(subId)\n        break\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n","import { ParsedJsonRpcProvider } from \"./parsed\"\n\nexport const jsonObj = <T extends {}>(input: T) => ({\n  jsonrpc: \"2.0\",\n  ...input,\n})\nexport const operationNotification = <T extends {}>(\n  subscription: string,\n  event: string,\n  operationId: string,\n  innerResult: T = {} as T,\n) =>\n  jsonObj({\n    method: \"chainHead_v1_followEvent\",\n    params: {\n      subscription,\n      result: {\n        event,\n        operationId,\n        ...innerResult,\n      },\n    },\n  })\n\nconst requestPrefix = \"__INNER_RQ_DesV\"\nexport const getRequest = (base: ParsedJsonRpcProvider) => {\n  let nextId = 0\n  const onGoingRequests = new Map<string, (ok: boolean, x: any) => void>()\n\n  const listener: <T extends { id: string; result: T; error?: any }>(\n    msg: T,\n  ) => boolean = ({ id, error, result }) => {\n    const callback = onGoingRequests.get(id)\n    if (callback) {\n      onGoingRequests.delete(id)\n      if (error) callback(false, error)\n      else callback(true, result)\n    }\n    return !callback\n  }\n\n  let send: <T extends {}>(msg: T) => void = () => {}\n  const provider: ParsedJsonRpcProvider = (onMsg) => {\n    const { send: _send, disconnect } = base((msg) => {\n      if (listener(msg as any)) onMsg(msg)\n    })\n    send = _send\n    return {\n      send,\n      disconnect: () => {\n        onGoingRequests.clear()\n        disconnect()\n      },\n    }\n  }\n\n  const request = <T>(\n    method: string,\n    params: Array<any>,\n    onSuccess: (x: T) => void,\n    onError: (e: any) => void,\n  ): void => {\n    const id = requestPrefix + nextId++\n    onGoingRequests.set(id, (isOk, value) => {\n      ;(isOk ? onSuccess : onError)(value)\n    })\n    send(jsonObj({ id, method, params }))\n  }\n\n  return [provider, request] as const\n}\n","import { chainHead } from \"@/methods\"\nimport type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { getRequest, jsonObj, operationNotification } from \"@/utils\"\n\nconst operationPrefix = \"__INNER_OP_DesV\"\nlet nextOperationId = 0\nexport const fixDescendantValues: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const [provider, request] = getRequest(base)\n  const getDescendantValues = getDescendantValuesFromOldRpc(request)\n\n  // the `id` of the json-rpc request that should respond with the `operationId`\n  // if it has started, the value is the callback-function that is waiting for the `operationId`\n  const preOpId = new Map<string, (operationId: string) => void>()\n\n  // chainHeadSubscription - operationId => operationState\n  const onGoing: Map<\n    string,\n    Map<\n      string,\n      {\n        isOutterDone: boolean\n        isInnerDone: boolean\n        cancel: () => void\n      }\n    >\n  > = new Map()\n\n  const { send: originalSend, disconnect } = provider((msg: any) => {\n    // it's a response\n    if (\"id\" in msg) {\n      const opIdCb = preOpId.get(msg.id)\n      if (opIdCb) {\n        preOpId.delete(msg.id)\n        if (msg.result.result === \"started\") opIdCb(msg.result.operationId)\n      }\n    } else if (msg.params) {\n      // it's a notifiaction\n      const { subscription, result } = (msg as any).params\n      const { operationId } = result || {}\n      const operations = onGoing.get(subscription)\n\n      if (operations && result.event === \"stop\") {\n        operations.forEach((x) => {\n          x.cancel()\n        })\n        onGoing.delete(subscription)\n      }\n\n      const operation = operations?.get(operationId)\n      if (operation) {\n        switch (result.event) {\n          case \"operationInaccessible\":\n          case \"operationError\":\n            operation.cancel()\n            break\n          case \"operationStorageDone\": {\n            if (operation.isInnerDone) {\n              operations!.delete(operationId)\n            } else {\n              operation.isOutterDone = true\n              return\n            }\n          }\n        }\n      }\n    }\n    onMsg(msg)\n  })\n\n  const getStartDescendantValues =\n    (subscription: string, blockHash: string, keys: string[]) =>\n    (operationId: string) => {\n      let _cancel = () => {}\n      if (!onGoing.has(subscription)) {\n        onGoing.set(subscription, new Map())\n      }\n      const operationsMap = onGoing.get(subscription)!\n      const state = {\n        isOutterDone: false,\n        isInnerDone: false,\n        cancel: () => {\n          _cancel()\n        },\n      }\n      operationsMap.set(operationId, state)\n\n      let nFinished = 0\n      const stoppers = keys.map((key) =>\n        getDescendantValues(\n          key,\n          blockHash,\n          (values) => {\n            onMsg(\n              operationNotification(\n                subscription,\n                \"operationStorageItems\",\n                operationId,\n                { items: values.map(([key, value]) => ({ key, value })) },\n              ),\n            )\n          },\n          (error) => {\n            _cancel()\n            if (!state.isOutterDone) {\n              // stop the outer\n              originalSend(\n                jsonObj({\n                  method: \"chainHead_v1_stopOperation\",\n                  params: [operationId],\n                }),\n              )\n            }\n            // send error\n            onMsg(\n              operationNotification(\n                subscription,\n                \"operationError\",\n                operationId,\n                {\n                  error:\n                    typeof error === \"string\" ? error : JSON.stringify(error),\n                },\n              ),\n            )\n          },\n          () => {\n            if (++nFinished === keys.length) {\n              if (state.isOutterDone) {\n                // done\n                _cancel()\n                onMsg(\n                  operationNotification(\n                    subscription,\n                    \"operationStorageDone\",\n                    operationId,\n                  ),\n                )\n              } else state.isInnerDone = true\n            }\n          },\n        ),\n      )\n      _cancel = () => {\n        operationsMap.delete(operationId)\n        stoppers.forEach((cb) => cb())\n      }\n    }\n\n  const send = (msg: any) => {\n    switch (msg.method) {\n      case chainHead.storage: {\n        const [followSub, blockHash, items] = msg.params as [\n          string,\n          string,\n          any[],\n        ]\n        const descendantsValuesKeys: string[] = []\n        const actualItems = items.filter((x) => {\n          const isDescendantsValues = x.type === \"descendantsValues\"\n          if (isDescendantsValues) descendantsValuesKeys.push(x.key)\n          return !isDescendantsValues\n        })\n\n        const startGetDescendantValues = getStartDescendantValues(\n          followSub,\n          blockHash,\n          descendantsValuesKeys,\n        )\n        if (!actualItems.length) {\n          const operationId = operationPrefix + nextOperationId++\n          onMsg(\n            jsonObj({\n              id: msg.id,\n              result: { result: \"started\", operationId },\n            }),\n          )\n          startGetDescendantValues(operationId)\n          onGoing.get(followSub)!.get(operationId)!.isOutterDone = true\n          return\n        } else if (descendantsValuesKeys.length) {\n          preOpId.set(msg.id, startGetDescendantValues)\n        }\n        msg.params[2] = actualItems\n        break\n      }\n      case chainHead.stopOperation: {\n        const [followSubscription, operationId] = msg.params as [string, string]\n        const data = onGoing.get(followSubscription)?.get(operationId)\n        if (data) {\n          data.cancel()\n          if (data.isOutterDone) return\n        }\n        break\n      }\n      case chainHead.unfollow: {\n        const [followSubscription] = msg.params as [string]\n        onGoing.get(followSubscription)?.forEach((x) => x.cancel())\n        onGoing.delete(followSubscription)\n        break\n      }\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n\n/**\n * A higher-order function that returns a process to fetch descendant values\n * from the storage of block using an older RPC method.\n *\n * This function takes a `request` function as an argument, which is used to\n * make RPC calls. The returned function accepts a storage key (`rootKey`) and a\n * block hash (`at`) as inputs, as well as three callbacks:\n * 1. `onValues`: triggered when new values are retrieved.\n * 2. `onError`: triggered in case of an error during the operation.\n * 3. `onDone`: triggered when all values have been successfully fetched.\n *\n * The operation works by paginating through storage keys using\n * `state_getKeysPaged`\n * and fetching the corresponding values using `state_queryStorageAt`.\n * It runs in the background and supports stopping the operation early by\n * returning a callback function that, when invoked, cancels further processing.\n *\n * The flow of execution:\n * - The function continuously fetches storage keys in batches.\n * - For each batch, it fetches the descendant values at the specified block\n * hash.\n * - If an error occurs or the user cancels the operation, it stops fetching.\n * - The `onDone` callback is triggered when all the keys have been processed\n * and all ongoing value retrieval operations are completed.\n */\nconst getDescendantValuesFromOldRpc =\n  (\n    request: <T>(\n      method: string,\n      args: Array<any>,\n      onSuccess: (value: T) => void,\n      onError: (e: any) => void,\n    ) => void,\n  ) =>\n  (\n    rootKey: string,\n    at: string,\n    onValues: (input: Array<[string, string]>) => void,\n    onError: (e: any) => void,\n    onDone: () => void,\n  ): (() => void) => {\n    let isRunning = true\n    let areAllKeysDone = false\n    let onGoingValues = 0\n\n    const _onError = (e: any) => {\n      if (isRunning) {\n        isRunning = false\n        onError(e)\n      }\n    }\n\n    const PAGE_SIZE = 1000\n    const pullKeys = (startAtKey?: string) => {\n      request<string[]>(\n        \"state_getKeysPaged\",\n        [rootKey, PAGE_SIZE, startAtKey || undefined, at],\n        (result) => {\n          if (isRunning) {\n            if (result.length > 0) {\n              onGoingValues++\n              request<[{ block: string; changes: Array<[string, string]> }]>(\n                \"state_queryStorageAt\",\n                [result, at],\n                ([{ changes }]) => {\n                  if (isRunning) {\n                    onGoingValues--\n                    onValues(changes)\n                    if (areAllKeysDone && !onGoingValues) onDone()\n                  }\n                },\n                _onError,\n              )\n            }\n            if (result.length < PAGE_SIZE) {\n              areAllKeysDone = true\n              if (!onGoingValues) onDone()\n            } else pullKeys(result.at(-1))\n          }\n        },\n        _onError,\n      )\n    }\n    pullKeys()\n\n    return () => {\n      isRunning = false\n    }\n  }\n","import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { chainHead } from \"@/methods\"\n\ninterface InitializedRpc {\n  event: \"initialized\"\n  finalizedBlockHashes: string[]\n}\n\ninterface NewBlockRpc {\n  event: \"newBlock\"\n  blockHash: string\n  parentBlockHash: string\n}\n\ninterface BestBlockChangedRpc {\n  event: \"bestBlockChanged\"\n  bestBlockHash: string\n}\n\ninterface FinalizedRpc {\n  event: \"finalized\"\n  finalizedBlockHashes: Array<string>\n  prunedBlockHashes: Array<string>\n}\n\nexport interface StopRpc {\n  event: \"stop\"\n}\n\ntype FollowEvent =\n  | InitializedRpc\n  | NewBlockRpc\n  | BestBlockChangedRpc\n  | FinalizedRpc\n  | StopRpc\n\nexport const fixUnorderedBlocks: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const pendingChainHeadSubs = new Set<string>()\n  const pinnedBlocksInSub = new Map<string, Set<string>>()\n  const uknownBlocksNotifications = new Map<string, Map<string, any>>()\n\n  const { send: originalSend, disconnect } = base((message) => {\n    // it's a response\n    if (\"id\" in message) {\n      onMsg(message)\n      const { id, result } = message as unknown as {\n        id: string\n        result: string\n      }\n\n      if (pendingChainHeadSubs.has(id)) {\n        pendingChainHeadSubs.delete(id)\n        pinnedBlocksInSub.set(result, new Set())\n        uknownBlocksNotifications.set(result, new Map())\n        return\n      }\n    } else {\n      // it's a notification\n      const { subscription } = (message as any).params\n      const pinnedBlocks = pinnedBlocksInSub.get(subscription)\n      const premature = uknownBlocksNotifications.get(subscription)!\n      if (pinnedBlocks) {\n        const result = (message as any).params.result as FollowEvent\n        const { event } = result\n        if (event === \"initialized\") {\n          result.finalizedBlockHashes.forEach((hash) => {\n            pinnedBlocks.add(hash)\n          })\n        }\n\n        if (event === \"finalized\") {\n          result.prunedBlockHashes = result.prunedBlockHashes.filter((x) =>\n            pinnedBlocks.has(x),\n          )\n        }\n\n        if (event === \"newBlock\") {\n          pinnedBlocks.add(result.blockHash)\n          const hash = result.blockHash\n          const missing = premature.get(hash)\n          if (missing) {\n            premature.delete(hash)\n            onMsg(message)\n            Promise.resolve().then(() => {\n              onMsg(missing)\n            })\n            return\n          }\n        }\n\n        if (event === \"bestBlockChanged\") {\n          const hash = result.bestBlockHash\n          if (!pinnedBlocks.has(hash)) {\n            uknownBlocksNotifications.get(subscription)!.set(hash, message)\n            return\n          }\n        }\n\n        if (event === \"stop\") {\n          pinnedBlocks.delete(subscription)\n          uknownBlocksNotifications.delete(subscription)\n        }\n      }\n      onMsg(message)\n    }\n  })\n\n  const send = (msg: any) => {\n    const subId = msg.params[0]\n    switch (msg.method) {\n      case chainHead.follow:\n        pendingChainHeadSubs.add(msg.id)\n        break\n\n      case chainHead.unpin:\n        const [subscription, blocks] = msg.params as [string, string[]]\n        blocks.forEach((block) => {\n          pinnedBlocksInSub.get(subscription)?.delete(block)\n          uknownBlocksNotifications.get(subscription)?.delete(block)\n        })\n        break\n\n      case chainHead.unfollow:\n        pinnedBlocksInSub.delete(subId)\n        uknownBlocksNotifications.delete(subId)\n        break\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n","import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { chainHead } from \"@/methods\"\n\nconst terminalOperationEvents = new Set(\n  [\"BodyDone\", \"CallDone\", \"StorageDone\", \"Inaccessible\", \"Error\"].map(\n    (x) => \"operation\" + x,\n  ),\n)\nconst isTerminalNotification = (msg: any): boolean =>\n  terminalOperationEvents.has(msg.params?.result?.event)\n\nexport const fixUnorderedEvents: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const pendingChainHeadSubs = new Set<string>()\n  const pendingOperationIds: Map<string, string> = new Map()\n\n  const activeOperationIds = new Map<string, Set<string>>()\n  const uknownOperationNotifications = new Map<\n    string,\n    Map<string, Array<any>>\n  >()\n\n  const { send: originalSend, disconnect } = base((message) => {\n    // it's a response\n    if (\"id\" in message) {\n      onMsg(message)\n      const { id, result } = message as unknown as {\n        id: string\n        result: string\n      }\n      if (pendingChainHeadSubs.has(id)) {\n        pendingChainHeadSubs.delete(id)\n        activeOperationIds.set(result, new Set())\n        uknownOperationNotifications.set(result, new Map())\n        return\n      }\n\n      const subId = pendingOperationIds.get(id)\n      if (subId !== undefined) {\n        pendingOperationIds.delete(id)\n        const opId = (message as any).result?.operationId\n        // it's possible that the limit has been reached... so we need to check\n        // it's also possible that the response came after an unfollow\n        if (opId !== undefined && activeOperationIds.has(subId)) {\n          const subOperations = activeOperationIds.get(subId)!\n          subOperations.add(opId)\n          const pendingNotifications = uknownOperationNotifications\n            .get(subId)\n            ?.get(opId)\n\n          if (pendingNotifications) {\n            pendingNotifications.forEach(onMsg)\n            uknownOperationNotifications.get(subId)!.delete(opId)\n            if (isTerminalNotification(pendingNotifications.at(-1)))\n              subOperations.delete(opId)\n          }\n        }\n      }\n    } else {\n      // it's a notification\n      const { subscription, result } = (message as any).params\n      const operationIds = activeOperationIds.get(subscription)\n      if (operationIds) {\n        const { operationId } = (message as any).params.result\n        if (operationId !== undefined) {\n          if (!operationIds.has(operationId)) {\n            // The operationId hasn't arrived yet\n            const subscriptionPending =\n              uknownOperationNotifications.get(subscription)!\n            const pendingMessages = subscriptionPending.get(operationId) ?? []\n            pendingMessages.push(message)\n            subscriptionPending.set(operationId, pendingMessages)\n            return\n          } else if (isTerminalNotification(message))\n            operationIds.delete(operationId)\n        } else if (result?.event === \"stop\") {\n          activeOperationIds.delete(subscription)\n          uknownOperationNotifications.delete(subscription)\n        }\n      }\n      onMsg(message)\n    }\n  })\n\n  const send = (msg: any) => {\n    const subId = msg.params[0]\n    switch (msg.method) {\n      case chainHead.follow:\n        pendingChainHeadSubs.add(msg.id)\n        break\n\n      case chainHead.body:\n      case chainHead.call:\n      case chainHead.storage:\n        pendingOperationIds.set(msg.id, subId)\n        break\n\n      case chainHead.unfollow:\n        activeOperationIds.delete(subId)\n        uknownOperationNotifications.delete(subId)\n        break\n\n      case chainHead.stopOperation:\n        activeOperationIds.get(subId)?.delete(msg.params[1])\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n","import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\n\nexport const patchChainHeadEvents: ParsedJsonRpcEnhancer = (base) => (onMsg) =>\n  base((message) => {\n    const result = (message as any).params?.result\n    if (!(\"id\" in message) && result) {\n      const { prunedBlockHashes, finalizedBlockHash, event } = result\n      if (event === \"finalized\" && Array.isArray(prunedBlockHashes))\n        result.prunedBlockHashes = [...new Set(result.prunedBlockHashes)]\n      else if (event === \"initialized\" && finalizedBlockHash) {\n        result.finalizedBlockHashes = [result.finalizedBlockHash]\n        delete result.finalizedBlockHash\n      }\n    }\n    onMsg(message)\n  })\n","import { chainHead } from \"@/methods\"\nimport type { ParsedJsonRpcEnhancer } from \"@/parsed\"\n\nexport const unpinHash: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const { send: _send, disconnect } = base(onMsg)\n\n  const send = (msg: { id?: string; method?: string; params?: Array<any> }) => {\n    const { method, params, id, ...rest } = msg\n    if (method == chainHead.unpin && params && Array.isArray(params[1])) {\n      params[1].forEach((hash, idx) => {\n        _send({\n          ...rest,\n          id: idx === 0 ? id : `${id}-patched-${idx}`,\n          method,\n          params: [params[0], hash],\n        })\n      })\n    } else _send(msg)\n  }\n\n  return { send, disconnect }\n}\n","import { chainHead, chainSpec, transaction } from \"@/methods\"\nimport { ParsedJsonRpcEnhancer } from \"@/parsed\"\n\nconst jsonRpcMsg = <T extends {}>(msg: T) => ({\n  jsonrpc: \"2.0\",\n  ...msg,\n})\n\nconst [transactionGroup] = transaction.stop.split(\"_\")\nconst unstable = \"unstable\"\nconst rpcMethods = \"rpc_methods\"\nconst RPC_METHODS_ID = \"__INTERNAL_ID\"\n\nexport const translate: ParsedJsonRpcEnhancer = (base) => {\n  return (originalOnMsg) => {\n    let isRunning = true\n    let bufferedMsgs: Array<{ id: string; method: string; params: string }> = []\n\n    // It's possible (and very likely) that the consumer will start sending requests\n    // before we have figured out which are the actual methods that are available and\n    // how to translate them. So, the initial `_send` function just captures those received\n    // requests until it's able to \"translate\" them... At which point it will send all\n    // the buffered messages and then it will mutate the _send function with the one\n    // that it's able to transalte the requests\n    let _send = (msg: any) => {\n      bufferedMsgs.push(msg)\n    }\n\n    // originally the _onMsg function is wired up to receive the initial response to\n    // our internal rpc_methods request. Once it receives the response, then it applies\n    // the necessary transaltions and re-wires the _onMsg to the original one.\n    const preOnMsg: (msg: any) => void = ({\n      id,\n      result,\n      error,\n    }: {\n      id: string\n      result: { methods: string[] } | undefined\n      error: any\n    }) => {\n      if (id !== RPC_METHODS_ID || !isRunning) return\n\n      // it's an error, let's try again\n      if (!result) {\n        console.error(error)\n        if (nTries < 4) {\n          setTimeout(sendMethodsRequest, 200)\n          return\n        }\n        // simplest way to propagate the error\n        result = { methods: [] }\n      }\n\n      const methodsSet = new Set(result.methods)\n      const methodMappings: Record<string, string | null> = {}\n\n      ;[chainHead, chainSpec, transaction].forEach((obj) => {\n        Object.values(obj).forEach((method) => {\n          if (methodsSet.has(method)) {\n            methodMappings[method] = method\n          } else {\n            const [group, , name] = method.split(\"_\")\n            const unstableMethod = `${group}_${unstable}_${name}`\n\n            if (methodsSet.has(unstableMethod)) {\n              methodMappings[method] = unstableMethod\n              methodsSet.delete(unstableMethod)\n              methodsSet.add(method)\n            } else {\n              methodMappings[method] = null\n              if (group === transactionGroup) {\n                let matchedMethod: string\n                const translatedMethod =\n                  method === \"stop\" ? \"unwatch\" : \"submitAndWatch\"\n                const txGroup = [\n                  transactionGroup + \"Watch\",\n                  transactionGroup,\n                ].find((group) =>\n                  [\"v1\", unstable].find((v) =>\n                    methodsSet.has(\n                      (matchedMethod = `${group}_${v}_${translatedMethod}`),\n                    ),\n                  ),\n                )\n                if (txGroup) {\n                  methodMappings[method] = matchedMethod!\n                  methodsSet.add(method)\n                }\n              }\n            }\n          }\n        })\n      })\n\n      _onMsg = originalOnMsg\n      const enhancedSend = ({\n        method,\n        ...rest\n      }: {\n        method: string\n        id: string\n      }) => {\n        if (method === rpcMethods) {\n          Promise.resolve().then(() => {\n            originalOnMsg(\n              jsonRpcMsg({\n                id: rest.id,\n                result: { methods: [...methodsSet] },\n              }),\n            )\n          })\n          return\n        }\n\n        const mapping = methodMappings[method]\n        if (mapping === null) {\n          if (method.split(\"_\")[2] === \"follow\") {\n            reset()\n            _send({ method, ...rest } as any)\n          } else {\n            Promise.resolve().then(() => {\n              originalOnMsg({\n                error: { code: -32603, message: `Method not found: ${method}` },\n                id: rest.id,\n              })\n            })\n          }\n        } else\n          originalSend({\n            method: mapping || method,\n            ...rest,\n          })\n      }\n\n      const bufferCopy = [...bufferedMsgs]\n      bufferedMsgs = []\n      for (let i = 0; isRunning && i < bufferCopy.length; i++)\n        enhancedSend(bufferCopy[i])\n      if (isRunning) _send = enhancedSend\n    }\n    let _onMsg = preOnMsg\n\n    const { send: originalSend, disconnect } = base((msg: any) => {\n      _onMsg(msg)\n    })\n    const reset = () => {\n      isRunning = true\n      bufferedMsgs = []\n      _send = (msg: any) => {\n        bufferedMsgs.push(msg)\n      }\n      _onMsg = preOnMsg\n      sendMethodsRequest()\n    }\n\n    let nTries = 0\n    const sendMethodsRequest = () => {\n      nTries++\n      originalSend(\n        jsonRpcMsg({\n          id: RPC_METHODS_ID,\n          method: rpcMethods,\n          params: [],\n        }),\n      )\n    }\n    sendMethodsRequest()\n\n    return {\n      send: (msg) => {\n        _send(msg)\n      },\n      disconnect() {\n        isRunning = false\n        _send = _onMsg = () => {}\n        bufferedMsgs = []\n        disconnect()\n      },\n    }\n  }\n}\n","import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\n\nexport const withNumericIds: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  let nextId = 0\n  const numberToOriginal = new Map<number, string>()\n\n  const { send: originalSend, disconnect } = base((message: any) => {\n    if (numberToOriginal.has(message.id))\n      message.id = numberToOriginal.get(message.id)\n    onMsg(message)\n  })\n\n  return {\n    send: (msg: { id?: any }) => {\n      if (\"id\" in msg) {\n        const id = nextId++\n        numberToOriginal.set(id, msg.id)\n        msg.id = id\n      }\n      originalSend(msg)\n    },\n    disconnect,\n  }\n}\n","import { parsed } from \"./parsed\"\nimport {\n  translate,\n  unpinHash,\n  patchChainHeadEvents,\n  fixUnorderedEvents,\n  fixUnorderedBlocks,\n  fixChainSpec,\n  fixDescendantValues,\n  fixPrematureBlocks,\n  withNumericIds,\n} from \"./parsed-enhancers\"\nimport * as methods from \"./methods\"\nexport { methods }\n\nconst withPolkadotSdkCompat = parsed(\n  withNumericIds,\n  translate,\n  fixUnorderedEvents,\n  unpinHash,\n  patchChainHeadEvents,\n  fixPrematureBlocks,\n  fixUnorderedBlocks,\n  fixChainSpec,\n  fixDescendantValues,\n)\n\nexport * from \"./parsed\"\nexport {\n  withPolkadotSdkCompat,\n  translate,\n  fixUnorderedEvents,\n  unpinHash,\n  patchChainHeadEvents,\n  fixUnorderedBlocks,\n  fixDescendantValues,\n  fixPrematureBlocks,\n  withNumericIds,\n}\n"],"names":["key","group"],"mappings":"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"}