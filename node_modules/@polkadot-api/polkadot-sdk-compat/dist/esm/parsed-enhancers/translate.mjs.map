{"version":3,"file":"translate.mjs","sources":["../../../src/parsed-enhancers/translate.ts"],"sourcesContent":["import { chainHead, chainSpec, transaction } from \"@/methods\"\nimport { ParsedJsonRpcEnhancer } from \"@/parsed\"\n\nconst jsonRpcMsg = <T extends {}>(msg: T) => ({\n  jsonrpc: \"2.0\",\n  ...msg,\n})\n\nconst [transactionGroup] = transaction.stop.split(\"_\")\nconst unstable = \"unstable\"\nconst rpcMethods = \"rpc_methods\"\nconst RPC_METHODS_ID = \"__INTERNAL_ID\"\n\nexport const translate: ParsedJsonRpcEnhancer = (base) => {\n  return (originalOnMsg) => {\n    let isRunning = true\n    let bufferedMsgs: Array<{ id: string; method: string; params: string }> = []\n\n    // It's possible (and very likely) that the consumer will start sending requests\n    // before we have figured out which are the actual methods that are available and\n    // how to translate them. So, the initial `_send` function just captures those received\n    // requests until it's able to \"translate\" them... At which point it will send all\n    // the buffered messages and then it will mutate the _send function with the one\n    // that it's able to transalte the requests\n    let _send = (msg: any) => {\n      bufferedMsgs.push(msg)\n    }\n\n    // originally the _onMsg function is wired up to receive the initial response to\n    // our internal rpc_methods request. Once it receives the response, then it applies\n    // the necessary transaltions and re-wires the _onMsg to the original one.\n    const preOnMsg: (msg: any) => void = ({\n      id,\n      result,\n      error,\n    }: {\n      id: string\n      result: { methods: string[] } | undefined\n      error: any\n    }) => {\n      if (id !== RPC_METHODS_ID || !isRunning) return\n\n      // it's an error, let's try again\n      if (!result) {\n        console.error(error)\n        if (nTries < 4) {\n          setTimeout(sendMethodsRequest, 200)\n          return\n        }\n        // simplest way to propagate the error\n        result = { methods: [] }\n      }\n\n      const methodsSet = new Set(result.methods)\n      const methodMappings: Record<string, string | null> = {}\n\n      ;[chainHead, chainSpec, transaction].forEach((obj) => {\n        Object.values(obj).forEach((method) => {\n          if (methodsSet.has(method)) {\n            methodMappings[method] = method\n          } else {\n            const [group, , name] = method.split(\"_\")\n            const unstableMethod = `${group}_${unstable}_${name}`\n\n            if (methodsSet.has(unstableMethod)) {\n              methodMappings[method] = unstableMethod\n              methodsSet.delete(unstableMethod)\n              methodsSet.add(method)\n            } else {\n              methodMappings[method] = null\n              if (group === transactionGroup) {\n                let matchedMethod: string\n                const translatedMethod =\n                  method === \"stop\" ? \"unwatch\" : \"submitAndWatch\"\n                const txGroup = [\n                  transactionGroup + \"Watch\",\n                  transactionGroup,\n                ].find((group) =>\n                  [\"v1\", unstable].find((v) =>\n                    methodsSet.has(\n                      (matchedMethod = `${group}_${v}_${translatedMethod}`),\n                    ),\n                  ),\n                )\n                if (txGroup) {\n                  methodMappings[method] = matchedMethod!\n                  methodsSet.add(method)\n                }\n              }\n            }\n          }\n        })\n      })\n\n      _onMsg = originalOnMsg\n      const enhancedSend = ({\n        method,\n        ...rest\n      }: {\n        method: string\n        id: string\n      }) => {\n        if (method === rpcMethods) {\n          Promise.resolve().then(() => {\n            originalOnMsg(\n              jsonRpcMsg({\n                id: rest.id,\n                result: { methods: [...methodsSet] },\n              }),\n            )\n          })\n          return\n        }\n\n        const mapping = methodMappings[method]\n        if (mapping === null) {\n          if (method.split(\"_\")[2] === \"follow\") {\n            reset()\n            _send({ method, ...rest } as any)\n          } else {\n            Promise.resolve().then(() => {\n              originalOnMsg({\n                error: { code: -32603, message: `Method not found: ${method}` },\n                id: rest.id,\n              })\n            })\n          }\n        } else\n          originalSend({\n            method: mapping || method,\n            ...rest,\n          })\n      }\n\n      const bufferCopy = [...bufferedMsgs]\n      bufferedMsgs = []\n      for (let i = 0; isRunning && i < bufferCopy.length; i++)\n        enhancedSend(bufferCopy[i])\n      if (isRunning) _send = enhancedSend\n    }\n    let _onMsg = preOnMsg\n\n    const { send: originalSend, disconnect } = base((msg: any) => {\n      _onMsg(msg)\n    })\n    const reset = () => {\n      isRunning = true\n      bufferedMsgs = []\n      _send = (msg: any) => {\n        bufferedMsgs.push(msg)\n      }\n      _onMsg = preOnMsg\n      sendMethodsRequest()\n    }\n\n    let nTries = 0\n    const sendMethodsRequest = () => {\n      nTries++\n      originalSend(\n        jsonRpcMsg({\n          id: RPC_METHODS_ID,\n          method: rpcMethods,\n          params: [],\n        }),\n      )\n    }\n    sendMethodsRequest()\n\n    return {\n      send: (msg) => {\n        _send(msg)\n      },\n      disconnect() {\n        isRunning = false\n        _send = _onMsg = () => {}\n        bufferedMsgs = []\n        disconnect()\n      },\n    }\n  }\n}\n"],"names":["group"],"mappings":"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"}