{"version":3,"file":"fix-unordered-blocks.mjs","sources":["../../../src/parsed-enhancers/fix-unordered-blocks.ts"],"sourcesContent":["import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { chainHead } from \"@/methods\"\n\ninterface InitializedRpc {\n  event: \"initialized\"\n  finalizedBlockHashes: string[]\n}\n\ninterface NewBlockRpc {\n  event: \"newBlock\"\n  blockHash: string\n  parentBlockHash: string\n}\n\ninterface BestBlockChangedRpc {\n  event: \"bestBlockChanged\"\n  bestBlockHash: string\n}\n\ninterface FinalizedRpc {\n  event: \"finalized\"\n  finalizedBlockHashes: Array<string>\n  prunedBlockHashes: Array<string>\n}\n\nexport interface StopRpc {\n  event: \"stop\"\n}\n\ntype FollowEvent =\n  | InitializedRpc\n  | NewBlockRpc\n  | BestBlockChangedRpc\n  | FinalizedRpc\n  | StopRpc\n\nexport const fixUnorderedBlocks: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const pendingChainHeadSubs = new Set<string>()\n  const pinnedBlocksInSub = new Map<string, Set<string>>()\n  const uknownBlocksNotifications = new Map<string, Map<string, any>>()\n\n  const { send: originalSend, disconnect } = base((message) => {\n    // it's a response\n    if (\"id\" in message) {\n      onMsg(message)\n      const { id, result } = message as unknown as {\n        id: string\n        result: string\n      }\n\n      if (pendingChainHeadSubs.has(id)) {\n        pendingChainHeadSubs.delete(id)\n        pinnedBlocksInSub.set(result, new Set())\n        uknownBlocksNotifications.set(result, new Map())\n        return\n      }\n    } else {\n      // it's a notification\n      const { subscription } = (message as any).params\n      const pinnedBlocks = pinnedBlocksInSub.get(subscription)\n      const premature = uknownBlocksNotifications.get(subscription)!\n      if (pinnedBlocks) {\n        const result = (message as any).params.result as FollowEvent\n        const { event } = result\n        if (event === \"initialized\") {\n          result.finalizedBlockHashes.forEach((hash) => {\n            pinnedBlocks.add(hash)\n          })\n        }\n\n        if (event === \"finalized\") {\n          result.prunedBlockHashes = result.prunedBlockHashes.filter((x) =>\n            pinnedBlocks.has(x),\n          )\n        }\n\n        if (event === \"newBlock\") {\n          pinnedBlocks.add(result.blockHash)\n          const hash = result.blockHash\n          const missing = premature.get(hash)\n          if (missing) {\n            premature.delete(hash)\n            onMsg(message)\n            Promise.resolve().then(() => {\n              onMsg(missing)\n            })\n            return\n          }\n        }\n\n        if (event === \"bestBlockChanged\") {\n          const hash = result.bestBlockHash\n          if (!pinnedBlocks.has(hash)) {\n            uknownBlocksNotifications.get(subscription)!.set(hash, message)\n            return\n          }\n        }\n\n        if (event === \"stop\") {\n          pinnedBlocks.delete(subscription)\n          uknownBlocksNotifications.delete(subscription)\n        }\n      }\n      onMsg(message)\n    }\n  })\n\n  const send = (msg: any) => {\n    const subId = msg.params[0]\n    switch (msg.method) {\n      case chainHead.follow:\n        pendingChainHeadSubs.add(msg.id)\n        break\n\n      case chainHead.unpin:\n        const [subscription, blocks] = msg.params as [string, string[]]\n        blocks.forEach((block) => {\n          pinnedBlocksInSub.get(subscription)?.delete(block)\n          uknownBlocksNotifications.get(subscription)?.delete(block)\n        })\n        break\n\n      case chainHead.unfollow:\n        pinnedBlocksInSub.delete(subId)\n        uknownBlocksNotifications.delete(subId)\n        break\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n"],"names":[],"mappings":";;AAoCO,MAAM,kBAA4C,GAAA,CAAC,IAAS,KAAA,CAAC,KAAU,KAAA;AAC5E,EAAM,MAAA,oBAAA,uBAA2B,GAAY,EAAA;AAC7C,EAAM,MAAA,iBAAA,uBAAwB,GAAyB,EAAA;AACvD,EAAM,MAAA,yBAAA,uBAAgC,GAA8B,EAAA;AAEpE,EAAA,MAAM,EAAE,IAAM,EAAA,YAAA,EAAc,YAAe,GAAA,IAAA,CAAK,CAAC,OAAY,KAAA;AAE3D,IAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,MAAA,KAAA,CAAM,OAAO,CAAA;AACb,MAAM,MAAA,EAAE,EAAI,EAAA,MAAA,EAAW,GAAA,OAAA;AAKvB,MAAI,IAAA,oBAAA,CAAqB,GAAI,CAAA,EAAE,CAAG,EAAA;AAChC,QAAA,oBAAA,CAAqB,OAAO,EAAE,CAAA;AAC9B,QAAA,iBAAA,CAAkB,GAAI,CAAA,MAAA,kBAAY,IAAA,GAAA,EAAK,CAAA;AACvC,QAAA,yBAAA,CAA0B,GAAI,CAAA,MAAA,kBAAY,IAAA,GAAA,EAAK,CAAA;AAC/C,QAAA;AAAA;AACF,KACK,MAAA;AAEL,MAAM,MAAA,EAAE,YAAa,EAAA,GAAK,OAAgB,CAAA,MAAA;AAC1C,MAAM,MAAA,YAAA,GAAe,iBAAkB,CAAA,GAAA,CAAI,YAAY,CAAA;AACvD,MAAM,MAAA,SAAA,GAAY,yBAA0B,CAAA,GAAA,CAAI,YAAY,CAAA;AAC5D,MAAA,IAAI,YAAc,EAAA;AAChB,QAAM,MAAA,MAAA,GAAU,QAAgB,MAAO,CAAA,MAAA;AACvC,QAAM,MAAA,EAAE,OAAU,GAAA,MAAA;AAClB,QAAA,IAAI,UAAU,aAAe,EAAA;AAC3B,UAAO,MAAA,CAAA,oBAAA,CAAqB,OAAQ,CAAA,CAAC,IAAS,KAAA;AAC5C,YAAA,YAAA,CAAa,IAAI,IAAI,CAAA;AAAA,WACtB,CAAA;AAAA;AAGH,QAAA,IAAI,UAAU,WAAa,EAAA;AACzB,UAAO,MAAA,CAAA,iBAAA,GAAoB,OAAO,iBAAkB,CAAA,MAAA;AAAA,YAAO,CAAC,CAAA,KAC1D,YAAa,CAAA,GAAA,CAAI,CAAC;AAAA,WACpB;AAAA;AAGF,QAAA,IAAI,UAAU,UAAY,EAAA;AACxB,UAAa,YAAA,CAAA,GAAA,CAAI,OAAO,SAAS,CAAA;AACjC,UAAA,MAAM,OAAO,MAAO,CAAA,SAAA;AACpB,UAAM,MAAA,OAAA,GAAU,SAAU,CAAA,GAAA,CAAI,IAAI,CAAA;AAClC,UAAA,IAAI,OAAS,EAAA;AACX,YAAA,SAAA,CAAU,OAAO,IAAI,CAAA;AACrB,YAAA,KAAA,CAAM,OAAO,CAAA;AACb,YAAQ,OAAA,CAAA,OAAA,EAAU,CAAA,IAAA,CAAK,MAAM;AAC3B,cAAA,KAAA,CAAM,OAAO,CAAA;AAAA,aACd,CAAA;AACD,YAAA;AAAA;AACF;AAGF,QAAA,IAAI,UAAU,kBAAoB,EAAA;AAChC,UAAA,MAAM,OAAO,MAAO,CAAA,aAAA;AACpB,UAAA,IAAI,CAAC,YAAA,CAAa,GAAI,CAAA,IAAI,CAAG,EAAA;AAC3B,YAAA,yBAAA,CAA0B,GAAI,CAAA,YAAY,CAAG,CAAA,GAAA,CAAI,MAAM,OAAO,CAAA;AAC9D,YAAA;AAAA;AACF;AAGF,QAAA,IAAI,UAAU,MAAQ,EAAA;AACpB,UAAA,YAAA,CAAa,OAAO,YAAY,CAAA;AAChC,UAAA,yBAAA,CAA0B,OAAO,YAAY,CAAA;AAAA;AAC/C;AAEF,MAAA,KAAA,CAAM,OAAO,CAAA;AAAA;AACf,GACD,CAAA;AAED,EAAM,MAAA,IAAA,GAAO,CAAC,GAAa,KAAA;AACzB,IAAM,MAAA,KAAA,GAAQ,GAAI,CAAA,MAAA,CAAO,CAAC,CAAA;AAC1B,IAAA,QAAQ,IAAI,MAAQ;AAAA,MAClB,KAAK,SAAU,CAAA,MAAA;AACb,QAAqB,oBAAA,CAAA,GAAA,CAAI,IAAI,EAAE,CAAA;AAC/B,QAAA;AAAA,MAEF,KAAK,SAAU,CAAA,KAAA;AACb,QAAA,MAAM,CAAC,YAAA,EAAc,MAAM,CAAA,GAAI,GAAI,CAAA,MAAA;AACnC,QAAO,MAAA,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AACxB,UAAA,iBAAA,CAAkB,GAAI,CAAA,YAAY,CAAG,EAAA,MAAA,CAAO,KAAK,CAAA;AACjD,UAAA,yBAAA,CAA0B,GAAI,CAAA,YAAY,CAAG,EAAA,MAAA,CAAO,KAAK,CAAA;AAAA,SAC1D,CAAA;AACD,QAAA;AAAA,MAEF,KAAK,SAAU,CAAA,QAAA;AACb,QAAA,iBAAA,CAAkB,OAAO,KAAK,CAAA;AAC9B,QAAA,yBAAA,CAA0B,OAAO,KAAK,CAAA;AACtC,QAAA;AAAA;AAEJ,IAAA,YAAA,CAAa,GAAG,CAAA;AAAA,GAClB;AAEA,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA;AAAA,GACF;AACF;;;;"}