{"version":3,"file":"fix-unordered-events.mjs","sources":["../../../src/parsed-enhancers/fix-unordered-events.ts"],"sourcesContent":["import type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { chainHead } from \"@/methods\"\n\nconst terminalOperationEvents = new Set(\n  [\"BodyDone\", \"CallDone\", \"StorageDone\", \"Inaccessible\", \"Error\"].map(\n    (x) => \"operation\" + x,\n  ),\n)\nconst isTerminalNotification = (msg: any): boolean =>\n  terminalOperationEvents.has(msg.params?.result?.event)\n\nexport const fixUnorderedEvents: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const pendingChainHeadSubs = new Set<string>()\n  const pendingOperationIds: Map<string, string> = new Map()\n\n  const activeOperationIds = new Map<string, Set<string>>()\n  const uknownOperationNotifications = new Map<\n    string,\n    Map<string, Array<any>>\n  >()\n\n  const { send: originalSend, disconnect } = base((message) => {\n    // it's a response\n    if (\"id\" in message) {\n      onMsg(message)\n      const { id, result } = message as unknown as {\n        id: string\n        result: string\n      }\n      if (pendingChainHeadSubs.has(id)) {\n        pendingChainHeadSubs.delete(id)\n        activeOperationIds.set(result, new Set())\n        uknownOperationNotifications.set(result, new Map())\n        return\n      }\n\n      const subId = pendingOperationIds.get(id)\n      if (subId !== undefined) {\n        pendingOperationIds.delete(id)\n        const opId = (message as any).result?.operationId\n        // it's possible that the limit has been reached... so we need to check\n        // it's also possible that the response came after an unfollow\n        if (opId !== undefined && activeOperationIds.has(subId)) {\n          const subOperations = activeOperationIds.get(subId)!\n          subOperations.add(opId)\n          const pendingNotifications = uknownOperationNotifications\n            .get(subId)\n            ?.get(opId)\n\n          if (pendingNotifications) {\n            pendingNotifications.forEach(onMsg)\n            uknownOperationNotifications.get(subId)!.delete(opId)\n            if (isTerminalNotification(pendingNotifications.at(-1)))\n              subOperations.delete(opId)\n          }\n        }\n      }\n    } else {\n      // it's a notification\n      const { subscription, result } = (message as any).params\n      const operationIds = activeOperationIds.get(subscription)\n      if (operationIds) {\n        const { operationId } = (message as any).params.result\n        if (operationId !== undefined) {\n          if (!operationIds.has(operationId)) {\n            // The operationId hasn't arrived yet\n            const subscriptionPending =\n              uknownOperationNotifications.get(subscription)!\n            const pendingMessages = subscriptionPending.get(operationId) ?? []\n            pendingMessages.push(message)\n            subscriptionPending.set(operationId, pendingMessages)\n            return\n          } else if (isTerminalNotification(message))\n            operationIds.delete(operationId)\n        } else if (result?.event === \"stop\") {\n          activeOperationIds.delete(subscription)\n          uknownOperationNotifications.delete(subscription)\n        }\n      }\n      onMsg(message)\n    }\n  })\n\n  const send = (msg: any) => {\n    const subId = msg.params[0]\n    switch (msg.method) {\n      case chainHead.follow:\n        pendingChainHeadSubs.add(msg.id)\n        break\n\n      case chainHead.body:\n      case chainHead.call:\n      case chainHead.storage:\n        pendingOperationIds.set(msg.id, subId)\n        break\n\n      case chainHead.unfollow:\n        activeOperationIds.delete(subId)\n        uknownOperationNotifications.delete(subId)\n        break\n\n      case chainHead.stopOperation:\n        activeOperationIds.get(subId)?.delete(msg.params[1])\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n"],"names":[],"mappings":";;AAGA,MAAM,0BAA0B,IAAI,GAAA;AAAA,EAClC,CAAC,UAAY,EAAA,UAAA,EAAY,aAAe,EAAA,cAAA,EAAgB,OAAO,CAAE,CAAA,GAAA;AAAA,IAC/D,CAAC,MAAM,WAAc,GAAA;AAAA;AAEzB,CAAA;AACA,MAAM,sBAAA,GAAyB,CAAC,GAC9B,KAAA,uBAAA,CAAwB,IAAI,GAAI,CAAA,MAAA,EAAQ,QAAQ,KAAK,CAAA;AAEhD,MAAM,kBAA4C,GAAA,CAAC,IAAS,KAAA,CAAC,KAAU,KAAA;AAC5E,EAAM,MAAA,oBAAA,uBAA2B,GAAY,EAAA;AAC7C,EAAM,MAAA,mBAAA,uBAA+C,GAAI,EAAA;AAEzD,EAAM,MAAA,kBAAA,uBAAyB,GAAyB,EAAA;AACxD,EAAM,MAAA,4BAAA,uBAAmC,GAGvC,EAAA;AAEF,EAAA,MAAM,EAAE,IAAM,EAAA,YAAA,EAAc,YAAe,GAAA,IAAA,CAAK,CAAC,OAAY,KAAA;AAE3D,IAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,MAAA,KAAA,CAAM,OAAO,CAAA;AACb,MAAM,MAAA,EAAE,EAAI,EAAA,MAAA,EAAW,GAAA,OAAA;AAIvB,MAAI,IAAA,oBAAA,CAAqB,GAAI,CAAA,EAAE,CAAG,EAAA;AAChC,QAAA,oBAAA,CAAqB,OAAO,EAAE,CAAA;AAC9B,QAAA,kBAAA,CAAmB,GAAI,CAAA,MAAA,kBAAY,IAAA,GAAA,EAAK,CAAA;AACxC,QAAA,4BAAA,CAA6B,GAAI,CAAA,MAAA,kBAAY,IAAA,GAAA,EAAK,CAAA;AAClD,QAAA;AAAA;AAGF,MAAM,MAAA,KAAA,GAAQ,mBAAoB,CAAA,GAAA,CAAI,EAAE,CAAA;AACxC,MAAA,IAAI,UAAU,MAAW,EAAA;AACvB,QAAA,mBAAA,CAAoB,OAAO,EAAE,CAAA;AAC7B,QAAM,MAAA,IAAA,GAAQ,QAAgB,MAAQ,EAAA,WAAA;AAGtC,QAAA,IAAI,IAAS,KAAA,MAAA,IAAa,kBAAmB,CAAA,GAAA,CAAI,KAAK,CAAG,EAAA;AACvD,UAAM,MAAA,aAAA,GAAgB,kBAAmB,CAAA,GAAA,CAAI,KAAK,CAAA;AAClD,UAAA,aAAA,CAAc,IAAI,IAAI,CAAA;AACtB,UAAA,MAAM,uBAAuB,4BAC1B,CAAA,GAAA,CAAI,KAAK,CAAA,EACR,IAAI,IAAI,CAAA;AAEZ,UAAA,IAAI,oBAAsB,EAAA;AACxB,YAAA,oBAAA,CAAqB,QAAQ,KAAK,CAAA;AAClC,YAAA,4BAAA,CAA6B,GAAI,CAAA,KAAK,CAAG,CAAA,MAAA,CAAO,IAAI,CAAA;AACpD,YAAA,IAAI,sBAAuB,CAAA,oBAAA,CAAqB,EAAG,CAAA,EAAE,CAAC,CAAA;AACpD,cAAA,aAAA,CAAc,OAAO,IAAI,CAAA;AAAA;AAC7B;AACF;AACF,KACK,MAAA;AAEL,MAAA,MAAM,EAAE,YAAA,EAAc,MAAO,EAAA,GAAK,OAAgB,CAAA,MAAA;AAClD,MAAM,MAAA,YAAA,GAAe,kBAAmB,CAAA,GAAA,CAAI,YAAY,CAAA;AACxD,MAAA,IAAI,YAAc,EAAA;AAChB,QAAA,MAAM,EAAE,WAAA,EAAiB,GAAA,OAAA,CAAgB,MAAO,CAAA,MAAA;AAChD,QAAA,IAAI,gBAAgB,MAAW,EAAA;AAC7B,UAAA,IAAI,CAAC,YAAA,CAAa,GAAI,CAAA,WAAW,CAAG,EAAA;AAElC,YAAM,MAAA,mBAAA,GACJ,4BAA6B,CAAA,GAAA,CAAI,YAAY,CAAA;AAC/C,YAAA,MAAM,eAAkB,GAAA,mBAAA,CAAoB,GAAI,CAAA,WAAW,KAAK,EAAC;AACjE,YAAA,eAAA,CAAgB,KAAK,OAAO,CAAA;AAC5B,YAAoB,mBAAA,CAAA,GAAA,CAAI,aAAa,eAAe,CAAA;AACpD,YAAA;AAAA,WACF,MAAA,IAAW,uBAAuB,OAAO,CAAA;AACvC,YAAA,YAAA,CAAa,OAAO,WAAW,CAAA;AAAA,SACnC,MAAA,IAAW,MAAQ,EAAA,KAAA,KAAU,MAAQ,EAAA;AACnC,UAAA,kBAAA,CAAmB,OAAO,YAAY,CAAA;AACtC,UAAA,4BAAA,CAA6B,OAAO,YAAY,CAAA;AAAA;AAClD;AAEF,MAAA,KAAA,CAAM,OAAO,CAAA;AAAA;AACf,GACD,CAAA;AAED,EAAM,MAAA,IAAA,GAAO,CAAC,GAAa,KAAA;AACzB,IAAM,MAAA,KAAA,GAAQ,GAAI,CAAA,MAAA,CAAO,CAAC,CAAA;AAC1B,IAAA,QAAQ,IAAI,MAAQ;AAAA,MAClB,KAAK,SAAU,CAAA,MAAA;AACb,QAAqB,oBAAA,CAAA,GAAA,CAAI,IAAI,EAAE,CAAA;AAC/B,QAAA;AAAA,MAEF,KAAK,SAAU,CAAA,IAAA;AAAA,MACf,KAAK,SAAU,CAAA,IAAA;AAAA,MACf,KAAK,SAAU,CAAA,OAAA;AACb,QAAoB,mBAAA,CAAA,GAAA,CAAI,GAAI,CAAA,EAAA,EAAI,KAAK,CAAA;AACrC,QAAA;AAAA,MAEF,KAAK,SAAU,CAAA,QAAA;AACb,QAAA,kBAAA,CAAmB,OAAO,KAAK,CAAA;AAC/B,QAAA,4BAAA,CAA6B,OAAO,KAAK,CAAA;AACzC,QAAA;AAAA,MAEF,KAAK,SAAU,CAAA,aAAA;AACb,QAAA,kBAAA,CAAmB,IAAI,KAAK,CAAA,EAAG,OAAO,GAAI,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA;AAAA;AAEvD,IAAA,YAAA,CAAa,GAAG,CAAA;AAAA,GAClB;AAEA,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA;AAAA,GACF;AACF;;;;"}