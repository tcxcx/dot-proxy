{"version":3,"file":"fix-descendant-values.mjs","sources":["../../../src/parsed-enhancers/fix-descendant-values.ts"],"sourcesContent":["import { chainHead } from \"@/methods\"\nimport type { ParsedJsonRpcEnhancer } from \"@/parsed\"\nimport { getRequest, jsonObj, operationNotification } from \"@/utils\"\n\nconst operationPrefix = \"__INNER_OP_DesV\"\nlet nextOperationId = 0\nexport const fixDescendantValues: ParsedJsonRpcEnhancer = (base) => (onMsg) => {\n  const [provider, request] = getRequest(base)\n  const getDescendantValues = getDescendantValuesFromOldRpc(request)\n\n  // the `id` of the json-rpc request that should respond with the `operationId`\n  // if it has started, the value is the callback-function that is waiting for the `operationId`\n  const preOpId = new Map<string, (operationId: string) => void>()\n\n  // chainHeadSubscription - operationId => operationState\n  const onGoing: Map<\n    string,\n    Map<\n      string,\n      {\n        isOutterDone: boolean\n        isInnerDone: boolean\n        cancel: () => void\n      }\n    >\n  > = new Map()\n\n  const { send: originalSend, disconnect } = provider((msg: any) => {\n    // it's a response\n    if (\"id\" in msg) {\n      const opIdCb = preOpId.get(msg.id)\n      if (opIdCb) {\n        preOpId.delete(msg.id)\n        if (msg.result.result === \"started\") opIdCb(msg.result.operationId)\n      }\n    } else if (msg.params) {\n      // it's a notifiaction\n      const { subscription, result } = (msg as any).params\n      const { operationId } = result || {}\n      const operations = onGoing.get(subscription)\n\n      if (operations && result.event === \"stop\") {\n        operations.forEach((x) => {\n          x.cancel()\n        })\n        onGoing.delete(subscription)\n      }\n\n      const operation = operations?.get(operationId)\n      if (operation) {\n        switch (result.event) {\n          case \"operationInaccessible\":\n          case \"operationError\":\n            operation.cancel()\n            break\n          case \"operationStorageDone\": {\n            if (operation.isInnerDone) {\n              operations!.delete(operationId)\n            } else {\n              operation.isOutterDone = true\n              return\n            }\n          }\n        }\n      }\n    }\n    onMsg(msg)\n  })\n\n  const getStartDescendantValues =\n    (subscription: string, blockHash: string, keys: string[]) =>\n    (operationId: string) => {\n      let _cancel = () => {}\n      if (!onGoing.has(subscription)) {\n        onGoing.set(subscription, new Map())\n      }\n      const operationsMap = onGoing.get(subscription)!\n      const state = {\n        isOutterDone: false,\n        isInnerDone: false,\n        cancel: () => {\n          _cancel()\n        },\n      }\n      operationsMap.set(operationId, state)\n\n      let nFinished = 0\n      const stoppers = keys.map((key) =>\n        getDescendantValues(\n          key,\n          blockHash,\n          (values) => {\n            onMsg(\n              operationNotification(\n                subscription,\n                \"operationStorageItems\",\n                operationId,\n                { items: values.map(([key, value]) => ({ key, value })) },\n              ),\n            )\n          },\n          (error) => {\n            _cancel()\n            if (!state.isOutterDone) {\n              // stop the outer\n              originalSend(\n                jsonObj({\n                  method: \"chainHead_v1_stopOperation\",\n                  params: [operationId],\n                }),\n              )\n            }\n            // send error\n            onMsg(\n              operationNotification(\n                subscription,\n                \"operationError\",\n                operationId,\n                {\n                  error:\n                    typeof error === \"string\" ? error : JSON.stringify(error),\n                },\n              ),\n            )\n          },\n          () => {\n            if (++nFinished === keys.length) {\n              if (state.isOutterDone) {\n                // done\n                _cancel()\n                onMsg(\n                  operationNotification(\n                    subscription,\n                    \"operationStorageDone\",\n                    operationId,\n                  ),\n                )\n              } else state.isInnerDone = true\n            }\n          },\n        ),\n      )\n      _cancel = () => {\n        operationsMap.delete(operationId)\n        stoppers.forEach((cb) => cb())\n      }\n    }\n\n  const send = (msg: any) => {\n    switch (msg.method) {\n      case chainHead.storage: {\n        const [followSub, blockHash, items] = msg.params as [\n          string,\n          string,\n          any[],\n        ]\n        const descendantsValuesKeys: string[] = []\n        const actualItems = items.filter((x) => {\n          const isDescendantsValues = x.type === \"descendantsValues\"\n          if (isDescendantsValues) descendantsValuesKeys.push(x.key)\n          return !isDescendantsValues\n        })\n\n        const startGetDescendantValues = getStartDescendantValues(\n          followSub,\n          blockHash,\n          descendantsValuesKeys,\n        )\n        if (!actualItems.length) {\n          const operationId = operationPrefix + nextOperationId++\n          onMsg(\n            jsonObj({\n              id: msg.id,\n              result: { result: \"started\", operationId },\n            }),\n          )\n          startGetDescendantValues(operationId)\n          onGoing.get(followSub)!.get(operationId)!.isOutterDone = true\n          return\n        } else if (descendantsValuesKeys.length) {\n          preOpId.set(msg.id, startGetDescendantValues)\n        }\n        msg.params[2] = actualItems\n        break\n      }\n      case chainHead.stopOperation: {\n        const [followSubscription, operationId] = msg.params as [string, string]\n        const data = onGoing.get(followSubscription)?.get(operationId)\n        if (data) {\n          data.cancel()\n          if (data.isOutterDone) return\n        }\n        break\n      }\n      case chainHead.unfollow: {\n        const [followSubscription] = msg.params as [string]\n        onGoing.get(followSubscription)?.forEach((x) => x.cancel())\n        onGoing.delete(followSubscription)\n        break\n      }\n    }\n    originalSend(msg)\n  }\n\n  return {\n    send,\n    disconnect,\n  }\n}\n\n/**\n * A higher-order function that returns a process to fetch descendant values\n * from the storage of block using an older RPC method.\n *\n * This function takes a `request` function as an argument, which is used to\n * make RPC calls. The returned function accepts a storage key (`rootKey`) and a\n * block hash (`at`) as inputs, as well as three callbacks:\n * 1. `onValues`: triggered when new values are retrieved.\n * 2. `onError`: triggered in case of an error during the operation.\n * 3. `onDone`: triggered when all values have been successfully fetched.\n *\n * The operation works by paginating through storage keys using\n * `state_getKeysPaged`\n * and fetching the corresponding values using `state_queryStorageAt`.\n * It runs in the background and supports stopping the operation early by\n * returning a callback function that, when invoked, cancels further processing.\n *\n * The flow of execution:\n * - The function continuously fetches storage keys in batches.\n * - For each batch, it fetches the descendant values at the specified block\n * hash.\n * - If an error occurs or the user cancels the operation, it stops fetching.\n * - The `onDone` callback is triggered when all the keys have been processed\n * and all ongoing value retrieval operations are completed.\n */\nconst getDescendantValuesFromOldRpc =\n  (\n    request: <T>(\n      method: string,\n      args: Array<any>,\n      onSuccess: (value: T) => void,\n      onError: (e: any) => void,\n    ) => void,\n  ) =>\n  (\n    rootKey: string,\n    at: string,\n    onValues: (input: Array<[string, string]>) => void,\n    onError: (e: any) => void,\n    onDone: () => void,\n  ): (() => void) => {\n    let isRunning = true\n    let areAllKeysDone = false\n    let onGoingValues = 0\n\n    const _onError = (e: any) => {\n      if (isRunning) {\n        isRunning = false\n        onError(e)\n      }\n    }\n\n    const PAGE_SIZE = 1000\n    const pullKeys = (startAtKey?: string) => {\n      request<string[]>(\n        \"state_getKeysPaged\",\n        [rootKey, PAGE_SIZE, startAtKey || undefined, at],\n        (result) => {\n          if (isRunning) {\n            if (result.length > 0) {\n              onGoingValues++\n              request<[{ block: string; changes: Array<[string, string]> }]>(\n                \"state_queryStorageAt\",\n                [result, at],\n                ([{ changes }]) => {\n                  if (isRunning) {\n                    onGoingValues--\n                    onValues(changes)\n                    if (areAllKeysDone && !onGoingValues) onDone()\n                  }\n                },\n                _onError,\n              )\n            }\n            if (result.length < PAGE_SIZE) {\n              areAllKeysDone = true\n              if (!onGoingValues) onDone()\n            } else pullKeys(result.at(-1))\n          }\n        },\n        _onError,\n      )\n    }\n    pullKeys()\n\n    return () => {\n      isRunning = false\n    }\n  }\n"],"names":["key"],"mappings":"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"}