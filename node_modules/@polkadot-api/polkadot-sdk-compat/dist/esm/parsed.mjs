const toParsed = (base) => {
  let _onMsg = null;
  const { send, disconnect } = base((msg) => {
    _onMsg?.(JSON.parse(msg));
  });
  return (onMsg) => {
    _onMsg = onMsg;
    return {
      send(msg) {
        send(JSON.stringify(msg));
      },
      disconnect() {
        _onMsg = null;
        disconnect();
      }
    };
  };
};
const fromParsed = (base) => {
  let _onMsg = null;
  const { send, disconnect } = base((msg) => {
    _onMsg?.(JSON.stringify(msg));
  });
  return (onMsg) => {
    _onMsg = onMsg;
    return {
      send(msg) {
        send(JSON.parse(msg));
      },
      disconnect() {
        _onMsg = null;
        disconnect();
      }
    };
  };
};
const parsed = (...enhancers) => (base) => fromParsed(enhancers.reduce((a, b) => b(a), toParsed(base)));

export { fromParsed, parsed, toParsed };
//# sourceMappingURL=parsed.mjs.map
