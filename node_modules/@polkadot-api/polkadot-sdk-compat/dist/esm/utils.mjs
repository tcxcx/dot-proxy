const jsonObj = (input) => ({
  jsonrpc: "2.0",
  ...input
});
const operationNotification = (subscription, event, operationId, innerResult = {}) => jsonObj({
  method: "chainHead_v1_followEvent",
  params: {
    subscription,
    result: {
      event,
      operationId,
      ...innerResult
    }
  }
});
const requestPrefix = "__INNER_RQ_DesV";
const getRequest = (base) => {
  let nextId = 0;
  const onGoingRequests = /* @__PURE__ */ new Map();
  const listener = ({ id, error, result }) => {
    const callback = onGoingRequests.get(id);
    if (callback) {
      onGoingRequests.delete(id);
      if (error) callback(false, error);
      else callback(true, result);
    }
    return !callback;
  };
  let send = () => {
  };
  const provider = (onMsg) => {
    const { send: _send, disconnect } = base((msg) => {
      if (listener(msg)) onMsg(msg);
    });
    send = _send;
    return {
      send,
      disconnect: () => {
        onGoingRequests.clear();
        disconnect();
      }
    };
  };
  const request = (method, params, onSuccess, onError) => {
    const id = requestPrefix + nextId++;
    onGoingRequests.set(id, (isOk, value) => {
      (isOk ? onSuccess : onError)(value);
    });
    send(jsonObj({ id, method, params }));
  };
  return [provider, request];
};

export { getRequest, jsonObj, operationNotification };
//# sourceMappingURL=utils.mjs.map
