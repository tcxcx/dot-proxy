{"version":3,"file":"index.js","sources":["../src/pjs-signed-extensions-mappers.ts","../src/from-pjs-account.ts","../src/injected-extensions.ts"],"sourcesContent":["import { HexString } from \"@polkadot-api/substrate-bindings\"\nimport {\n  Bytes,\n  Struct,\n  compact,\n  u32,\n  Option,\n  compactBn,\n} from \"@polkadot-api/substrate-bindings\"\nimport { toHex } from \"@polkadot-api/utils\"\n\ntype SignedExtension = {\n  value: Uint8Array\n  additionalSigned: Uint8Array\n}\n\nconst toPjsHex = (value: number | bigint, minByteLen?: number) => {\n  let inner = value.toString(16)\n  inner = (inner.length % 2 ? \"0\" : \"\") + inner\n  const nPaddedBytes = Math.max(0, (minByteLen || 0) - inner.length / 2)\n  return \"0x\" + \"00\".repeat(nPaddedBytes) + inner\n}\n\nexport const CheckGenesis = ({\n  additionalSigned,\n}: SignedExtension): { genesisHash: string } => ({\n  genesisHash: toHex(additionalSigned),\n})\n\nexport const CheckNonce = ({\n  value,\n}: SignedExtension): { nonce: HexString } => {\n  // nonce is a u32 in pjs => 4 bytes\n  return { nonce: toPjsHex(compact.dec(value), 4) }\n}\n\nexport const CheckTxVersion = ({\n  additionalSigned,\n}: SignedExtension): { transactionVersion: HexString } => {\n  return { transactionVersion: toPjsHex(u32.dec(additionalSigned), 4) }\n}\n\nconst assetTxPaymentDec = Struct({\n  tip: compact,\n  asset: Option(Bytes(Infinity)),\n}).dec\n\nexport const ChargeAssetTxPayment = ({\n  value,\n}: SignedExtension): { aseetId?: string; tip?: string } => {\n  const { tip, asset } = assetTxPaymentDec(value)\n\n  return {\n    ...(asset ? { assetId: toHex(asset) } : {}),\n    tip: toPjsHex(tip, 16),\n  }\n}\n\nexport const ChargeTransactionPayment = ({\n  value,\n}: SignedExtension): { tip: HexString } => ({\n  tip: toPjsHex(compactBn.dec(value), 16), // u128 => 16 bytes\n})\n\nexport const CheckMortality = (\n  { value, additionalSigned }: SignedExtension,\n  blockNumber: number,\n): { era: HexString; blockHash: HexString; blockNumber: HexString } => ({\n  era: toHex(value),\n  blockHash: toHex(additionalSigned),\n  blockNumber: toPjsHex(blockNumber, 4),\n})\n\nexport const CheckSpecVersion = ({\n  additionalSigned,\n}: SignedExtension): { specVersion: HexString } => ({\n  specVersion: toPjsHex(u32.dec(additionalSigned), 4),\n})\n\nexport const CheckMetadataHash = ({\n  value,\n  additionalSigned,\n}: SignedExtension): { mode?: number; metadataHash?: HexString } =>\n  value.length && value[0]\n    ? {\n        mode: 1,\n        metadataHash: toHex(\n          additionalSigned.length\n            ? additionalSigned.slice(1)\n            : additionalSigned,\n        ),\n      }\n    : {}\n","import type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { createV4Tx } from \"@polkadot-api/signers-common\"\nimport {\n  AccountId,\n  Blake2256,\n  type V14,\n  type V15,\n  decAnyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\nimport * as signedExtensionMappers from \"./pjs-signed-extensions-mappers\"\nimport { SignPayload, SignRaw, SignerPayloadJSON } from \"./types\"\n\nconst accountIdEnc = AccountId().enc\nconst getPublicKey = (address: string) =>\n  address.startsWith(\"0x\") ? fromHex(address) : accountIdEnc(address)\n\nexport function getPolkadotSignerFromPjs(\n  address: string,\n  signPayload: SignPayload,\n  signRaw: SignRaw,\n): PolkadotSigner {\n  const signBytes = (data: Uint8Array) =>\n    signRaw({\n      address,\n      data: toHex(data),\n      type: \"bytes\",\n    }).then(({ signature }) => fromHex(signature))\n  const publicKey = getPublicKey(address)\n  const signTx = async (\n    callData: Uint8Array,\n    signedExtensions: Record<\n      string,\n      {\n        identifier: string\n        value: Uint8Array\n        additionalSigned: Uint8Array\n      }\n    >,\n    metadata: Uint8Array,\n    atBlockNumber: number,\n    _ = Blake2256,\n  ) => {\n    let decMeta: V14 | V15\n    try {\n      const tmpMeta = decAnyMetadata(metadata)\n      if (tmpMeta.metadata.tag !== \"v14\" && tmpMeta.metadata.tag !== \"v15\")\n        throw null\n      decMeta = tmpMeta.metadata.value\n    } catch (_) {\n      throw new Error(\"Unsupported metadata version\")\n    }\n\n    const pjs: Partial<SignerPayloadJSON> = {}\n    pjs.signedExtensions = []\n\n    const { version } = decMeta.extrinsic\n    const extra: Array<Uint8Array> = []\n\n    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {\n      const signedExtension = signedExtensions[identifier]\n      if (!signedExtension)\n        throw new Error(`Missing ${identifier} signed-extension`)\n      extra.push(signedExtension.value)\n\n      pjs.signedExtensions!.push(identifier)\n\n      if (!signedExtensionMappers[identifier as \"CheckMortality\"]) {\n        if (\n          signedExtension.value.length === 0 &&\n          signedExtension.additionalSigned.length === 0\n        )\n          return\n        throw new Error(\n          `PJS does not support this signed-extension: ${identifier}`,\n        )\n      }\n\n      Object.assign(\n        pjs,\n        signedExtensionMappers[identifier as \"CheckMortality\"](\n          signedExtension,\n          atBlockNumber,\n        ),\n      )\n    })\n\n    pjs.address = address\n    pjs.method = toHex(callData)\n    pjs.version = version\n    pjs.withSignedTransaction = true // we allow the wallet to change the payload\n\n    const result = await signPayload(pjs as SignerPayloadJSON)\n    const tx = result.signedTransaction\n    if (tx) return typeof tx === \"string\" ? fromHex(tx) : tx\n\n    return createV4Tx(\n      decMeta,\n      publicKey,\n      fromHex(result.signature),\n      extra,\n      callData,\n    )\n  }\n\n  return { publicKey, signTx, signBytes }\n}\n","import { getPolkadotSignerFromPjs } from \"./from-pjs-account\"\nimport type {\n  InjectedAccount,\n  InjectedExtension,\n  InjectedPolkadotAccount,\n  KeypairType,\n} from \"./types\"\n\nexport type {\n  KeypairType,\n  InjectedExtension,\n  InjectedAccount,\n  InjectedPolkadotAccount,\n}\n\nconst supportedAccountTypes = new Set<KeypairType | \"ethereum\">([\n  \"ed25519\",\n  \"sr25519\",\n  \"ecdsa\",\n  \"ethereum\",\n])\n\nexport const connectInjectedExtension = async (\n  name: string,\n  dappName?: string,\n): Promise<InjectedExtension> => {\n  let entry = window.injectedWeb3?.[name]\n\n  if (!entry) throw new Error(`Unavailable extension: \"${name}\"`)\n\n  const enabledExtension = await entry.enable(dappName)\n  const signPayload = enabledExtension.signer.signPayload.bind(\n    enabledExtension.signer,\n  )\n  const signRaw = enabledExtension.signer.signRaw.bind(enabledExtension.signer)\n\n  const toPolkadotInjected = (\n    accounts: InjectedAccount[],\n  ): InjectedPolkadotAccount[] =>\n    accounts\n      .filter(({ type }) => supportedAccountTypes.has(type!))\n      .map((x) => {\n        const polkadotSigner = getPolkadotSignerFromPjs(\n          x.address,\n          signPayload,\n          signRaw,\n        )\n        return {\n          ...x,\n          polkadotSigner,\n        }\n      })\n\n  let currentAccounts: InjectedPolkadotAccount[] = toPolkadotInjected(\n    await enabledExtension.accounts.get(),\n  )\n\n  const listeners = new Set<(accounts: InjectedPolkadotAccount[]) => void>()\n  const stop = enabledExtension.accounts.subscribe((x) => {\n    currentAccounts = toPolkadotInjected(x)\n    listeners.forEach((cb) => {\n      cb(currentAccounts)\n    })\n  })\n\n  return {\n    name,\n    getAccounts: () => currentAccounts,\n    subscribe: (cb: (accounts: InjectedPolkadotAccount[]) => void) => {\n      listeners.add(cb)\n      return () => {\n        listeners.delete(cb)\n      }\n    },\n    disconnect: () => {\n      stop()\n    },\n  }\n}\n\nexport const getInjectedExtensions = (): Array<string> => {\n  const { injectedWeb3 } = window\n  return injectedWeb3 ? Object.keys(injectedWeb3) : []\n}\n"],"names":["toHex","compact","u32","Struct","Option","Bytes","compactBn","AccountId","fromHex","Blake2256","decAnyMetadata","_","createV4Tx"],"mappings":"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"}