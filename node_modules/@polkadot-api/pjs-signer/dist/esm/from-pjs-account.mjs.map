{"version":3,"file":"from-pjs-account.mjs","sources":["../../src/from-pjs-account.ts"],"sourcesContent":["import type { PolkadotSigner } from \"@polkadot-api/polkadot-signer\"\nimport { createV4Tx } from \"@polkadot-api/signers-common\"\nimport {\n  AccountId,\n  Blake2256,\n  type V14,\n  type V15,\n  decAnyMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { fromHex, toHex } from \"@polkadot-api/utils\"\nimport * as signedExtensionMappers from \"./pjs-signed-extensions-mappers\"\nimport { SignPayload, SignRaw, SignerPayloadJSON } from \"./types\"\n\nconst accountIdEnc = AccountId().enc\nconst getPublicKey = (address: string) =>\n  address.startsWith(\"0x\") ? fromHex(address) : accountIdEnc(address)\n\nexport function getPolkadotSignerFromPjs(\n  address: string,\n  signPayload: SignPayload,\n  signRaw: SignRaw,\n): PolkadotSigner {\n  const signBytes = (data: Uint8Array) =>\n    signRaw({\n      address,\n      data: toHex(data),\n      type: \"bytes\",\n    }).then(({ signature }) => fromHex(signature))\n  const publicKey = getPublicKey(address)\n  const signTx = async (\n    callData: Uint8Array,\n    signedExtensions: Record<\n      string,\n      {\n        identifier: string\n        value: Uint8Array\n        additionalSigned: Uint8Array\n      }\n    >,\n    metadata: Uint8Array,\n    atBlockNumber: number,\n    _ = Blake2256,\n  ) => {\n    let decMeta: V14 | V15\n    try {\n      const tmpMeta = decAnyMetadata(metadata)\n      if (tmpMeta.metadata.tag !== \"v14\" && tmpMeta.metadata.tag !== \"v15\")\n        throw null\n      decMeta = tmpMeta.metadata.value\n    } catch (_) {\n      throw new Error(\"Unsupported metadata version\")\n    }\n\n    const pjs: Partial<SignerPayloadJSON> = {}\n    pjs.signedExtensions = []\n\n    const { version } = decMeta.extrinsic\n    const extra: Array<Uint8Array> = []\n\n    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {\n      const signedExtension = signedExtensions[identifier]\n      if (!signedExtension)\n        throw new Error(`Missing ${identifier} signed-extension`)\n      extra.push(signedExtension.value)\n\n      pjs.signedExtensions!.push(identifier)\n\n      if (!signedExtensionMappers[identifier as \"CheckMortality\"]) {\n        if (\n          signedExtension.value.length === 0 &&\n          signedExtension.additionalSigned.length === 0\n        )\n          return\n        throw new Error(\n          `PJS does not support this signed-extension: ${identifier}`,\n        )\n      }\n\n      Object.assign(\n        pjs,\n        signedExtensionMappers[identifier as \"CheckMortality\"](\n          signedExtension,\n          atBlockNumber,\n        ),\n      )\n    })\n\n    pjs.address = address\n    pjs.method = toHex(callData)\n    pjs.version = version\n    pjs.withSignedTransaction = true // we allow the wallet to change the payload\n\n    const result = await signPayload(pjs as SignerPayloadJSON)\n    const tx = result.signedTransaction\n    if (tx) return typeof tx === \"string\" ? fromHex(tx) : tx\n\n    return createV4Tx(\n      decMeta,\n      publicKey,\n      fromHex(result.signature),\n      extra,\n      callData,\n    )\n  }\n\n  return { publicKey, signTx, signBytes }\n}\n"],"names":["_","signedExtensionMappers"],"mappings":"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"}