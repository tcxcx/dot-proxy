{"version":3,"file":"injected-extensions.mjs","sources":["../../src/injected-extensions.ts"],"sourcesContent":["import { getPolkadotSignerFromPjs } from \"./from-pjs-account\"\nimport type {\n  InjectedAccount,\n  InjectedExtension,\n  InjectedPolkadotAccount,\n  KeypairType,\n} from \"./types\"\n\nexport type {\n  KeypairType,\n  InjectedExtension,\n  InjectedAccount,\n  InjectedPolkadotAccount,\n}\n\nconst supportedAccountTypes = new Set<KeypairType | \"ethereum\">([\n  \"ed25519\",\n  \"sr25519\",\n  \"ecdsa\",\n  \"ethereum\",\n])\n\nexport const connectInjectedExtension = async (\n  name: string,\n  dappName?: string,\n): Promise<InjectedExtension> => {\n  let entry = window.injectedWeb3?.[name]\n\n  if (!entry) throw new Error(`Unavailable extension: \"${name}\"`)\n\n  const enabledExtension = await entry.enable(dappName)\n  const signPayload = enabledExtension.signer.signPayload.bind(\n    enabledExtension.signer,\n  )\n  const signRaw = enabledExtension.signer.signRaw.bind(enabledExtension.signer)\n\n  const toPolkadotInjected = (\n    accounts: InjectedAccount[],\n  ): InjectedPolkadotAccount[] =>\n    accounts\n      .filter(({ type }) => supportedAccountTypes.has(type!))\n      .map((x) => {\n        const polkadotSigner = getPolkadotSignerFromPjs(\n          x.address,\n          signPayload,\n          signRaw,\n        )\n        return {\n          ...x,\n          polkadotSigner,\n        }\n      })\n\n  let currentAccounts: InjectedPolkadotAccount[] = toPolkadotInjected(\n    await enabledExtension.accounts.get(),\n  )\n\n  const listeners = new Set<(accounts: InjectedPolkadotAccount[]) => void>()\n  const stop = enabledExtension.accounts.subscribe((x) => {\n    currentAccounts = toPolkadotInjected(x)\n    listeners.forEach((cb) => {\n      cb(currentAccounts)\n    })\n  })\n\n  return {\n    name,\n    getAccounts: () => currentAccounts,\n    subscribe: (cb: (accounts: InjectedPolkadotAccount[]) => void) => {\n      listeners.add(cb)\n      return () => {\n        listeners.delete(cb)\n      }\n    },\n    disconnect: () => {\n      stop()\n    },\n  }\n}\n\nexport const getInjectedExtensions = (): Array<string> => {\n  const { injectedWeb3 } = window\n  return injectedWeb3 ? Object.keys(injectedWeb3) : []\n}\n"],"names":[],"mappings":";;AAeA,MAAM,qBAAA,uBAA4B,GAA8B,CAAA;AAAA,EAC9D,SAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA;AACF,CAAC,CAAA;AAEY,MAAA,wBAAA,GAA2B,OACtC,IAAA,EACA,QAC+B,KAAA;AAC/B,EAAI,IAAA,KAAA,GAAQ,MAAO,CAAA,YAAA,GAAe,IAAI,CAAA;AAEtC,EAAA,IAAI,CAAC,KAAO,EAAA,MAAM,IAAI,KAAM,CAAA,CAAA,wBAAA,EAA2B,IAAI,CAAG,CAAA,CAAA,CAAA;AAE9D,EAAA,MAAM,gBAAmB,GAAA,MAAM,KAAM,CAAA,MAAA,CAAO,QAAQ,CAAA;AACpD,EAAM,MAAA,WAAA,GAAc,gBAAiB,CAAA,MAAA,CAAO,WAAY,CAAA,IAAA;AAAA,IACtD,gBAAiB,CAAA;AAAA,GACnB;AACA,EAAA,MAAM,UAAU,gBAAiB,CAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,iBAAiB,MAAM,CAAA;AAE5E,EAAA,MAAM,qBAAqB,CACzB,QAAA,KAEA,QACG,CAAA,MAAA,CAAO,CAAC,EAAE,IAAA,EAAW,KAAA,qBAAA,CAAsB,IAAI,IAAK,CAAC,CACrD,CAAA,GAAA,CAAI,CAAC,CAAM,KAAA;AACV,IAAA,MAAM,cAAiB,GAAA,wBAAA;AAAA,MACrB,CAAE,CAAA,OAAA;AAAA,MACF,WAAA;AAAA,MACA;AAAA,KACF;AACA,IAAO,OAAA;AAAA,MACL,GAAG,CAAA;AAAA,MACH;AAAA,KACF;AAAA,GACD,CAAA;AAEL,EAAA,IAAI,eAA6C,GAAA,kBAAA;AAAA,IAC/C,MAAM,gBAAiB,CAAA,QAAA,CAAS,GAAI;AAAA,GACtC;AAEA,EAAM,MAAA,SAAA,uBAAgB,GAAmD,EAAA;AACzE,EAAA,MAAM,IAAO,GAAA,gBAAA,CAAiB,QAAS,CAAA,SAAA,CAAU,CAAC,CAAM,KAAA;AACtD,IAAA,eAAA,GAAkB,mBAAmB,CAAC,CAAA;AACtC,IAAU,SAAA,CAAA,OAAA,CAAQ,CAAC,EAAO,KAAA;AACxB,MAAA,EAAA,CAAG,eAAe,CAAA;AAAA,KACnB,CAAA;AAAA,GACF,CAAA;AAED,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA,aAAa,MAAM,eAAA;AAAA,IACnB,SAAA,EAAW,CAAC,EAAsD,KAAA;AAChE,MAAA,SAAA,CAAU,IAAI,EAAE,CAAA;AAChB,MAAA,OAAO,MAAM;AACX,QAAA,SAAA,CAAU,OAAO,EAAE,CAAA;AAAA,OACrB;AAAA,KACF;AAAA,IACA,YAAY,MAAM;AAChB,MAAK,IAAA,EAAA;AAAA;AACP,GACF;AACF;AAEO,MAAM,wBAAwB,MAAqB;AACxD,EAAM,MAAA,EAAE,cAAiB,GAAA,MAAA;AACzB,EAAA,OAAO,YAAe,GAAA,MAAA,CAAO,IAAK,CAAA,YAAY,IAAI,EAAC;AACrD;;;;"}