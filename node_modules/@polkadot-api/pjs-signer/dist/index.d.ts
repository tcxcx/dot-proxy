import { PolkadotSigner } from '@polkadot-api/polkadot-signer';
export { PolkadotSigner } from '@polkadot-api/polkadot-signer';

declare global {
    interface Window {
        injectedWeb3?: InjectedWeb3;
    }
}
type HexString = string;
interface SignerPayloadJSON {
    /**
     * The ss-58 encoded address.
     */
    address: string;
    /**
     * The id of the asset used to pay fees, in hex.
     */
    assetId?: number | object;
    /**
     * The checkpoint hash of the block, in hex.
     */
    blockHash: HexString;
    /**
     * The checkpoint block number, in hex.
     */
    blockNumber: HexString;
    /**
     * The era for this transaction, in hex.
     */
    era: HexString;
    /**
     * The genesis hash of the chain, in hex.
     */
    genesisHash: HexString;
    /**
     * The metadataHash for the CheckMetadataHash SignedExtension, as hex.
     */
    metadataHash?: HexString;
    /**
     * The encoded method (with arguments) in hex.
     */
    method: string;
    /**
     * The mode for the CheckMetadataHash SignedExtension, in hex.
     */
    mode?: number;
    /**
     * The nonce for this transaction, in hex.
     */
    nonce: HexString;
    /**
     * The current spec version for the runtime.
     */
    specVersion: HexString;
    /**
     * The tip for this transaction, in hex.
     */
    tip: HexString;
    /**
     * The current transaction version for the runtime.
     */
    transactionVersion: HexString;
    /**
     * The applicable signed extensions for this runtime.
     */
    signedExtensions: string[];
    /**
     * The version of the extrinsic we are dealing with.
     */
    version: number;
    /**
     * Optional flag that enables the use of the `signedTransaction` field in
     * `singAndSend`, `signAsync`, and `dryRun`.
     */
    withSignedTransaction?: boolean;
}
type InjectedWeb3 = Record<string, {
    enable: (dappName?: string) => Promise<PjsInjectedExtension>;
} | undefined>;
type KeypairType = "ed25519" | "sr25519" | "ecdsa";
interface InjectedAccount {
    address: string;
    genesisHash?: string | null;
    name?: string;
    type?: KeypairType;
}
interface InjectedPolkadotAccount {
    polkadotSigner: PolkadotSigner;
    address: string;
    genesisHash?: string | null;
    name?: string;
    type?: KeypairType;
}
type SignPayload = (payload: SignerPayloadJSON) => Promise<{
    signature: string;
    signedTransaction?: string | Uint8Array;
}>;
type SignRaw = (payload: {
    address: string;
    data: HexString;
    type: "bytes";
}) => Promise<{
    id: number;
    signature: HexString;
}>;
interface PjsInjectedExtension {
    signer: {
        signPayload: SignPayload;
        signRaw: SignRaw;
    };
    accounts: {
        get: () => Promise<InjectedAccount[]>;
        subscribe: (cb: (accounts: InjectedAccount[]) => void) => () => void;
    };
}
interface InjectedExtension {
    name: string;
    getAccounts: () => InjectedPolkadotAccount[];
    subscribe: (cb: (accounts: InjectedPolkadotAccount[]) => void) => () => void;
    disconnect: () => void;
}

declare const connectInjectedExtension: (name: string, dappName?: string) => Promise<InjectedExtension>;
declare const getInjectedExtensions: () => Array<string>;

declare function getPolkadotSignerFromPjs(address: string, signPayload: SignPayload, signRaw: SignRaw): PolkadotSigner;

export { type InjectedAccount, type InjectedExtension, type InjectedPolkadotAccount, type KeypairType, type SignPayload, type SignRaw, type SignerPayloadJSON, connectInjectedExtension, getInjectedExtensions, getPolkadotSignerFromPjs };
