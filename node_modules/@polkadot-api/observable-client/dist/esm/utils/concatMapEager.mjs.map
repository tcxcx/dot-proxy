{"version":3,"file":"concatMapEager.mjs","sources":["../../../src/utils/concatMapEager.ts"],"sourcesContent":["import { defer, Observable, ObservableInput, Subscription } from \"rxjs\"\n\nexport const concatMapEager =\n  <I, O>(\n    mapper: (outterValue: I, index: number) => ObservableInput<O>,\n    concurrent = Infinity,\n  ) =>\n  (source$: Observable<I>) =>\n    new Observable<O>((observer) => {\n      let topSubscription: Subscription\n      const queues = new Map<number, Observable<O>>()\n      const innerSubscriptions = new Map<number, Subscription>()\n      const results = new Map<number, O[]>()\n\n      let mapperIdx = 0\n      let subscriptionIdx = 0\n      let observerIdx = 0\n\n      const nextSubscription = () => {\n        const inner$ = queues.get(subscriptionIdx)\n        if (!inner$) {\n          if (\n            innerSubscriptions.size === 0 &&\n            (typeof topSubscription === \"undefined\" || topSubscription.closed)\n          ) {\n            observer.complete()\n          }\n          return\n        }\n        const idx = subscriptionIdx++\n        queues.delete(idx)\n        if (observerIdx !== idx) {\n          results.set(idx, [])\n        }\n\n        let isCompleted = false\n        let subscription = inner$.subscribe({\n          next(x: O) {\n            if (observerIdx === idx) {\n              observer.next(x)\n            } else {\n              results.get(idx)!.push(x)\n            }\n          },\n          complete() {\n            isCompleted = true\n            innerSubscriptions.delete(idx)\n            if (idx === observerIdx) {\n              observerIdx++\n              while (results.has(observerIdx)) {\n                results.get(observerIdx)!.forEach((x) => observer.next(x))\n                results.delete(observerIdx)\n                if (innerSubscriptions.has(observerIdx)) {\n                  break\n                }\n                observerIdx++\n              }\n            }\n            nextSubscription()\n          },\n          error(e: any) {\n            observer.error(e)\n          },\n        })\n\n        if (!isCompleted) innerSubscriptions.set(idx, subscription)\n      }\n\n      topSubscription = source$.subscribe({\n        next(outterValue: I) {\n          const idx = mapperIdx++\n          queues.set(\n            idx,\n            defer(() => mapper(outterValue, idx)),\n          )\n          if (innerSubscriptions.size < concurrent) {\n            nextSubscription()\n          }\n        },\n        error(e: any) {\n          observer.error(e)\n        },\n        complete() {\n          if (innerSubscriptions.size === 0) {\n            observer.complete()\n          }\n        },\n      })\n\n      return () => {\n        innerSubscriptions.forEach((subscription) => subscription.unsubscribe())\n        topSubscription.unsubscribe()\n        queues.clear()\n        results.clear()\n      }\n    })\n"],"names":[],"mappings":"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"}