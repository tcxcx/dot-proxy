{"version":3,"file":"get-runtime-creator.mjs","sources":["../../../../src/chainHead/streams/get-runtime-creator.ts"],"sourcesContent":["import {\n  getDynamicBuilder,\n  getLookupFn,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  AccountId,\n  Binary,\n  Bytes,\n  Codec,\n  Decoder,\n  metadata as metadataCodec,\n  Option,\n  SS58String,\n  u32,\n  V14,\n  V15,\n  Vector,\n} from \"@polkadot-api/substrate-bindings\"\nimport { toHex } from \"@polkadot-api/utils\"\nimport {\n  catchError,\n  EMPTY,\n  map,\n  mergeMap,\n  Observable,\n  of,\n  shareReplay,\n  timer,\n} from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { OperationInaccessibleError } from \"@polkadot-api/substrate-client\"\n\nexport type SystemEvent = {\n  phase:\n    | { type: \"ApplyExtrinsic\"; value: number }\n    | { type: \"Finalization\" }\n    | { type: \"Initialization\" }\n  event: {\n    type: string\n    value: {\n      type: string\n      value: any\n    }\n  }\n  topics: Array<Binary>\n}\n\nexport interface RuntimeContext {\n  metadataRaw: Uint8Array\n  lookup: MetadataLookup\n  dynamicBuilder: ReturnType<typeof getDynamicBuilder>\n  events: {\n    key: string\n    dec: Decoder<Array<SystemEvent>>\n  }\n  accountId: Codec<SS58String>\n  assetId: number | null\n}\n\nexport interface Runtime {\n  at: string\n  runtime: Observable<RuntimeContext>\n  addBlock: (block: string) => Runtime\n  deleteBlocks: (blocks: string[]) => number\n  usages: Set<string>\n}\n\nconst v15Args = toHex(u32.enc(15))\nconst opaqueBytes = Bytes()\nconst optionalOpaqueBytes = Option(opaqueBytes)\nconst u32ListDecoder = Vector(u32).dec\n\nexport const getRuntimeCreator = (\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n) => {\n  const getMetadata$ = (\n    getHash: () => string | null,\n  ): Observable<{ metadataRaw: Uint8Array; metadata: V14 | V15 }> => {\n    const recoverCall$ = (method: string, args: string): Observable<string> => {\n      const hash = getHash()\n      return hash\n        ? call$(hash, method, args).pipe(\n            catchError((e) => {\n              if (e instanceof BlockNotPinnedError)\n                return recoverCall$(method, args)\n              if (e instanceof OperationInaccessibleError)\n                return timer(750).pipe(\n                  mergeMap(() => recoverCall$(method, args)),\n                )\n              throw e\n            }),\n          )\n        : EMPTY\n    }\n\n    const versions = recoverCall$(\"Metadata_metadata_versions\", \"\").pipe(\n      map(u32ListDecoder),\n    )\n\n    const v14 = recoverCall$(\"Metadata_metadata\", \"\").pipe(\n      map((x) => {\n        const metadataRaw = opaqueBytes.dec(x)!\n        const metadata = metadataCodec.dec(metadataRaw)\n        return { metadata: metadata.metadata.value as V14, metadataRaw }\n      }),\n    )\n\n    const v15 = recoverCall$(\"Metadata_metadata_at_version\", v15Args).pipe(\n      map((x) => {\n        const metadataRaw = optionalOpaqueBytes.dec(x)!\n        const metadata = metadataCodec.dec(metadataRaw)\n        return { metadata: metadata.metadata.value as V15, metadataRaw }\n      }),\n    )\n\n    return versions.pipe(\n      catchError(() => of([14])),\n      mergeMap((v) => (v.includes(15) ? v15 : v14)),\n    )\n  }\n\n  return (getHash: () => string | null): Runtime => {\n    const initialHash = getHash()!\n    const usages = new Set<string>([initialHash])\n\n    const runtimeContext$: Observable<RuntimeContext> = getMetadata$(\n      getHash,\n    ).pipe(\n      map(({ metadata, metadataRaw }) => {\n        const lookup = getLookupFn(metadata)\n        const dynamicBuilder = getDynamicBuilder(lookup)\n        const events = dynamicBuilder.buildStorage(\"System\", \"Events\")\n\n        const assetPayment = metadata.extrinsic.signedExtensions.find(\n          (x) => x.identifier === \"ChargeAssetTxPayment\",\n        )\n\n        let assetId: null | number = null\n        if (assetPayment) {\n          const assetTxPayment = lookup(assetPayment.type)\n          if (assetTxPayment.type === \"struct\") {\n            const optionalAssetId = assetTxPayment.value.asset_id\n            if (optionalAssetId.type === \"option\")\n              assetId = optionalAssetId.value.id\n          }\n        }\n\n        return {\n          assetId,\n          metadataRaw,\n          lookup,\n          dynamicBuilder,\n          events: {\n            key: events.keys.enc(),\n            dec: events.value.dec as any,\n          },\n          accountId: AccountId(dynamicBuilder.ss58Prefix),\n        }\n      }),\n      shareReplay(1),\n    )\n\n    const result: Runtime = {\n      at: initialHash,\n      runtime: runtimeContext$,\n      addBlock: (block: string) => {\n        usages.add(block)\n        return result\n      },\n      deleteBlocks: (blocks) => {\n        blocks.forEach((block) => {\n          usages.delete(block)\n        })\n        return usages.size\n      },\n      usages,\n    }\n    runtimeContext$.subscribe({\n      error() {},\n    })\n\n    return result\n  }\n}\n"],"names":["metadata","metadataCodec"],"mappings":"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"}