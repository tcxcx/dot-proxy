import { take, mergeMap, of, takeUntil, distinct, map, filter } from 'rxjs';

const getTrackTx = (blocks$, getBody, getIsValid, getEvents) => {
  const whileBlockPresent = (hash) => takeUntil(blocks$.pipe(filter(({ blocks }) => !blocks.has(hash))));
  const analyzeBlock = (hash, tx, alreadyPresent) => {
    if (alreadyPresent)
      return of({ hash, found: { type: false, validity: null } });
    const whilePresent = whileBlockPresent(hash);
    return getBody(hash).pipe(
      mergeMap((txs) => {
        const index = txs.indexOf(tx);
        return index > -1 ? whilePresent(getEvents(hash)).pipe(
          map((events) => ({
            hash,
            found: {
              type: true,
              index,
              events
            }
          }))
        ) : getIsValid(hash, tx).pipe(
          map((validity) => ({
            hash,
            found: { type: false, validity }
          }))
        );
      }),
      whilePresent
    );
  };
  const findInBranch = (hash, tx, alreadyPresent) => analyzeBlock(hash, tx, alreadyPresent.has(hash)).pipe(
    mergeMap((analyzed) => {
      const { found } = analyzed;
      return found.type || found.validity?.success === false ? of(analyzed) : blocks$.pipe(
        whileBlockPresent(hash),
        mergeMap((x) => x.blocks.get(hash).children),
        distinct(),
        mergeMap((hash2) => findInBranch(hash2, tx, alreadyPresent))
      );
    })
  );
  return (tx) => blocks$.pipe(
    take(1),
    mergeMap((x) => findInBranch(x.finalized, tx, new Set(x.blocks.keys())))
  );
};

export { getTrackTx };
//# sourceMappingURL=track-tx.mjs.map
