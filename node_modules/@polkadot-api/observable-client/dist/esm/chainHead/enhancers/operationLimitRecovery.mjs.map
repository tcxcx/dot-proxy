{"version":3,"file":"operationLimitRecovery.mjs","sources":["../../../../src/chainHead/enhancers/operationLimitRecovery.ts"],"sourcesContent":["import { OperationLimitError } from \"@polkadot-api/substrate-client\"\nimport type { Subscriber } from \"rxjs\"\nimport { Observable } from \"rxjs\"\n\ninterface PendingTaskNode<T> {\n  value: T\n  next?: PendingTaskNode<T>\n  prev?: PendingTaskNode<T>\n}\n\nexport default class PendingTaskQueue<T> {\n  private first?: PendingTaskNode<T>\n  private last?: PendingTaskNode<T>\n\n  private getRemoveFn(node: PendingTaskNode<T>) {\n    return () => {\n      if (node.prev) {\n        node.prev.next = node.next\n      } else {\n        this.first = node.next\n      }\n\n      if (node.next) {\n        node.next.prev = node.prev\n      } else {\n        this.last = node.prev\n      }\n\n      delete node.prev\n      delete node.next\n    }\n  }\n\n  push(value: T) {\n    const newNode: PendingTaskNode<T> = { value }\n\n    if (this.last === undefined) {\n      this.last = this.first = newNode\n    } else {\n      this.last.next = newNode\n      newNode.prev = this.last\n\n      this.last = newNode\n    }\n\n    return this.getRemoveFn(newNode)\n  }\n\n  unshift(value: T) {\n    this.first = { value, next: this.first }\n    this.first.next && (this.first.next.prev = this.first)\n    this.last ||= this.first\n    return this.getRemoveFn(this.first)\n  }\n\n  pop() {\n    const result = this.first?.value\n\n    if (this.first) {\n      this.first = this.first.next\n\n      if (!this.first) {\n        this.last = undefined\n      } else {\n        delete this.first.prev?.next\n        delete this.first.prev\n      }\n    }\n\n    return result\n  }\n\n  isEmpty() {\n    return !this.first\n  }\n}\n\nexport const getWithRecovery = () => {\n  const tearDownOperations = new Map<Observable<any>, () => void>()\n\n  const setTeardown = (observable: Observable<any>, cb: () => void) => {\n    tearDownOperations.set(observable, () => {\n      tearDownOperations.delete(observable)\n      cb()\n    })\n  }\n\n  const teardown = (observable: Observable<any>) => {\n    tearDownOperations.get(observable)?.()\n  }\n\n  const pendingTasks = new PendingTaskQueue<{\n    observer: Subscriber<any>\n    source$: Observable<any>\n  }>()\n  const unshift = pendingTasks.unshift.bind(pendingTasks)\n  const push = pendingTasks.push.bind(pendingTasks)\n\n  const addTask = (\n    task: {\n      observer: Subscriber<any>\n      source$: Observable<any>\n    },\n    topPriority: boolean,\n  ) => {\n    const fn = topPriority ? unshift : push\n    setTeardown(task.source$, fn(task))\n  }\n\n  const onEmptySlot = () => {\n    const data = pendingTasks.pop()\n    if (!data) return\n\n    tearDownOperations.delete(data.source$)\n    process(data)\n  }\n\n  const process = <T>(data: {\n    observer: Subscriber<T>\n    source$: Observable<T>\n  }) => {\n    const { source$, observer } = data\n\n    let isOperationLimit = false\n    const subscription = source$.subscribe({\n      next(x) {\n        observer.next(x)\n      },\n      error(e) {\n        ;(isOperationLimit = e instanceof OperationLimitError)\n          ? addTask(data, true)\n          : observer.error(e)\n      },\n      complete() {\n        observer.complete()\n      },\n    })\n\n    if (!subscription.closed) {\n      setTeardown(source$, () => {\n        subscription.unsubscribe()\n        onEmptySlot()\n      })\n    } else if (!isOperationLimit) onEmptySlot()\n  }\n\n  const withRecovery =\n    (topPriority = false) =>\n    <T>(source$: Observable<T>): Observable<T> =>\n      new Observable((observer) => {\n        const pendingTask = { observer, source$ }\n\n        if (pendingTasks.isEmpty()) {\n          process(pendingTask)\n        } else {\n          addTask(pendingTask, topPriority)\n        }\n\n        return () => {\n          teardown(source$)\n        }\n      })\n\n  const withNormalRecovery = withRecovery()\n  const withRecoveryFn =\n    <Args extends Array<any>, T>(fn: (...args: Args) => Observable<T>) =>\n    (...args: Args) =>\n      withNormalRecovery(fn(...args))\n\n  return { withRecovery, withRecoveryFn }\n}\n"],"names":[],"mappings":"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"}