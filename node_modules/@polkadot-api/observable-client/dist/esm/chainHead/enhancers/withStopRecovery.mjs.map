{"version":3,"file":"withStopRecovery.mjs","sources":["../../../../src/chainHead/enhancers/withStopRecovery.ts"],"sourcesContent":["import { Observable, ObservedValueOf, Subscription } from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { PinnedBlocks } from \"../streams\"\n\nexport function withStopRecovery<A extends Array<any>, T>(\n  blocks$: Observable<PinnedBlocks>,\n  fn: (hash: string, ...args: A) => Observable<T>,\n  label: string,\n) {\n  return (hash: string, ...args: A) => {\n    const source$ = fn(hash, ...args)\n\n    return new Observable<ObservedValueOf<typeof source$>>((observer) => {\n      let sourceSub: Subscription | null = null\n      let isSubscribed = false\n      const performSourceSub = () => {\n        if (isSubscribed) return\n        isSubscribed = true\n        sourceSub = source$.subscribe({\n          next: (v) => observer.next(v),\n          error: (e) => observer.error(e),\n          complete: () => observer.complete(),\n        })\n        sourceSub.add(() => {\n          isSubscribed = false\n          sourceSub = null\n        })\n      }\n\n      let isRecovering = false\n      const blockSub = blocks$.subscribe({\n        next: (v) => {\n          const block = v.blocks.get(hash)\n          if (!block) {\n            // This branch conflicts with BlockPrunedError, as the block might disappear when it gets pruned\n            // We can avoid this conflict by checking that we're actually recovering.\n            if (isRecovering) {\n              observer.error(new BlockNotPinnedError(hash, label))\n            }\n          } else if (block.recovering) {\n            // Pause while it's recovering, as we don't know if the block is there\n            sourceSub?.unsubscribe()\n          } else {\n            performSourceSub()\n          }\n          isRecovering = v.recovering\n        },\n        error: (e) => observer.error(e),\n      })\n\n      return () => {\n        blockSub.unsubscribe()\n        sourceSub?.unsubscribe()\n      }\n    })\n  }\n}\n"],"names":[],"mappings":";;;AAIgB,SAAA,gBAAA,CACd,OACA,EAAA,EAAA,EACA,KACA,EAAA;AACA,EAAO,OAAA,CAAC,SAAiB,IAAY,KAAA;AACnC,IAAA,MAAM,OAAU,GAAA,EAAA,CAAG,IAAM,EAAA,GAAG,IAAI,CAAA;AAEhC,IAAO,OAAA,IAAI,UAA4C,CAAA,CAAC,QAAa,KAAA;AACnE,MAAA,IAAI,SAAiC,GAAA,IAAA;AACrC,MAAA,IAAI,YAAe,GAAA,KAAA;AACnB,MAAA,MAAM,mBAAmB,MAAM;AAC7B,QAAA,IAAI,YAAc,EAAA;AAClB,QAAe,YAAA,GAAA,IAAA;AACf,QAAA,SAAA,GAAY,QAAQ,SAAU,CAAA;AAAA,UAC5B,IAAM,EAAA,CAAC,CAAM,KAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,UAC5B,KAAO,EAAA,CAAC,CAAM,KAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA,UAC9B,QAAA,EAAU,MAAM,QAAA,CAAS,QAAS;AAAA,SACnC,CAAA;AACD,QAAA,SAAA,CAAU,IAAI,MAAM;AAClB,UAAe,YAAA,GAAA,KAAA;AACf,UAAY,SAAA,GAAA,IAAA;AAAA,SACb,CAAA;AAAA,OACH;AAEA,MAAA,IAAI,YAAe,GAAA,KAAA;AACnB,MAAM,MAAA,QAAA,GAAW,QAAQ,SAAU,CAAA;AAAA,QACjC,IAAA,EAAM,CAAC,CAAM,KAAA;AACX,UAAA,MAAM,KAAQ,GAAA,CAAA,CAAE,MAAO,CAAA,GAAA,CAAI,IAAI,CAAA;AAC/B,UAAA,IAAI,CAAC,KAAO,EAAA;AAGV,YAAA,IAAI,YAAc,EAAA;AAChB,cAAA,QAAA,CAAS,KAAM,CAAA,IAAI,mBAAoB,CAAA,IAAA,EAAM,KAAK,CAAC,CAAA;AAAA;AACrD,WACF,MAAA,IAAW,MAAM,UAAY,EAAA;AAE3B,YAAA,SAAA,EAAW,WAAY,EAAA;AAAA,WAClB,MAAA;AACL,YAAiB,gBAAA,EAAA;AAAA;AAEnB,UAAA,YAAA,GAAe,CAAE,CAAA,UAAA;AAAA,SACnB;AAAA,QACA,KAAO,EAAA,CAAC,CAAM,KAAA,QAAA,CAAS,MAAM,CAAC;AAAA,OAC/B,CAAA;AAED,MAAA,OAAO,MAAM;AACX,QAAA,QAAA,CAAS,WAAY,EAAA;AACrB,QAAA,SAAA,EAAW,WAAY,EAAA;AAAA,OACzB;AAAA,KACD,CAAA;AAAA,GACH;AACF;;;;"}