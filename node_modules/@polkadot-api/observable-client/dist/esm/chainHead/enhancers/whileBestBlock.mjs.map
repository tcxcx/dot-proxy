{"version":3,"file":"whileBestBlock.mjs","sources":["../../../../src/chainHead/enhancers/whileBestBlock.ts"],"sourcesContent":["import { Finalized } from \"@polkadot-api/substrate-client\"\nimport {\n  Observable,\n  filter,\n  mergeMap,\n  pipe,\n  switchMap,\n  take,\n  throwError,\n} from \"rxjs\"\nimport { BlockPrunedError, NotBestBlockError } from \"../errors\"\nimport { isBestOrFinalizedBlock } from \"../streams/block-operations\"\nimport { FollowEvent } from \"../streams/follow\"\nimport type { PinnedBlocks } from \"../streams/pinned-blocks\"\n\nexport function withEnsureCanonicalChain<A extends Array<any>, T>(\n  blocks$: Observable<PinnedBlocks>,\n  follow$: Observable<FollowEvent>,\n  fn: (hash: string, ...args: A) => Observable<T>,\n): (hash: string, ensureCanonical: boolean, ...args: A) => Observable<T> {\n  return (hash: string, ensureCanonical, ...args: A) => {\n    const enhancer: <T>(x: Observable<T>) => Observable<T> = ensureCanonical\n      ? pipe(\n          throwWhenPrune(\n            hash,\n            follow$.pipe(\n              filter((evt): evt is Finalized => evt.type === \"finalized\"),\n              mergeMap((evt) => evt.prunedBlockHashes),\n            ),\n          ),\n          onlyIfIsBestOrFinalized(hash, blocks$),\n        )\n      : (x) => x\n\n    return enhancer(fn(hash, ...args))\n  }\n}\n\nconst onlyIfIsBestOrFinalized =\n  <T>(hash: string, blocks$: Observable<PinnedBlocks>) =>\n  (source$: Observable<T>) =>\n    isBestOrFinalizedBlock(blocks$, hash).pipe(\n      take(1),\n      switchMap((isBest) =>\n        isBest ? source$ : throwError(() => new NotBestBlockError()),\n      ),\n    )\n\nconst throwWhenPrune =\n  <T>(hash: string, pruned$: Observable<string>) =>\n  (source$: Observable<T>) =>\n    new Observable<T>((subscriber) => {\n      const prunedSubscription = pruned$\n        .pipe(filter((h) => h === hash))\n        .subscribe(() => {\n          subscriber.error(new BlockPrunedError())\n        })\n      const sourceSubscription = source$.subscribe(subscriber)\n\n      return () => {\n        prunedSubscription.unsubscribe()\n        sourceSubscription.unsubscribe()\n      }\n    })\n"],"names":[],"mappings":";;;;AAegB,SAAA,wBAAA,CACd,OACA,EAAA,OAAA,EACA,EACuE,EAAA;AACvE,EAAO,OAAA,CAAC,IAAc,EAAA,eAAA,EAAA,GAAoB,IAAY,KAAA;AACpD,IAAA,MAAM,WAAmD,eACrD,GAAA,IAAA;AAAA,MACE,cAAA;AAAA,QACE,IAAA;AAAA,QACA,OAAQ,CAAA,IAAA;AAAA,UACN,MAAO,CAAA,CAAC,GAA0B,KAAA,GAAA,CAAI,SAAS,WAAW,CAAA;AAAA,UAC1D,QAAS,CAAA,CAAC,GAAQ,KAAA,GAAA,CAAI,iBAAiB;AAAA;AACzC,OACF;AAAA,MACA,uBAAA,CAAwB,MAAM,OAAO;AAAA,KACvC,GACA,CAAC,CAAM,KAAA,CAAA;AAEX,IAAA,OAAO,QAAS,CAAA,EAAA,CAAG,IAAM,EAAA,GAAG,IAAI,CAAC,CAAA;AAAA,GACnC;AACF;AAEA,MAAM,uBAAA,GACJ,CAAI,IAAc,EAAA,OAAA,KAClB,CAAC,OACC,KAAA,sBAAA,CAAuB,OAAS,EAAA,IAAI,CAAE,CAAA,IAAA;AAAA,EACpC,KAAK,CAAC,CAAA;AAAA,EACN,SAAA;AAAA,IAAU,CAAC,WACT,MAAS,GAAA,OAAA,GAAU,WAAW,MAAM,IAAI,mBAAmB;AAAA;AAE/D,CAAA;AAEJ,MAAM,cAAA,GACJ,CAAI,IAAc,EAAA,OAAA,KAClB,CAAC,OACC,KAAA,IAAI,UAAc,CAAA,CAAC,UAAe,KAAA;AAChC,EAAM,MAAA,kBAAA,GAAqB,OACxB,CAAA,IAAA,CAAK,MAAO,CAAA,CAAC,CAAM,KAAA,CAAA,KAAM,IAAI,CAAC,CAC9B,CAAA,SAAA,CAAU,MAAM;AACf,IAAW,UAAA,CAAA,KAAA,CAAM,IAAI,gBAAA,EAAkB,CAAA;AAAA,GACxC,CAAA;AACH,EAAM,MAAA,kBAAA,GAAqB,OAAQ,CAAA,SAAA,CAAU,UAAU,CAAA;AAEvD,EAAA,OAAO,MAAM;AACX,IAAA,kBAAA,CAAmB,WAAY,EAAA;AAC/B,IAAA,kBAAA,CAAmB,WAAY,EAAA;AAAA,GACjC;AACF,CAAC,CAAA;;;;"}