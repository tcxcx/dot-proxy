import { take, mergeMap, catchError, throwError, timer, concatMap } from 'rxjs';
import { BlockNotPinnedError } from '../errors.mjs';
import { OperationInaccessibleError } from '@polkadot-api/substrate-client';

const dynamicBlocks = /* @__PURE__ */ new Set(["best", "finalized", null]);
const operable = (source$) => {
  const result = source$.pipe(
    catchError(
      (e) => e instanceof OperationInaccessibleError ? timer(750).pipe(concatMap(() => result)) : throwError(() => e)
    )
  );
  return result;
};
const getWithOptionalhash$ = (finalized$, best$, usingBlock) => {
  return (fn) => (hash, ...args) => {
    if (!dynamicBlocks.has(hash))
      return operable(fn(hash, ...args)).pipe(
        usingBlock(hash)
      );
    const hash$ = hash === "best" ? best$ : finalized$;
    const result$ = hash$.pipe(
      take(1),
      mergeMap((h) => fn(h, ...args).pipe(usingBlock(h))),
      catchError((e) => {
        return e instanceof BlockNotPinnedError ? result$ : throwError(() => e);
      })
    );
    return operable(result$);
  };
};

export { getWithOptionalhash$ };
//# sourceMappingURL=optionalHash.mjs.map
