{"version":3,"file":"chainHead.mjs","sources":["../../../src/chainHead/chainHead.ts"],"sourcesContent":["import { concatMapEager, delayUnsubscription, shareLatest } from \"@/utils\"\nimport {\n  ChainHead,\n  DisjointError,\n  FollowEventWithRuntime,\n  StorageItemInput,\n  StorageResult,\n} from \"@polkadot-api/substrate-client\"\nimport {\n  MonoTypeOperatorFunction,\n  Observable,\n  ReplaySubject,\n  Subject,\n  defer,\n  distinctUntilChanged,\n  filter,\n  map,\n  merge,\n  mergeAll,\n  mergeMap,\n  noop,\n  of,\n  scan,\n  share,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from \"rxjs\"\n\nimport { withDefaultValue } from \"@/utils\"\nimport {\n  fromAbortControllerFn,\n  getWithOptionalhash$,\n  getWithRecovery,\n  withEnsureCanonicalChain,\n  withLazyFollower,\n  withStopRecovery,\n} from \"./enhancers\"\nimport { BlockNotPinnedError } from \"./errors\"\nimport { getRecoveralStorage$ } from \"./storage-queries\"\nimport type {\n  BlockUsageEvent,\n  PinnedBlocks,\n  PinnedBlock,\n  RuntimeContext,\n  SystemEvent,\n} from \"./streams\"\nimport { getFollow$, getPinnedBlocks$ } from \"./streams\"\nimport { getTrackTx } from \"./track-tx\"\nimport { getValidateTx } from \"./validate-tx\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\n\nexport type {\n  PinnedBlocks,\n  PinnedBlock,\n  FollowEventWithRuntime,\n  RuntimeContext,\n  SystemEvent,\n}\n\nexport type BlockInfo = {\n  hash: string\n  number: number\n  parent: string\n}\n\nconst toBlockInfo = ({ hash, number, parent }: PinnedBlock): BlockInfo => ({\n  hash,\n  number,\n  parent,\n})\n\nexport const getChainHead$ = (chainHead: ChainHead) => {\n  const { getFollower, startFollow, follow$, getHeader } = getFollow$(chainHead)\n  const lazyFollower = withLazyFollower(getFollower)\n  const { withRecovery, withRecoveryFn } = getWithRecovery()\n\n  const blockUsage$ = new Subject<BlockUsageEvent>()\n  const holdBlock = (hash: string) => {\n    blockUsage$.next({ type: \"blockUsage\", value: { type: \"hold\", hash } })\n    return () => {\n      setTimeout(() => {\n        blockUsage$.next({\n          type: \"blockUsage\",\n          value: { type: \"release\", hash },\n        })\n      }, 0)\n    }\n  }\n\n  const usingBlock: <T>(blockHash: string) => MonoTypeOperatorFunction<T> =\n    (blockHash: string) => (base) =>\n      new Observable((observer) => {\n        const release = holdBlock(blockHash)\n        const subscription = base.subscribe(observer)\n        subscription.add(release)\n        return subscription\n      })\n\n  const withRefcount =\n    <A extends Array<any>, T>(\n      fn: (hash: string, ...args: A) => Observable<T>,\n    ): ((hash: string, ...args: A) => Observable<T>) =>\n    (hash, ...args) =>\n      fn(hash, ...args).pipe(usingBlock(hash))\n\n  const withInMemory =\n    <A extends Array<any>, T>(\n      fn: (hash: string, ...args: A) => Observable<T>,\n      label: string,\n    ): ((hash: string, ...args: A) => Observable<T>) =>\n    (hash, ...args) =>\n      new Observable((observer) => {\n        let isPresent = false\n        pinnedBlocks$.pipe(take(1)).subscribe((blocks) => {\n          const block = blocks.blocks.get(hash)\n          isPresent = !!block && !block.unpinned\n        })\n\n        return isPresent\n          ? fn(hash, ...args).subscribe(observer)\n          : observer.error(new BlockNotPinnedError(hash, label))\n      })\n\n  const unpin = (hashes: string[]) =>\n    getFollower()\n      .unpin(hashes)\n      .catch((e) => {\n        if (e instanceof DisjointError) return\n        throw e\n      })\n\n  const commonEnhancer = <A extends Array<any>, T>(\n    fn: (\n      key: string,\n      ...args: [...A, ...[abortSignal: AbortSignal]]\n    ) => Promise<T>,\n    label: string,\n  ) => {\n    const canonicalChain = (_fn: (hash: string, ...args: A) => Observable<T>) =>\n      withEnsureCanonicalChain(pinnedBlocks$, follow$, _fn)\n\n    return withInMemory(\n      withRefcount(\n        canonicalChain(\n          withStopRecovery(\n            pinnedBlocks$,\n            withRecoveryFn(fromAbortControllerFn(fn)),\n            `stop-${label}`,\n          ),\n        ),\n      ),\n      label,\n    )\n  }\n\n  const withCanonicalChain: <Args extends Array<any>, T>(\n    fn: (\n      hash: string | null,\n      withCanonical: boolean,\n      ...args: Args\n    ) => Observable<T>,\n    withCanonicalChain?: boolean,\n  ) => (hash: string | null, ...args: Args) => Observable<T> =\n    (fn, withCanonicalChain = true) =>\n    (hash, ...args) =>\n      fn(hash, withCanonicalChain, ...args)\n\n  const cache = new Map<string, Map<string, Observable<any>>>()\n  const pinnedBlocks$ = getPinnedBlocks$(\n    follow$,\n    withRefcount(withRecoveryFn(fromAbortControllerFn(lazyFollower(\"call\")))),\n    blockUsage$,\n    (blocks) => {\n      unpin(blocks)\n      blocks.forEach((hash) => {\n        cache.delete(hash)\n      })\n    },\n    (block) => {\n      cache.delete(block)\n    },\n  )\n\n  const getRuntimeContext$ = withRefcount((hash: string) =>\n    pinnedBlocks$.pipe(\n      take(1),\n      mergeMap(\n        (pinned) => pinned.runtimes[pinned.blocks.get(hash)!.runtime].runtime,\n      ),\n    ),\n  )\n\n  const withRuntime =\n    <T>(mapper: (x: T) => string) =>\n    (source$: Observable<T>): Observable<[T, RuntimeContext]> =>\n      source$.pipe(\n        concatMapEager((x) =>\n          getRuntimeContext$(mapper(x)).pipe(map((runtime) => [x, runtime])),\n        ),\n      )\n\n  const upsertCachedStream = <T>(\n    hash: string,\n    key: string,\n    stream: Observable<T>,\n  ): Observable<T> => {\n    const hashCache = cache.get(hash) ?? new Map()\n    const cached = hashCache.get(key)\n    if (cached) return cached\n\n    cache.set(hash, hashCache)\n\n    let connector: ReplaySubject<T>\n    const result = stream.pipe(\n      share({\n        connector: () => (connector = new ReplaySubject()),\n      }),\n      tap({\n        complete() {\n          hashCache.set(key, connector)\n        },\n      }),\n      delayUnsubscription(),\n    )\n    hashCache.set(key, result)\n\n    return result\n  }\n\n  const finalized$ = pinnedBlocks$.pipe(\n    filter((x) => !x.recovering),\n    distinctUntilChanged((a, b) => a.finalized === b.finalized),\n    scan((acc, value) => {\n      let current = value.blocks.get(value.finalized)!\n      const result = [current]\n\n      const latest = acc.at(-1)\n      if (!latest) return result\n\n      while (current.number > latest.number + 1) {\n        current = value.blocks.get(current.parent)!\n        if (!current) break\n        result.unshift(current)\n      }\n      return result\n    }, [] as PinnedBlock[]),\n    mergeAll(),\n    map(toBlockInfo),\n    shareLatest,\n  )\n\n  const best$ = pinnedBlocks$.pipe(\n    distinctUntilChanged((a, b) => a.best === b.best),\n    map((pinned) => toBlockInfo(pinned.blocks.get(pinned.best)!)),\n    shareLatest,\n  )\n\n  const bestBlocks$ = pinnedBlocks$.pipe(\n    filter((x) => !x.recovering),\n    distinctUntilChanged(\n      (prev, current) =>\n        prev.finalized === current.finalized && prev.best === current.best,\n    ),\n    scan((acc, pinned) => {\n      const getBlockInfo = (hash: string) =>\n        acc.get(hash) || toBlockInfo(pinned.blocks.get(hash)!)\n\n      const best = getBlockInfo(pinned.best)\n      const finalized = getBlockInfo(pinned.finalized)\n\n      const len = best.number - finalized.number + 1\n      const result = new Array<BlockInfo>(len)\n      for (let i = 0, hash = best.hash; i < len; i++) {\n        result[i] = getBlockInfo(hash)\n        hash = result[i].parent\n      }\n\n      return new Map(result.map((b) => [b.hash, b]))\n    }, new Map<string, BlockInfo>()),\n    map((x) => [...x.values()]),\n    shareLatest,\n  )\n\n  const runtime$ = pinnedBlocks$.pipe(\n    distinctUntilChanged((a, b) => a.finalizedRuntime === b.finalizedRuntime),\n    switchMap(({ finalizedRuntime: { runtime } }) =>\n      runtime.pipe(withDefaultValue(null)),\n    ),\n    shareLatest,\n  )\n\n  const metadata$ = runtime$.pipe(map((x) => x?.lookup.metadata ?? null))\n\n  const withOptionalHash$ = getWithOptionalhash$(\n    finalized$.pipe(map((b) => b.hash)),\n    best$.pipe(map((b) => b.hash)),\n    usingBlock,\n  )\n\n  const _body$ = withOptionalHash$(commonEnhancer(lazyFollower(\"body\"), \"body\"))\n  const body$ = (hash: string) =>\n    upsertCachedStream(hash, \"body\", _body$(hash, true))\n\n  const _storage$ = commonEnhancer(lazyFollower(\"storage\"), \"storage\")\n\n  const storage$ = withOptionalHash$(\n    <\n      Type extends StorageItemInput[\"type\"],\n      M extends\n        | undefined\n        | ((data: StorageResult<Type>, ctx: RuntimeContext) => any),\n    >(\n      hash: string,\n      withCanonicalChain: boolean,\n      type: Type,\n      keyMapper: (ctx: RuntimeContext) => string,\n      childTrie: string | null = null,\n      mapper?: M,\n    ): Observable<\n      undefined extends M\n        ? StorageResult<Type>\n        : { raw: StorageResult<Type>; mapped: ReturnType<NonNullable<M>> }\n    > =>\n      pinnedBlocks$.pipe(\n        take(1),\n        mergeMap(\n          (pinned) => pinned.runtimes[pinned.blocks.get(hash)!.runtime].runtime,\n        ),\n        mergeMap((ctx) => {\n          const key = keyMapper(ctx)\n          const unMapped$ = upsertCachedStream(\n            hash,\n            `storage-${type}-${key}-${childTrie ?? \"\"}`,\n            _storage$(hash, withCanonicalChain, type, key, childTrie),\n          )\n\n          return mapper\n            ? upsertCachedStream(\n                hash,\n                `storage-${type}-${key}-${childTrie ?? \"\"}-dec`,\n                unMapped$.pipe(\n                  map((raw) => ({ raw, mapped: mapper(raw, ctx) })),\n                ),\n              )\n            : unMapped$\n        }),\n      ) as Observable<\n        undefined extends M\n          ? StorageResult<Type>\n          : { raw: StorageResult<Type>; mapped: ReturnType<NonNullable<M>> }\n      >,\n  )\n\n  const recoveralStorage$ = getRecoveralStorage$(getFollower, withRecovery)\n  const storageQueries$ = withOptionalHash$(\n    withStopRecovery(\n      pinnedBlocks$,\n      (hash: string, queries: Array<StorageItemInput>, childTrie?: string) =>\n        recoveralStorage$(hash, queries, childTrie ?? null, false),\n      `storageQueries`,\n    ),\n  )\n\n  const header$ = withOptionalHash$(\n    withStopRecovery(\n      pinnedBlocks$,\n      (hash: string) => defer(() => getHeader(hash)),\n      \"header\",\n    ),\n  )\n\n  const eventsAt$ = (hash: string | null, canonical = false) =>\n    storage$(\n      hash,\n      canonical,\n      \"value\",\n      (ctx) => ctx.events.key,\n      null,\n      (x, ctx) => ctx.events.dec(x!),\n    ).pipe(map((x) => x.mapped))\n\n  const __call$ = commonEnhancer(lazyFollower(\"call\"), \"call\")\n  const call$ = withOptionalHash$(\n    (hash: string, canonical: boolean, fn: string, args: string) =>\n      upsertCachedStream(\n        hash,\n        `call-${fn}-${args}`,\n        __call$(hash, canonical, fn, args),\n      ),\n  )\n\n  const validateTx$ = getValidateTx(\n    withCanonicalChain(call$, false),\n    getRuntimeContext$,\n  )\n\n  const innerBody$ = (hash: string) =>\n    upsertCachedStream(hash, \"body\", _body$(hash, false))\n\n  const trackTx$ = getTrackTx(pinnedBlocks$, innerBody$, validateTx$, eventsAt$)\n  const trackTxWithoutEvents$ = getTrackTx(\n    pinnedBlocks$,\n    innerBody$,\n    validateTx$,\n    () => of(),\n  )\n\n  const genesis$ = runtime$.pipe(\n    filter(Boolean),\n    take(1),\n    mergeMap((runtime) => {\n      const { enc } = runtime.dynamicBuilder.buildStorage(\n        \"System\",\n        \"BlockHash\",\n      ).keys\n      // const genesis$ =\n      // there are chains (e.g. kilt) that use u64 as block number\n      // u64 is encoded as bigint\n      // using dynamic builder for safety\n      let key: string\n      try {\n        // for u32\n        key = enc(0)\n      } catch {\n        // for u64\n        key = enc(0n)\n      }\n\n      return storage$(\n        null,\n        false,\n        \"value\",\n        () => key,\n        null,\n      ) as Observable<HexString>\n    }),\n    shareReplay(1),\n  )\n\n  // calling `unfollow` also kills the subscription due to the fact\n  // that `follow$` completes, which makes all other streams to\n  // also complete (or error, in the case of ongoing operations)\n  merge(runtime$, bestBlocks$).subscribe({\n    error() {},\n  })\n\n  let unfollow = noop\n  let started: boolean | null = false\n  let nSubscribers: number = 0\n  const start = (_nSubscribers: number) => {\n    nSubscribers += _nSubscribers\n    started = true\n\n    unfollow = startFollow()\n  }\n\n  return [\n    {\n      follow$,\n      finalized$,\n      best$,\n      bestBlocks$,\n      runtime$,\n      metadata$,\n      genesis$,\n\n      header$,\n      body$,\n      call$: withCanonicalChain(call$),\n      storage$: withCanonicalChain(storage$),\n      storageQueries$,\n      eventsAt$: withCanonicalChain(eventsAt$),\n\n      holdBlock,\n      trackTx$,\n      trackTxWithoutEvents$,\n      validateTx$,\n      pinnedBlocks$,\n      withRuntime,\n      getRuntimeContext$: withOptionalHash$(getRuntimeContext$),\n      unfollow: () => {\n        if (started == null) return\n        nSubscribers--\n        if (started && !nSubscribers) {\n          started = null\n          unfollow()\n          unfollow = noop\n        }\n      },\n    },\n    start,\n  ] as const\n}\n\nexport type ChainHead$ = ReturnType<typeof getChainHead$>[0]\n"],"names":["withCanonicalChain"],"mappings":"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"}