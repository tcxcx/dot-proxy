{"version":3,"file":"track-tx.mjs","sources":["../../../src/chainHead/track-tx.ts"],"sourcesContent":["import {\n  Observable,\n  distinct,\n  filter,\n  map,\n  mergeMap,\n  of,\n  take,\n  takeUntil,\n} from \"rxjs\"\nimport { PinnedBlocks } from \"./streams\"\nimport { HexString, ResultPayload } from \"@polkadot-api/substrate-bindings\"\n\nexport type AnalyzedBlock = {\n  hash: HexString\n  found:\n    | {\n        type: true\n        index: number\n        events: any\n      }\n    | {\n        type: false\n        validity: ResultPayload<any, any> | null // null means that the block was already present when the tx was broadcasted\n      }\n}\n\nexport const getTrackTx = (\n  blocks$: Observable<PinnedBlocks>,\n  getBody: (block: string) => Observable<string[]>, // Returns an observable that should emit just once and complete\n  getIsValid: (\n    block: string,\n    tx: string,\n  ) => Observable<ResultPayload<any, any>>, // Returns an observable that should emit just once and complete\n  getEvents: (block: string) => Observable<any>, // Returns an observable that should emit just once and complete\n) => {\n  const whileBlockPresent = <TT>(\n    hash: string,\n  ): (<T = TT>(base: Observable<T>) => Observable<T>) =>\n    takeUntil(blocks$.pipe(filter(({ blocks }) => !blocks.has(hash))))\n\n  const analyzeBlock = (\n    hash: string,\n    tx: string,\n    alreadyPresent: boolean,\n  ): Observable<AnalyzedBlock> => {\n    if (alreadyPresent)\n      return of({ hash, found: { type: false, validity: null } })\n\n    const whilePresent = whileBlockPresent(hash)\n    return getBody(hash).pipe(\n      mergeMap((txs) => {\n        const index = txs.indexOf(tx)\n        return index > -1\n          ? whilePresent(getEvents(hash)).pipe(\n              map((events) => ({\n                hash,\n                found: {\n                  type: true as true,\n                  index,\n                  events,\n                },\n              })),\n            )\n          : getIsValid(hash, tx).pipe(\n              map((validity) => ({\n                hash,\n                found: { type: false as false, validity },\n              })),\n            )\n      }),\n      whilePresent,\n    )\n  }\n\n  const findInBranch = (\n    hash: string,\n    tx: string,\n    alreadyPresent: Set<string>,\n  ): Observable<AnalyzedBlock> =>\n    analyzeBlock(hash, tx, alreadyPresent.has(hash)).pipe(\n      mergeMap((analyzed) => {\n        const { found } = analyzed\n        return found.type || found.validity?.success === false\n          ? of(analyzed)\n          : blocks$.pipe(\n              whileBlockPresent(hash),\n              mergeMap((x) => x.blocks.get(hash)!.children),\n              distinct(),\n              mergeMap((hash) => findInBranch(hash, tx, alreadyPresent)),\n            )\n      }),\n    )\n\n  return (tx: string): Observable<AnalyzedBlock> =>\n    blocks$.pipe(\n      take(1),\n      mergeMap((x) => findInBranch(x.finalized, tx, new Set(x.blocks.keys()))),\n    )\n}\n"],"names":["hash"],"mappings":";;AA2BO,MAAM,UAAa,GAAA,CACxB,OACA,EAAA,OAAA,EACA,YAIA,SACG,KAAA;AACH,EAAA,MAAM,oBAAoB,CACxB,IAAA,KAEA,SAAU,CAAA,OAAA,CAAQ,KAAK,MAAO,CAAA,CAAC,EAAE,MAAA,OAAa,CAAC,MAAA,CAAO,IAAI,IAAI,CAAC,CAAC,CAAC,CAAA;AAEnE,EAAA,MAAM,YAAe,GAAA,CACnB,IACA,EAAA,EAAA,EACA,cAC8B,KAAA;AAC9B,IAAI,IAAA,cAAA;AACF,MAAO,OAAA,EAAA,CAAG,EAAE,IAAA,EAAM,KAAO,EAAA,EAAE,MAAM,KAAO,EAAA,QAAA,EAAU,IAAK,EAAA,EAAG,CAAA;AAE5D,IAAM,MAAA,YAAA,GAAe,kBAAkB,IAAI,CAAA;AAC3C,IAAO,OAAA,OAAA,CAAQ,IAAI,CAAE,CAAA,IAAA;AAAA,MACnB,QAAA,CAAS,CAAC,GAAQ,KAAA;AAChB,QAAM,MAAA,KAAA,GAAQ,GAAI,CAAA,OAAA,CAAQ,EAAE,CAAA;AAC5B,QAAA,OAAO,QAAQ,EACX,GAAA,YAAA,CAAa,SAAU,CAAA,IAAI,CAAC,CAAE,CAAA,IAAA;AAAA,UAC5B,GAAA,CAAI,CAAC,MAAY,MAAA;AAAA,YACf,IAAA;AAAA,YACA,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,IAAA;AAAA,cACN,KAAA;AAAA,cACA;AAAA;AACF,WACA,CAAA;AAAA,SAEJ,GAAA,UAAA,CAAW,IAAM,EAAA,EAAE,CAAE,CAAA,IAAA;AAAA,UACnB,GAAA,CAAI,CAAC,QAAc,MAAA;AAAA,YACjB,IAAA;AAAA,YACA,KAAO,EAAA,EAAE,IAAM,EAAA,KAAA,EAAgB,QAAS;AAAA,WACxC,CAAA;AAAA,SACJ;AAAA,OACL,CAAA;AAAA,MACD;AAAA,KACF;AAAA,GACF;AAEA,EAAA,MAAM,YAAe,GAAA,CACnB,IACA,EAAA,EAAA,EACA,cAEA,KAAA,YAAA,CAAa,IAAM,EAAA,EAAA,EAAI,cAAe,CAAA,GAAA,CAAI,IAAI,CAAC,CAAE,CAAA,IAAA;AAAA,IAC/C,QAAA,CAAS,CAAC,QAAa,KAAA;AACrB,MAAM,MAAA,EAAE,OAAU,GAAA,QAAA;AAClB,MAAO,OAAA,KAAA,CAAM,QAAQ,KAAM,CAAA,QAAA,EAAU,YAAY,KAC7C,GAAA,EAAA,CAAG,QAAQ,CAAA,GACX,OAAQ,CAAA,IAAA;AAAA,QACN,kBAAkB,IAAI,CAAA;AAAA,QACtB,QAAA,CAAS,CAAC,CAAM,KAAA,CAAA,CAAE,OAAO,GAAI,CAAA,IAAI,EAAG,QAAQ,CAAA;AAAA,QAC5C,QAAS,EAAA;AAAA,QACT,SAAS,CAACA,KAAAA,KAAS,aAAaA,KAAM,EAAA,EAAA,EAAI,cAAc,CAAC;AAAA,OAC3D;AAAA,KACL;AAAA,GACH;AAEF,EAAO,OAAA,CAAC,OACN,OAAQ,CAAA,IAAA;AAAA,IACN,KAAK,CAAC,CAAA;AAAA,IACN,QAAS,CAAA,CAAC,CAAM,KAAA,YAAA,CAAa,EAAE,SAAW,EAAA,EAAA,EAAI,IAAI,GAAA,CAAI,CAAE,CAAA,MAAA,CAAO,IAAK,EAAC,CAAC,CAAC;AAAA,GACzE;AACJ;;;;"}