{"version":3,"file":"validate-tx.mjs","sources":["../../../src/chainHead/validate-tx.ts"],"sourcesContent":["import { Observable, map, withLatestFrom } from \"rxjs\"\nimport { fromHex, mergeUint8, toHex } from \"@polkadot-api/utils\"\nimport {\n  _void,\n  createDecoder,\n  Decoder,\n  ResultPayload,\n  u8,\n  Variant,\n} from \"@polkadot-api/substrate-bindings\"\nimport { RuntimeContext } from \"./streams\"\n\nconst external = new Uint8Array([2])\n\nconst getValidateTxArgs = (tx: string, hash: string) =>\n  toHex(mergeUint8(external, fromHex(tx), fromHex(hash)))\n\nconst TaggedTransactionQueue = \"TaggedTransactionQueue\"\nconst validateTransaction = \"validate_transaction\"\n\nconst [, defaultInvalidTxDecoder] = Variant({\n  InvalidTransaction: Variant({\n    Call: _void,\n    Payment: _void,\n    Future: _void,\n    Stale: _void,\n    BadProof: _void,\n    AncientBirthBlock: _void,\n    ExhaustsResources: _void,\n    Custom: u8,\n    BadMandatory: _void,\n    MandatoryValidation: _void,\n    BadSigner: _void,\n  }),\n  UnknownTransaction: Variant({\n    CannotLookup: _void,\n    NoUnsignedValidator: _void,\n    Custom: u8,\n  }),\n})\nconst defaultValidateTxDecoder: Decoder<ResultPayload<undefined, any>> =\n  createDecoder((input) => {\n    const firstByte = u8.dec(input)\n    if (firstByte > 1)\n      throw new Error(\"Unable to decode validateTransaction result\")\n\n    if (!firstByte) return { success: true, value: undefined }\n    let value: any\n    try {\n      value = defaultInvalidTxDecoder(input)\n    } catch (_) {\n      value = {\n        type: \"UnknownInvalidTx\",\n      }\n    }\n    return { success: false, value }\n  })\n\nexport const getValidateTx =\n  (\n    call$: (\n      hash: string | null,\n      fnName: string,\n      parameters: string,\n    ) => Observable<string>,\n    getRuntimeContext: (hash: string) => Observable<RuntimeContext>,\n  ) =>\n  (blockHash: string, tx: string): Observable<ResultPayload<any, any>> => {\n    const decoder$ = getRuntimeContext(blockHash).pipe(\n      map((ctx) => {\n        try {\n          return ctx.dynamicBuilder.buildRuntimeCall(\n            TaggedTransactionQueue,\n            validateTransaction,\n          ).value[1] as Decoder<ResultPayload<any, any>>\n        } catch (_) {\n          return defaultValidateTxDecoder\n        }\n      }),\n    )\n    return call$(\n      blockHash,\n      `${TaggedTransactionQueue}_${validateTransaction}`,\n      getValidateTxArgs(tx, blockHash),\n    ).pipe(\n      withLatestFrom(decoder$),\n      map(([result, decoder]) => decoder(result)),\n    )\n  }\n"],"names":[],"mappings":";;;;AAYA,MAAM,QAAW,GAAA,IAAI,UAAW,CAAA,CAAC,CAAC,CAAC,CAAA;AAEnC,MAAM,iBAAoB,GAAA,CAAC,EAAY,EAAA,IAAA,KACrC,KAAM,CAAA,UAAA,CAAW,QAAU,EAAA,OAAA,CAAQ,EAAE,CAAA,EAAG,OAAQ,CAAA,IAAI,CAAC,CAAC,CAAA;AAExD,MAAM,sBAAyB,GAAA,wBAAA;AAC/B,MAAM,mBAAsB,GAAA,sBAAA;AAE5B,MAAM,GAAG,uBAAuB,CAAA,GAAI,OAAQ,CAAA;AAAA,EAC1C,oBAAoB,OAAQ,CAAA;AAAA,IAC1B,IAAM,EAAA,KAAA;AAAA,IACN,OAAS,EAAA,KAAA;AAAA,IACT,MAAQ,EAAA,KAAA;AAAA,IACR,KAAO,EAAA,KAAA;AAAA,IACP,QAAU,EAAA,KAAA;AAAA,IACV,iBAAmB,EAAA,KAAA;AAAA,IACnB,iBAAmB,EAAA,KAAA;AAAA,IACnB,MAAQ,EAAA,EAAA;AAAA,IACR,YAAc,EAAA,KAAA;AAAA,IACd,mBAAqB,EAAA,KAAA;AAAA,IACrB,SAAW,EAAA;AAAA,GACZ,CAAA;AAAA,EACD,oBAAoB,OAAQ,CAAA;AAAA,IAC1B,YAAc,EAAA,KAAA;AAAA,IACd,mBAAqB,EAAA,KAAA;AAAA,IACrB,MAAQ,EAAA;AAAA,GACT;AACH,CAAC,CAAA;AACD,MAAM,wBAAA,GACJ,aAAc,CAAA,CAAC,KAAU,KAAA;AACvB,EAAM,MAAA,SAAA,GAAY,EAAG,CAAA,GAAA,CAAI,KAAK,CAAA;AAC9B,EAAA,IAAI,SAAY,GAAA,CAAA;AACd,IAAM,MAAA,IAAI,MAAM,6CAA6C,CAAA;AAE/D,EAAA,IAAI,CAAC,SAAW,EAAA,OAAO,EAAE,OAAS,EAAA,IAAA,EAAM,OAAO,MAAU,EAAA;AACzD,EAAI,IAAA,KAAA;AACJ,EAAI,IAAA;AACF,IAAA,KAAA,GAAQ,wBAAwB,KAAK,CAAA;AAAA,WAC9B,CAAG,EAAA;AACV,IAAQ,KAAA,GAAA;AAAA,MACN,IAAM,EAAA;AAAA,KACR;AAAA;AAEF,EAAO,OAAA,EAAE,OAAS,EAAA,KAAA,EAAO,KAAM,EAAA;AACjC,CAAC,CAAA;AAEI,MAAM,gBACX,CACE,KAAA,EAKA,iBAEF,KAAA,CAAC,WAAmB,EAAoD,KAAA;AACtE,EAAM,MAAA,QAAA,GAAW,iBAAkB,CAAA,SAAS,CAAE,CAAA,IAAA;AAAA,IAC5C,GAAA,CAAI,CAAC,GAAQ,KAAA;AACX,MAAI,IAAA;AACF,QAAA,OAAO,IAAI,cAAe,CAAA,gBAAA;AAAA,UACxB,sBAAA;AAAA,UACA;AAAA,SACF,CAAE,MAAM,CAAC,CAAA;AAAA,eACF,CAAG,EAAA;AACV,QAAO,OAAA,wBAAA;AAAA;AACT,KACD;AAAA,GACH;AACA,EAAO,OAAA,KAAA;AAAA,IACL,SAAA;AAAA,IACA,CAAA,EAAG,sBAAsB,CAAA,CAAA,EAAI,mBAAmB,CAAA,CAAA;AAAA,IAChD,iBAAA,CAAkB,IAAI,SAAS;AAAA,GAC/B,CAAA,IAAA;AAAA,IACA,eAAe,QAAQ,CAAA;AAAA,IACvB,GAAA,CAAI,CAAC,CAAC,MAAA,EAAQ,OAAO,CAAM,KAAA,OAAA,CAAQ,MAAM,CAAC;AAAA,GAC5C;AACF;;;;"}