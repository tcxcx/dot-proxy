{"version":3,"file":"getObservableClient.mjs","sources":["../../src/getObservableClient.ts"],"sourcesContent":["import type {\n  SubstrateClient,\n  UnsubscribeFn,\n} from \"@polkadot-api/substrate-client\"\nimport { Observable } from \"rxjs\"\nimport { ChainHead$, getChainHead$ } from \"./chainHead\"\nimport getBroadcastTx$ from \"./tx\"\n\nexport interface ObservableClient {\n  chainHead$: (nSubscribers?: number) => ChainHead$\n  broadcastTx$: (transaction: string) => Observable<never>\n  destroy: UnsubscribeFn\n}\n\nconst clientCache = new Map<\n  SubstrateClient,\n  { client: ObservableClient; refCount: number }\n>()\n\nexport const getObservableClient = (\n  substrateClient: SubstrateClient,\n): ObservableClient => {\n  const cached = clientCache.get(substrateClient)\n  if (cached) {\n    cached.refCount++\n    return cached.client\n  }\n\n  const destroy = () => {\n    const cached = clientCache.get(substrateClient)\n    if (!cached || cached.refCount <= 1) {\n      clientCache.delete(substrateClient)\n      substrateClient.destroy()\n    } else {\n      cached.refCount--\n    }\n  }\n\n  let cachedChainhead:\n    | readonly [ChainHead$, (nSubscribers: number) => void]\n    | null = null\n  let currentSubscribers = 0\n  let expectedSubscribers: null | number = null\n\n  const client: ObservableClient = {\n    chainHead$: (_expectedSubscribers) => {\n      currentSubscribers++\n      expectedSubscribers ||= _expectedSubscribers || 1\n      cachedChainhead ||= getChainHead$(substrateClient.chainHead)\n      const [result, start] = cachedChainhead\n      if (expectedSubscribers === currentSubscribers) {\n        const copiedCurrentSubscribers = currentSubscribers\n        currentSubscribers = 0\n        expectedSubscribers = null\n        cachedChainhead = null\n        start(copiedCurrentSubscribers)\n      }\n      return result\n    },\n    broadcastTx$: getBroadcastTx$(substrateClient.transaction),\n    destroy,\n  }\n\n  clientCache.set(substrateClient, { client, refCount: 1 })\n  return client\n}\n"],"names":["cached"],"mappings":";;;;AAcA,MAAM,WAAA,uBAAkB,GAGtB,EAAA;AAEW,MAAA,mBAAA,GAAsB,CACjC,eACqB,KAAA;AACrB,EAAM,MAAA,MAAA,GAAS,WAAY,CAAA,GAAA,CAAI,eAAe,CAAA;AAC9C,EAAA,IAAI,MAAQ,EAAA;AACV,IAAO,MAAA,CAAA,QAAA,EAAA;AACP,IAAA,OAAO,MAAO,CAAA,MAAA;AAAA;AAGhB,EAAA,MAAM,UAAU,MAAM;AACpB,IAAMA,MAAAA,OAAAA,GAAS,WAAY,CAAA,GAAA,CAAI,eAAe,CAAA;AAC9C,IAAA,IAAI,CAACA,OAAAA,IAAUA,OAAO,CAAA,QAAA,IAAY,CAAG,EAAA;AACnC,MAAA,WAAA,CAAY,OAAO,eAAe,CAAA;AAClC,MAAA,eAAA,CAAgB,OAAQ,EAAA;AAAA,KACnB,MAAA;AACL,MAAAA,OAAO,CAAA,QAAA,EAAA;AAAA;AACT,GACF;AAEA,EAAA,IAAI,eAEO,GAAA,IAAA;AACX,EAAA,IAAI,kBAAqB,GAAA,CAAA;AACzB,EAAA,IAAI,mBAAqC,GAAA,IAAA;AAEzC,EAAA,MAAM,MAA2B,GAAA;AAAA,IAC/B,UAAA,EAAY,CAAC,oBAAyB,KAAA;AACpC,MAAA,kBAAA,EAAA;AACA,MAAA,mBAAA,KAAA,mBAAA,GAAwB,oBAAwB,IAAA,CAAA,CAAA;AAChD,MAAoB,eAAA,KAAA,eAAA,GAAA,aAAA,CAAc,gBAAgB,SAAS,CAAA,CAAA;AAC3D,MAAM,MAAA,CAAC,MAAQ,EAAA,KAAK,CAAI,GAAA,eAAA;AACxB,MAAA,IAAI,wBAAwB,kBAAoB,EAAA;AAC9C,QAAA,MAAM,wBAA2B,GAAA,kBAAA;AACjC,QAAqB,kBAAA,GAAA,CAAA;AACrB,QAAsB,mBAAA,GAAA,IAAA;AACtB,QAAkB,eAAA,GAAA,IAAA;AAClB,QAAA,KAAA,CAAM,wBAAwB,CAAA;AAAA;AAEhC,MAAO,OAAA,MAAA;AAAA,KACT;AAAA,IACA,YAAA,EAAc,eAAgB,CAAA,eAAA,CAAgB,WAAW,CAAA;AAAA,IACzD;AAAA,GACF;AAEA,EAAA,WAAA,CAAY,IAAI,eAAiB,EAAA,EAAE,MAAQ,EAAA,QAAA,EAAU,GAAG,CAAA;AACxD,EAAO,OAAA,MAAA;AACT;;;;"}