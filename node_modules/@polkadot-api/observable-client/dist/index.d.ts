import * as _polkadot_api_substrate_client from '@polkadot-api/substrate-client';
import { ChainHead, StorageItemInput, StorageResult, UnsubscribeFn, SubstrateClient } from '@polkadot-api/substrate-client';
import * as rxjs from 'rxjs';
import { Observable, ObservableInput } from 'rxjs';
import * as _polkadot_api_substrate_bindings from '@polkadot-api/substrate-bindings';
import { Decoder, Binary, Codec, SS58String, HexString, ResultPayload } from '@polkadot-api/substrate-bindings';
import { MetadataLookup, getDynamicBuilder } from '@polkadot-api/metadata-builders';

type SystemEvent = {
    phase: {
        type: "ApplyExtrinsic";
        value: number;
    } | {
        type: "Finalization";
    } | {
        type: "Initialization";
    };
    event: {
        type: string;
        value: {
            type: string;
            value: any;
        };
    };
    topics: Array<Binary>;
};
interface RuntimeContext {
    metadataRaw: Uint8Array;
    lookup: MetadataLookup;
    dynamicBuilder: ReturnType<typeof getDynamicBuilder>;
    events: {
        key: string;
        dec: Decoder<Array<SystemEvent>>;
    };
    accountId: Codec<SS58String>;
    assetId: number | null;
}
interface Runtime {
    at: string;
    runtime: Observable<RuntimeContext>;
    addBlock: (block: string) => Runtime;
    deleteBlocks: (blocks: string[]) => number;
    usages: Set<string>;
}

interface PinnedBlock {
    hash: string;
    number: number;
    parent: string;
    children: Set<string>;
    runtime: string;
    refCount: number;
    unpinned?: true;
    recovering: boolean;
}
type PinnedBlocks = {
    best: string;
    finalized: string;
    runtimes: Record<string, Runtime>;
    blocks: Map<string, PinnedBlock>;
    finalizedRuntime: Runtime;
    recovering: boolean;
};

type AnalyzedBlock = {
    hash: HexString;
    found: {
        type: true;
        index: number;
        events: any;
    } | {
        type: false;
        validity: ResultPayload<any, any> | null;
    };
};

type BlockInfo = {
    hash: string;
    number: number;
    parent: string;
};
declare const getChainHead$: (chainHead: ChainHead) => readonly [{
    readonly follow$: rxjs.Connectable<_polkadot_api_substrate_client.NewBlockWithRuntime | (_polkadot_api_substrate_client.BestBlockChanged | _polkadot_api_substrate_client.Finalized) | {
        number: number;
        parentHash: HexString;
        type: "initialized";
        finalizedBlockHashes: string[];
        finalizedBlockRuntime: _polkadot_api_substrate_client.Runtime;
    } | {
        type: "stop-error";
    }>;
    readonly finalized$: Observable<BlockInfo>;
    readonly best$: Observable<BlockInfo>;
    readonly bestBlocks$: Observable<BlockInfo[]>;
    readonly runtime$: Observable<RuntimeContext | null>;
    readonly metadata$: Observable<{
        lookup: {
            id: number;
            path: string[];
            params: {
                name: string;
                type: number | undefined;
            }[];
            def: {
                tag: "composite";
                value: {
                    name: string | undefined;
                    type: number;
                    typeName: string | undefined;
                    docs: string[];
                }[];
            } | {
                tag: "variant";
                value: {
                    name: string;
                    fields: {
                        name: string | undefined;
                        type: number;
                        typeName: string | undefined;
                        docs: string[];
                    }[];
                    index: number;
                    docs: string[];
                }[];
            } | {
                tag: "sequence";
                value: number;
            } | {
                tag: "array";
                value: {
                    len: number;
                    type: number;
                };
            } | {
                tag: "tuple";
                value: number[];
            } | {
                tag: "primitive";
                value: {
                    tag: "bool";
                    value: undefined;
                } | {
                    tag: "char";
                    value: undefined;
                } | {
                    tag: "str";
                    value: undefined;
                } | {
                    tag: "u8";
                    value: undefined;
                } | {
                    tag: "u16";
                    value: undefined;
                } | {
                    tag: "u32";
                    value: undefined;
                } | {
                    tag: "u64";
                    value: undefined;
                } | {
                    tag: "u128";
                    value: undefined;
                } | {
                    tag: "u256";
                    value: undefined;
                } | {
                    tag: "i8";
                    value: undefined;
                } | {
                    tag: "i16";
                    value: undefined;
                } | {
                    tag: "i32";
                    value: undefined;
                } | {
                    tag: "i64";
                    value: undefined;
                } | {
                    tag: "i128";
                    value: undefined;
                } | {
                    tag: "i256";
                    value: undefined;
                };
            } | {
                tag: "compact";
                value: number;
            } | {
                tag: "bitSequence";
                value: {
                    bitStoreType: number;
                    bitOrderType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            docs: string[];
            name: string;
            storage: {
                prefix: string;
                items: {
                    name: string;
                    modifier: number;
                    type: {
                        tag: "map";
                        value: {
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        };
                    } | {
                        tag: "plain";
                        value: number;
                    };
                    fallback: HexString;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            events: number | undefined;
            constants: {
                name: string;
                type: number;
                value: HexString;
                docs: string[];
            }[];
            errors: number | undefined;
            index: number;
        }[];
        extrinsic: {
            type: number;
            version: number;
            signedExtensions: {
                identifier: string;
                type: number;
                additionalSigned: number;
            }[];
        };
        type: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    type: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
    } | {
        lookup: {
            id: number;
            path: string[];
            params: {
                name: string;
                type: number | undefined;
            }[];
            def: {
                tag: "composite";
                value: {
                    name: string | undefined;
                    type: number;
                    typeName: string | undefined;
                    docs: string[];
                }[];
            } | {
                tag: "variant";
                value: {
                    name: string;
                    fields: {
                        name: string | undefined;
                        type: number;
                        typeName: string | undefined;
                        docs: string[];
                    }[];
                    index: number;
                    docs: string[];
                }[];
            } | {
                tag: "sequence";
                value: number;
            } | {
                tag: "array";
                value: {
                    len: number;
                    type: number;
                };
            } | {
                tag: "tuple";
                value: number[];
            } | {
                tag: "primitive";
                value: {
                    tag: "bool";
                    value: undefined;
                } | {
                    tag: "char";
                    value: undefined;
                } | {
                    tag: "str";
                    value: undefined;
                } | {
                    tag: "u8";
                    value: undefined;
                } | {
                    tag: "u16";
                    value: undefined;
                } | {
                    tag: "u32";
                    value: undefined;
                } | {
                    tag: "u64";
                    value: undefined;
                } | {
                    tag: "u128";
                    value: undefined;
                } | {
                    tag: "u256";
                    value: undefined;
                } | {
                    tag: "i8";
                    value: undefined;
                } | {
                    tag: "i16";
                    value: undefined;
                } | {
                    tag: "i32";
                    value: undefined;
                } | {
                    tag: "i64";
                    value: undefined;
                } | {
                    tag: "i128";
                    value: undefined;
                } | {
                    tag: "i256";
                    value: undefined;
                };
            } | {
                tag: "compact";
                value: number;
            } | {
                tag: "bitSequence";
                value: {
                    bitStoreType: number;
                    bitOrderType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            docs: string[];
            name: string;
            storage: {
                prefix: string;
                items: {
                    name: string;
                    modifier: number;
                    type: {
                        tag: "map";
                        value: {
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        };
                    } | {
                        tag: "plain";
                        value: number;
                    };
                    fallback: HexString;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            events: number | undefined;
            constants: {
                name: string;
                type: number;
                value: HexString;
                docs: string[];
            }[];
            errors: number | undefined;
            index: number;
        }[];
        extrinsic: {
            version: number;
            address: number;
            call: number;
            signature: number;
            extra: number;
            signedExtensions: {
                identifier: string;
                type: number;
                additionalSigned: number;
            }[];
        };
        type: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    type: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
        outerEnums: {
            call: number;
            event: number;
            error: number;
        };
        custom: [string, {
            type: number;
            value: HexString;
        }][];
    } | null>;
    readonly genesis$: Observable<string & {
        __hexString?: unknown;
    }>;
    readonly header$: (hash: string | null) => Observable<{
        parentHash: HexString;
        number: number;
        stateRoot: HexString;
        extrinsicRoot: HexString;
        digests: _polkadot_api_substrate_bindings.Enum<{
            consensus: {
                engine: string;
                payload: HexString;
            };
            seal: {
                engine: string;
                payload: HexString;
            };
            preRuntime: {
                engine: string;
                payload: HexString;
            };
            runtimeUpdated: undefined;
        }>[];
    }>;
    readonly body$: (hash: string) => Observable<string[]>;
    readonly call$: (hash: string | null, fn: string, args: string) => Observable<string>;
    readonly storage$: <Type extends StorageItemInput["type"], M extends undefined | ((data: StorageResult<Type>, ctx: RuntimeContext) => any)>(hash: string | null, type: Type, keyMapper: (ctx: RuntimeContext) => string, childTrie?: string | null | undefined, mapper?: M | undefined) => Observable<undefined extends M ? StorageResult<Type> : {
        raw: StorageResult<Type>;
        mapped: ReturnType<NonNullable<M>>;
    }>;
    readonly storageQueries$: (hash: string | null, queries: StorageItemInput[], childTrie?: string | undefined) => Observable<_polkadot_api_substrate_client.StorageItemResponse>;
    readonly eventsAt$: (hash: string | null) => Observable<SystemEvent[]>;
    readonly holdBlock: (hash: string) => () => void;
    readonly trackTx$: (tx: string) => Observable<AnalyzedBlock>;
    readonly trackTxWithoutEvents$: (tx: string) => Observable<AnalyzedBlock>;
    readonly validateTx$: (blockHash: string, tx: string) => Observable<_polkadot_api_substrate_bindings.ResultPayload<any, any>>;
    readonly pinnedBlocks$: Observable<PinnedBlocks>;
    readonly withRuntime: <T>(mapper: (x: T) => string) => (source$: Observable<T>) => Observable<[T, RuntimeContext]>;
    readonly getRuntimeContext$: (hash: string | null) => Observable<RuntimeContext>;
    readonly unfollow: () => void;
}, (_nSubscribers: number) => void];
type ChainHead$ = ReturnType<typeof getChainHead$>[0];

declare class BlockNotPinnedError extends Error {
    constructor(hash: string, label: string);
}
declare class BlockPrunedError extends Error {
    constructor();
}
declare class NotBestBlockError extends Error {
    constructor();
}

interface ObservableClient {
    chainHead$: (nSubscribers?: number) => ChainHead$;
    broadcastTx$: (transaction: string) => Observable<never>;
    destroy: UnsubscribeFn;
}
declare const getObservableClient: (substrateClient: SubstrateClient) => ObservableClient;

declare const isBestOrFinalizedBlock: (blocks$: Observable<PinnedBlocks>, blockHash: string) => Observable<"best" | "finalized" | null>;

declare const concatMapEager: <I, O>(mapper: (outterValue: I, index: number) => ObservableInput<O>, concurrent?: number) => (source$: Observable<I>) => Observable<O>;

export { type AnalyzedBlock, type BlockInfo, BlockNotPinnedError, BlockPrunedError, type ChainHead$, NotBestBlockError, type ObservableClient, type PinnedBlock, type PinnedBlocks, type RuntimeContext, type SystemEvent, concatMapEager, getObservableClient, isBestOrFinalizedBlock };
