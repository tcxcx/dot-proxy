{"version":3,"file":"index.js","sources":["../src/utils/shareLatest.ts","../src/utils/concatMapEager.ts","../src/utils/with-default-value.ts","../src/utils/delay-unsubscription.ts","../src/chainHead/enhancers/operationLimitRecovery.ts","../src/chainHead/errors.ts","../src/chainHead/enhancers/optionalHash.ts","../src/chainHead/enhancers/fromAbortControllerFn.ts","../src/chainHead/enhancers/lazyFollower.ts","../src/chainHead/streams/block-operations.ts","../src/chainHead/enhancers/whileBestBlock.ts","../src/chainHead/enhancers/withStopRecovery.ts","../src/chainHead/storage-queries.ts","../src/chainHead/streams/follow.ts","../src/chainHead/streams/get-runtime-creator.ts","../src/chainHead/streams/pinned-blocks.ts","../src/chainHead/track-tx.ts","../src/chainHead/validate-tx.ts","../src/chainHead/chainHead.ts","../src/tx.ts","../src/getObservableClient.ts"],"sourcesContent":["import { Observable, ReplaySubject, share } from \"rxjs\"\n\nexport const shareLatest: <T>(base: Observable<T>) => Observable<T> = share({\n  connector: () => new ReplaySubject(1),\n  resetOnError: true,\n  resetOnComplete: true,\n  resetOnRefCountZero: true,\n})\n","import { defer, Observable, ObservableInput, Subscription } from \"rxjs\"\n\nexport const concatMapEager =\n  <I, O>(\n    mapper: (outterValue: I, index: number) => ObservableInput<O>,\n    concurrent = Infinity,\n  ) =>\n  (source$: Observable<I>) =>\n    new Observable<O>((observer) => {\n      let topSubscription: Subscription\n      const queues = new Map<number, Observable<O>>()\n      const innerSubscriptions = new Map<number, Subscription>()\n      const results = new Map<number, O[]>()\n\n      let mapperIdx = 0\n      let subscriptionIdx = 0\n      let observerIdx = 0\n\n      const nextSubscription = () => {\n        const inner$ = queues.get(subscriptionIdx)\n        if (!inner$) {\n          if (\n            innerSubscriptions.size === 0 &&\n            (typeof topSubscription === \"undefined\" || topSubscription.closed)\n          ) {\n            observer.complete()\n          }\n          return\n        }\n        const idx = subscriptionIdx++\n        queues.delete(idx)\n        if (observerIdx !== idx) {\n          results.set(idx, [])\n        }\n\n        let isCompleted = false\n        let subscription = inner$.subscribe({\n          next(x: O) {\n            if (observerIdx === idx) {\n              observer.next(x)\n            } else {\n              results.get(idx)!.push(x)\n            }\n          },\n          complete() {\n            isCompleted = true\n            innerSubscriptions.delete(idx)\n            if (idx === observerIdx) {\n              observerIdx++\n              while (results.has(observerIdx)) {\n                results.get(observerIdx)!.forEach((x) => observer.next(x))\n                results.delete(observerIdx)\n                if (innerSubscriptions.has(observerIdx)) {\n                  break\n                }\n                observerIdx++\n              }\n            }\n            nextSubscription()\n          },\n          error(e: any) {\n            observer.error(e)\n          },\n        })\n\n        if (!isCompleted) innerSubscriptions.set(idx, subscription)\n      }\n\n      topSubscription = source$.subscribe({\n        next(outterValue: I) {\n          const idx = mapperIdx++\n          queues.set(\n            idx,\n            defer(() => mapper(outterValue, idx)),\n          )\n          if (innerSubscriptions.size < concurrent) {\n            nextSubscription()\n          }\n        },\n        error(e: any) {\n          observer.error(e)\n        },\n        complete() {\n          if (innerSubscriptions.size === 0) {\n            observer.complete()\n          }\n        },\n      })\n\n      return () => {\n        innerSubscriptions.forEach((subscription) => subscription.unsubscribe())\n        topSubscription.unsubscribe()\n        queues.clear()\n        results.clear()\n      }\n    })\n","import { Observable } from \"rxjs\"\n\nexport const withDefaultValue =\n  <V, T>(defaultValue: V) =>\n  (source$: Observable<T>): Observable<V | T> =>\n    new Observable((observer) => {\n      let hasEmited = false\n\n      const subscription = source$.subscribe({\n        next(v) {\n          hasEmited = true\n          observer.next(v)\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n\n      if (!hasEmited) observer.next(defaultValue)\n\n      return subscription\n    })\n","import { Observable } from \"rxjs\"\n\nexport const delayUnsubscription =\n  (ms?: number) =>\n  <T>(source: Observable<T>): Observable<T> =>\n    new Observable((observer) => {\n      const subscription = source.subscribe({\n        next(v) {\n          observer.next(v)\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n      const unsubscribe = () => subscription.unsubscribe()\n      return () => {\n        if (ms != null) setTimeout(unsubscribe, ms)\n        else Promise.resolve().then(unsubscribe)\n      }\n    })\n","import { OperationLimitError } from \"@polkadot-api/substrate-client\"\nimport type { Subscriber } from \"rxjs\"\nimport { Observable } from \"rxjs\"\n\ninterface PendingTaskNode<T> {\n  value: T\n  next?: PendingTaskNode<T>\n  prev?: PendingTaskNode<T>\n}\n\nexport default class PendingTaskQueue<T> {\n  private first?: PendingTaskNode<T>\n  private last?: PendingTaskNode<T>\n\n  private getRemoveFn(node: PendingTaskNode<T>) {\n    return () => {\n      if (node.prev) {\n        node.prev.next = node.next\n      } else {\n        this.first = node.next\n      }\n\n      if (node.next) {\n        node.next.prev = node.prev\n      } else {\n        this.last = node.prev\n      }\n\n      delete node.prev\n      delete node.next\n    }\n  }\n\n  push(value: T) {\n    const newNode: PendingTaskNode<T> = { value }\n\n    if (this.last === undefined) {\n      this.last = this.first = newNode\n    } else {\n      this.last.next = newNode\n      newNode.prev = this.last\n\n      this.last = newNode\n    }\n\n    return this.getRemoveFn(newNode)\n  }\n\n  unshift(value: T) {\n    this.first = { value, next: this.first }\n    this.first.next && (this.first.next.prev = this.first)\n    this.last ||= this.first\n    return this.getRemoveFn(this.first)\n  }\n\n  pop() {\n    const result = this.first?.value\n\n    if (this.first) {\n      this.first = this.first.next\n\n      if (!this.first) {\n        this.last = undefined\n      } else {\n        delete this.first.prev?.next\n        delete this.first.prev\n      }\n    }\n\n    return result\n  }\n\n  isEmpty() {\n    return !this.first\n  }\n}\n\nexport const getWithRecovery = () => {\n  const tearDownOperations = new Map<Observable<any>, () => void>()\n\n  const setTeardown = (observable: Observable<any>, cb: () => void) => {\n    tearDownOperations.set(observable, () => {\n      tearDownOperations.delete(observable)\n      cb()\n    })\n  }\n\n  const teardown = (observable: Observable<any>) => {\n    tearDownOperations.get(observable)?.()\n  }\n\n  const pendingTasks = new PendingTaskQueue<{\n    observer: Subscriber<any>\n    source$: Observable<any>\n  }>()\n  const unshift = pendingTasks.unshift.bind(pendingTasks)\n  const push = pendingTasks.push.bind(pendingTasks)\n\n  const addTask = (\n    task: {\n      observer: Subscriber<any>\n      source$: Observable<any>\n    },\n    topPriority: boolean,\n  ) => {\n    const fn = topPriority ? unshift : push\n    setTeardown(task.source$, fn(task))\n  }\n\n  const onEmptySlot = () => {\n    const data = pendingTasks.pop()\n    if (!data) return\n\n    tearDownOperations.delete(data.source$)\n    process(data)\n  }\n\n  const process = <T>(data: {\n    observer: Subscriber<T>\n    source$: Observable<T>\n  }) => {\n    const { source$, observer } = data\n\n    let isOperationLimit = false\n    const subscription = source$.subscribe({\n      next(x) {\n        observer.next(x)\n      },\n      error(e) {\n        ;(isOperationLimit = e instanceof OperationLimitError)\n          ? addTask(data, true)\n          : observer.error(e)\n      },\n      complete() {\n        observer.complete()\n      },\n    })\n\n    if (!subscription.closed) {\n      setTeardown(source$, () => {\n        subscription.unsubscribe()\n        onEmptySlot()\n      })\n    } else if (!isOperationLimit) onEmptySlot()\n  }\n\n  const withRecovery =\n    (topPriority = false) =>\n    <T>(source$: Observable<T>): Observable<T> =>\n      new Observable((observer) => {\n        const pendingTask = { observer, source$ }\n\n        if (pendingTasks.isEmpty()) {\n          process(pendingTask)\n        } else {\n          addTask(pendingTask, topPriority)\n        }\n\n        return () => {\n          teardown(source$)\n        }\n      })\n\n  const withNormalRecovery = withRecovery()\n  const withRecoveryFn =\n    <Args extends Array<any>, T>(fn: (...args: Args) => Observable<T>) =>\n    (...args: Args) =>\n      withNormalRecovery(fn(...args))\n\n  return { withRecovery, withRecoveryFn }\n}\n","export class BlockNotPinnedError extends Error {\n  constructor(hash: string, label: string) {\n    super(`Block ${hash} is not pinned (${label})`)\n    this.name = \"BlockNotPinnedError\"\n  }\n}\n\nexport class BlockPrunedError extends Error {\n  constructor() {\n    super(\"Block pruned\")\n    this.name = \"BlockPrunedError\"\n  }\n}\n\nexport class NotBestBlockError extends Error {\n  constructor() {\n    super(\"Block is not best block or finalized\")\n    this.name = \"NotBestBlockError\"\n  }\n}\n","import {\n  MonoTypeOperatorFunction,\n  Observable,\n  catchError,\n  concatMap,\n  mergeMap,\n  take,\n  throwError,\n  timer,\n} from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { OperationInaccessibleError } from \"@polkadot-api/substrate-client\"\n\nconst dynamicBlocks = new Set([\"best\", \"finalized\", null])\n\nconst operable = <T>(source$: Observable<T>) => {\n  const result: Observable<T> = source$.pipe(\n    catchError((e) =>\n      e instanceof OperationInaccessibleError\n        ? timer(750).pipe(concatMap(() => result))\n        : throwError(() => e),\n    ),\n  )\n  return result\n}\n\nexport const getWithOptionalhash$ = (\n  finalized$: Observable<string>,\n  best$: Observable<string>,\n  usingBlock: <T>(blockHash: string) => MonoTypeOperatorFunction<T>,\n) => {\n  return <Args extends Array<any>, T>(\n      fn: (hash: string, ...args: Args) => Observable<T>,\n    ) =>\n    (hash: string | null, ...args: Args) => {\n      if (!dynamicBlocks.has(hash))\n        return operable(fn(hash as string, ...args)).pipe(\n          usingBlock(hash as string),\n        )\n\n      const hash$ = hash === \"best\" ? best$ : finalized$\n      const result$: Observable<T> = hash$.pipe(\n        take(1),\n        mergeMap((h) => fn(h, ...args).pipe(usingBlock(h))),\n        catchError((e) => {\n          return e instanceof BlockNotPinnedError\n            ? result$\n            : throwError(() => e)\n        }),\n      )\n      return operable(result$)\n    }\n}\n","import { Observable } from \"rxjs\"\n\nexport const fromAbortControllerFn =\n  <A extends Array<any>, T>(\n    fn: (...args: [...A, ...[abortSignal: AbortSignal]]) => Promise<T>,\n  ) =>\n  (...args: A): Observable<T> =>\n    new Observable((observer) => {\n      let aborter: AbortController | undefined = new AbortController()\n\n      fn(...[...args, aborter.signal]).then(\n        (value: any) => {\n          observer.next(value)\n          observer.complete()\n        },\n        (error: any) => {\n          observer.error(error)\n        },\n      )\n\n      return () => {\n        observer.unsubscribe()\n        aborter!.abort()\n        aborter = undefined\n      }\n    })\n","import { FollowResponse } from \"@polkadot-api/substrate-client\"\n\nexport const withLazyFollower =\n  (getFollower: () => FollowResponse) =>\n  <Key extends keyof FollowResponse>(key: Key): FollowResponse[Key] =>\n  (...args: any[]) =>\n    (getFollower() as any)[key](...args)\n","import { Observable, distinctUntilChanged, map, takeWhile } from \"rxjs\"\nimport { PinnedBlocks } from \"./pinned-blocks\"\n\nexport const isBestOrFinalizedBlock = (\n  blocks$: Observable<PinnedBlocks>,\n  blockHash: string,\n) =>\n  blocks$.pipe(\n    takeWhile((b) => b.blocks.has(blockHash)),\n    distinctUntilChanged(\n      (a, b) => a.finalized === b.finalized && a.best === b.best,\n    ),\n    map((pinned): \"best\" | \"finalized\" | null => {\n      if (\n        pinned.blocks.get(blockHash)!.number >\n        pinned.blocks.get(pinned.best)!.number\n      )\n        return null\n\n      const { number } = pinned.blocks.get(blockHash)!\n      let current = pinned.blocks.get(pinned.best)!\n      let isFinalized = pinned.finalized === current.hash\n      while (current.number > number) {\n        current = pinned.blocks.get(current.parent)!\n        isFinalized = isFinalized || pinned.finalized === current.hash\n      }\n      if (isFinalized) return \"finalized\"\n      return current.hash === blockHash ? \"best\" : null\n    }),\n    distinctUntilChanged(),\n    takeWhile((x) => x !== \"finalized\", true),\n  )\n","import { Finalized } from \"@polkadot-api/substrate-client\"\nimport {\n  Observable,\n  filter,\n  mergeMap,\n  pipe,\n  switchMap,\n  take,\n  throwError,\n} from \"rxjs\"\nimport { BlockPrunedError, NotBestBlockError } from \"../errors\"\nimport { isBestOrFinalizedBlock } from \"../streams/block-operations\"\nimport { FollowEvent } from \"../streams/follow\"\nimport type { PinnedBlocks } from \"../streams/pinned-blocks\"\n\nexport function withEnsureCanonicalChain<A extends Array<any>, T>(\n  blocks$: Observable<PinnedBlocks>,\n  follow$: Observable<FollowEvent>,\n  fn: (hash: string, ...args: A) => Observable<T>,\n): (hash: string, ensureCanonical: boolean, ...args: A) => Observable<T> {\n  return (hash: string, ensureCanonical, ...args: A) => {\n    const enhancer: <T>(x: Observable<T>) => Observable<T> = ensureCanonical\n      ? pipe(\n          throwWhenPrune(\n            hash,\n            follow$.pipe(\n              filter((evt): evt is Finalized => evt.type === \"finalized\"),\n              mergeMap((evt) => evt.prunedBlockHashes),\n            ),\n          ),\n          onlyIfIsBestOrFinalized(hash, blocks$),\n        )\n      : (x) => x\n\n    return enhancer(fn(hash, ...args))\n  }\n}\n\nconst onlyIfIsBestOrFinalized =\n  <T>(hash: string, blocks$: Observable<PinnedBlocks>) =>\n  (source$: Observable<T>) =>\n    isBestOrFinalizedBlock(blocks$, hash).pipe(\n      take(1),\n      switchMap((isBest) =>\n        isBest ? source$ : throwError(() => new NotBestBlockError()),\n      ),\n    )\n\nconst throwWhenPrune =\n  <T>(hash: string, pruned$: Observable<string>) =>\n  (source$: Observable<T>) =>\n    new Observable<T>((subscriber) => {\n      const prunedSubscription = pruned$\n        .pipe(filter((h) => h === hash))\n        .subscribe(() => {\n          subscriber.error(new BlockPrunedError())\n        })\n      const sourceSubscription = source$.subscribe(subscriber)\n\n      return () => {\n        prunedSubscription.unsubscribe()\n        sourceSubscription.unsubscribe()\n      }\n    })\n","import { Observable, ObservedValueOf, Subscription } from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { PinnedBlocks } from \"../streams\"\n\nexport function withStopRecovery<A extends Array<any>, T>(\n  blocks$: Observable<PinnedBlocks>,\n  fn: (hash: string, ...args: A) => Observable<T>,\n  label: string,\n) {\n  return (hash: string, ...args: A) => {\n    const source$ = fn(hash, ...args)\n\n    return new Observable<ObservedValueOf<typeof source$>>((observer) => {\n      let sourceSub: Subscription | null = null\n      let isSubscribed = false\n      const performSourceSub = () => {\n        if (isSubscribed) return\n        isSubscribed = true\n        sourceSub = source$.subscribe({\n          next: (v) => observer.next(v),\n          error: (e) => observer.error(e),\n          complete: () => observer.complete(),\n        })\n        sourceSub.add(() => {\n          isSubscribed = false\n          sourceSub = null\n        })\n      }\n\n      let isRecovering = false\n      const blockSub = blocks$.subscribe({\n        next: (v) => {\n          const block = v.blocks.get(hash)\n          if (!block) {\n            // This branch conflicts with BlockPrunedError, as the block might disappear when it gets pruned\n            // We can avoid this conflict by checking that we're actually recovering.\n            if (isRecovering) {\n              observer.error(new BlockNotPinnedError(hash, label))\n            }\n          } else if (block.recovering) {\n            // Pause while it's recovering, as we don't know if the block is there\n            sourceSub?.unsubscribe()\n          } else {\n            performSourceSub()\n          }\n          isRecovering = v.recovering\n        },\n        error: (e) => observer.error(e),\n      })\n\n      return () => {\n        blockSub.unsubscribe()\n        sourceSub?.unsubscribe()\n      }\n    })\n  }\n}\n","import {\n  FollowResponse,\n  StorageItemInput,\n  StorageItemResponse,\n} from \"@polkadot-api/substrate-client\"\nimport { Observable, mergeAll } from \"rxjs\"\nimport { getWithRecovery } from \"./enhancers\"\n\nexport const getRecoveralStorage$ = (\n  getFollower: () => FollowResponse,\n  withRecovery: ReturnType<typeof getWithRecovery>[\"withRecovery\"],\n) => {\n  const recoveralStorage$ = (\n    hash: string,\n    queries: Array<StorageItemInput>,\n    childTrie: string | null,\n    isHighPriority: boolean,\n  ): Observable<StorageItemResponse> =>\n    new Observable<StorageItemResponse[] | Observable<StorageItemResponse>>(\n      (observer) =>\n        getFollower().storageSubscription(\n          hash,\n          queries,\n          childTrie ?? null,\n          (items) => {\n            observer.next(items)\n          },\n          (error) => {\n            observer.error(error)\n          },\n          () => {\n            observer.complete()\n          },\n          (nDiscarded) => {\n            // TODO: leave it like this b/c due to a bug on\n            // PolkadotSDK sometimes this value is `undefined`\n            // https://github.com/paritytech/polkadot-sdk/issues/6683\n            if (nDiscarded > 0)\n              observer.next(\n                recoveralStorage$(\n                  hash,\n                  queries.slice(-nDiscarded),\n                  childTrie,\n                  true,\n                ),\n              )\n          },\n        ),\n    ).pipe(mergeAll(), withRecovery(isHighPriority))\n\n  return recoveralStorage$\n}\n","import { BlockHeader, blockHeader } from \"@polkadot-api/substrate-bindings\"\nimport {\n  ChainHead,\n  FollowEventWithRuntime,\n  FollowResponse,\n  StopError,\n} from \"@polkadot-api/substrate-client\"\nimport {\n  Observable,\n  ObservedValueOf,\n  Subscription,\n  concatMap,\n  connectable,\n  noop,\n  of,\n} from \"rxjs\"\n\nconst withInitializedNumber =\n  (getHeader: (hash: string) => Promise<BlockHeader>) =>\n  (source$: Observable<FollowEventWithRuntime>) =>\n    source$.pipe(\n      concatMap((event) => {\n        return event.type !== \"initialized\"\n          ? of(event)\n          : getHeader(event.finalizedBlockHashes[0]).then((header) => ({\n              ...event,\n              number: header.number,\n              parentHash: header.parentHash,\n            }))\n      }),\n    )\n\nexport const getFollow$ = (chainHead: ChainHead) => {\n  let follower: FollowResponse | null = null\n  let unfollow: () => void = noop\n\n  const getFollower = () => {\n    if (!follower) throw new Error(\"Missing chainHead subscription\")\n    return follower\n  }\n\n  const getHeader = (hash: string) =>\n    getFollower().header(hash).then(blockHeader.dec)\n\n  const follow$ = connectable(\n    new Observable<FollowEventWithRuntime>((observer) => {\n      follower = chainHead(\n        true,\n        (e) => {\n          observer.next(e)\n        },\n        (e) => {\n          follower = null\n          observer.error(e)\n        },\n      )\n      unfollow = () => {\n        observer.complete()\n        follower?.unfollow()\n      }\n    }).pipe(withInitializedNumber(getHeader), retryChainHeadError()),\n  )\n\n  const startFollow = () => {\n    follow$.connect()\n    return () => {\n      unfollow()\n    }\n  }\n\n  return {\n    getHeader,\n    getFollower,\n    startFollow,\n    follow$,\n  }\n}\n\nconst retryChainHeadError =\n  <T extends { type: string }>() =>\n  (source$: Observable<T>) =>\n    new Observable<\n      | T\n      | {\n          type: \"stop-error\"\n        }\n    >((observer) => {\n      const subscription = new Subscription()\n      const subscribe = () =>\n        source$.subscribe({\n          next: (v) => observer.next(v),\n          error: (e) => {\n            if (e instanceof StopError) {\n              observer.next({ type: \"stop-error\" })\n            } else {\n              console.warn(\"ChainHead follow request failed, retrying…\", e)\n            }\n            subscription.add(subscribe())\n          },\n          complete: () => observer.complete(),\n        })\n      subscription.add(subscribe())\n      return subscription\n    })\n\nexport type FollowEvent =\n  | ObservedValueOf<ReturnType<ReturnType<typeof withInitializedNumber>>>\n  | { type: \"stop-error\" }\n","import {\n  getDynamicBuilder,\n  getLookupFn,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport {\n  AccountId,\n  Binary,\n  Bytes,\n  Codec,\n  Decoder,\n  metadata as metadataCodec,\n  Option,\n  SS58String,\n  u32,\n  V14,\n  V15,\n  Vector,\n} from \"@polkadot-api/substrate-bindings\"\nimport { toHex } from \"@polkadot-api/utils\"\nimport {\n  catchError,\n  EMPTY,\n  map,\n  mergeMap,\n  Observable,\n  of,\n  shareReplay,\n  timer,\n} from \"rxjs\"\nimport { BlockNotPinnedError } from \"../errors\"\nimport { OperationInaccessibleError } from \"@polkadot-api/substrate-client\"\n\nexport type SystemEvent = {\n  phase:\n    | { type: \"ApplyExtrinsic\"; value: number }\n    | { type: \"Finalization\" }\n    | { type: \"Initialization\" }\n  event: {\n    type: string\n    value: {\n      type: string\n      value: any\n    }\n  }\n  topics: Array<Binary>\n}\n\nexport interface RuntimeContext {\n  metadataRaw: Uint8Array\n  lookup: MetadataLookup\n  dynamicBuilder: ReturnType<typeof getDynamicBuilder>\n  events: {\n    key: string\n    dec: Decoder<Array<SystemEvent>>\n  }\n  accountId: Codec<SS58String>\n  assetId: number | null\n}\n\nexport interface Runtime {\n  at: string\n  runtime: Observable<RuntimeContext>\n  addBlock: (block: string) => Runtime\n  deleteBlocks: (blocks: string[]) => number\n  usages: Set<string>\n}\n\nconst v15Args = toHex(u32.enc(15))\nconst opaqueBytes = Bytes()\nconst optionalOpaqueBytes = Option(opaqueBytes)\nconst u32ListDecoder = Vector(u32).dec\n\nexport const getRuntimeCreator = (\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n) => {\n  const getMetadata$ = (\n    getHash: () => string | null,\n  ): Observable<{ metadataRaw: Uint8Array; metadata: V14 | V15 }> => {\n    const recoverCall$ = (method: string, args: string): Observable<string> => {\n      const hash = getHash()\n      return hash\n        ? call$(hash, method, args).pipe(\n            catchError((e) => {\n              if (e instanceof BlockNotPinnedError)\n                return recoverCall$(method, args)\n              if (e instanceof OperationInaccessibleError)\n                return timer(750).pipe(\n                  mergeMap(() => recoverCall$(method, args)),\n                )\n              throw e\n            }),\n          )\n        : EMPTY\n    }\n\n    const versions = recoverCall$(\"Metadata_metadata_versions\", \"\").pipe(\n      map(u32ListDecoder),\n    )\n\n    const v14 = recoverCall$(\"Metadata_metadata\", \"\").pipe(\n      map((x) => {\n        const metadataRaw = opaqueBytes.dec(x)!\n        const metadata = metadataCodec.dec(metadataRaw)\n        return { metadata: metadata.metadata.value as V14, metadataRaw }\n      }),\n    )\n\n    const v15 = recoverCall$(\"Metadata_metadata_at_version\", v15Args).pipe(\n      map((x) => {\n        const metadataRaw = optionalOpaqueBytes.dec(x)!\n        const metadata = metadataCodec.dec(metadataRaw)\n        return { metadata: metadata.metadata.value as V15, metadataRaw }\n      }),\n    )\n\n    return versions.pipe(\n      catchError(() => of([14])),\n      mergeMap((v) => (v.includes(15) ? v15 : v14)),\n    )\n  }\n\n  return (getHash: () => string | null): Runtime => {\n    const initialHash = getHash()!\n    const usages = new Set<string>([initialHash])\n\n    const runtimeContext$: Observable<RuntimeContext> = getMetadata$(\n      getHash,\n    ).pipe(\n      map(({ metadata, metadataRaw }) => {\n        const lookup = getLookupFn(metadata)\n        const dynamicBuilder = getDynamicBuilder(lookup)\n        const events = dynamicBuilder.buildStorage(\"System\", \"Events\")\n\n        const assetPayment = metadata.extrinsic.signedExtensions.find(\n          (x) => x.identifier === \"ChargeAssetTxPayment\",\n        )\n\n        let assetId: null | number = null\n        if (assetPayment) {\n          const assetTxPayment = lookup(assetPayment.type)\n          if (assetTxPayment.type === \"struct\") {\n            const optionalAssetId = assetTxPayment.value.asset_id\n            if (optionalAssetId.type === \"option\")\n              assetId = optionalAssetId.value.id\n          }\n        }\n\n        return {\n          assetId,\n          metadataRaw,\n          lookup,\n          dynamicBuilder,\n          events: {\n            key: events.keys.enc(),\n            dec: events.value.dec as any,\n          },\n          accountId: AccountId(dynamicBuilder.ss58Prefix),\n        }\n      }),\n      shareReplay(1),\n    )\n\n    const result: Runtime = {\n      at: initialHash,\n      runtime: runtimeContext$,\n      addBlock: (block: string) => {\n        usages.add(block)\n        return result\n      },\n      deleteBlocks: (blocks) => {\n        blocks.forEach((block) => {\n          usages.delete(block)\n        })\n        return usages.size\n      },\n      usages,\n    }\n    runtimeContext$.subscribe({\n      error() {},\n    })\n\n    return result\n  }\n}\n","import { shareLatest } from \"@/utils\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\nimport { Observable, Subject, filter, map, merge, scan } from \"rxjs\"\nimport { withStopRecovery } from \"../enhancers\"\nimport type { FollowEvent } from \"./follow\"\nimport { Runtime, getRuntimeCreator } from \"./get-runtime-creator\"\n\nexport interface PinnedBlock {\n  hash: string\n  number: number\n  parent: string\n  children: Set<string>\n  runtime: string\n  refCount: number\n  unpinned?: true\n  recovering: boolean\n}\n\nexport interface BlockUsageEvent {\n  type: \"blockUsage\"\n  value: { type: \"hold\"; hash: string } | { type: \"release\"; hash: string }\n}\n\nexport type PinnedBlocks = {\n  best: string\n  finalized: string\n  runtimes: Record<string, Runtime>\n  blocks: Map<string, PinnedBlock>\n  finalizedRuntime: Runtime\n  recovering: boolean\n}\n\nconst createRuntimeGetter = (pinned: PinnedBlocks, startAt: HexString) => {\n  return () => {\n    const runtime = pinned.runtimes[startAt]\n    if (!runtime) return pinned.blocks.has(startAt) ? startAt : null\n    const winner = [...runtime.usages]\n      .reverse()\n      .find((x) => !pinned.blocks.get(x)!.unpinned)\n    return winner ?? null\n  }\n}\n\nconst deleteBlock = (blocks: PinnedBlocks[\"blocks\"], blockHash: string) => {\n  blocks.get(blocks.get(blockHash)!.parent)?.children.delete(blockHash)\n  blocks.delete(blockHash)\n}\n\nconst deleteBlocks = (blocks: PinnedBlocks, toDelete: string[]) => {\n  toDelete.forEach((hash) => {\n    deleteBlock(blocks.blocks, hash)\n  })\n\n  Object.entries(blocks.runtimes)\n    .map(([key, value]) => ({\n      key,\n      usages: value.deleteBlocks(toDelete),\n    }))\n    .filter((x) => x.usages === 0)\n    .map((x) => x.key)\n    .forEach((unusedRuntime) => {\n      delete blocks.runtimes[unusedRuntime]\n    })\n}\n\nexport const getPinnedBlocks$ = (\n  follow$: Observable<FollowEvent>,\n  call$: (hash: string, method: string, args: string) => Observable<string>,\n  blockUsage$: Subject<BlockUsageEvent>,\n  onUnpin: (blocks: string[]) => void,\n  deleteFromCache: (block: string) => void,\n) => {\n  const pinnedBlocks$: Observable<PinnedBlocks> = merge(\n    blockUsage$,\n    follow$,\n  ).pipe(\n    scan((acc, event) => {\n      switch (event.type) {\n        case \"initialized\":\n          if (acc.recovering) {\n            const isConnected = event.finalizedBlockHashes.some((hash) =>\n              acc.blocks.has(hash),\n            )\n            if (!isConnected) {\n              acc = getInitialPinnedBlocks()\n            }\n          }\n\n          const [finalizedHash] = event.finalizedBlockHashes.slice(-1)\n          acc.finalized = acc.best = finalizedHash\n\n          const lastIdx = event.finalizedBlockHashes.length - 1\n          event.finalizedBlockHashes.forEach((hash, i) => {\n            if (acc.blocks.has(hash)) {\n              acc.blocks.get(hash)!.recovering = false\n            } else {\n              acc.blocks.set(hash, {\n                hash: hash,\n                parent:\n                  i === 0\n                    ? event.parentHash\n                    : event.finalizedBlockHashes[i - 1],\n                children: new Set(\n                  i === lastIdx ? [] : [event.finalizedBlockHashes[i + 1]],\n                ),\n                runtime: hash,\n                refCount: 0,\n                number: event.number + i,\n                recovering: false,\n              })\n            }\n          })\n\n          const finalizedRuntime = Object.values(acc.runtimes).find((runtime) =>\n            runtime.usages.has(finalizedHash),\n          )\n\n          acc.finalizedRuntime =\n            finalizedRuntime ??\n            (acc.runtimes[finalizedHash] = getRuntime(\n              createRuntimeGetter(acc, finalizedHash),\n            ))\n\n          return acc\n\n        case \"stop-error\":\n          for (const block of acc.blocks.values()) {\n            block.recovering = true\n          }\n          acc.recovering = true\n\n          return acc\n\n        case \"newBlock\": {\n          const { parentBlockHash: parent, blockHash: hash } = event\n          if (acc.blocks.has(hash)) {\n            acc.blocks.get(hash)!.recovering = false\n          } else {\n            const parentNode = acc.blocks.get(parent)!\n            parentNode.children.add(hash)\n            if (event.newRuntime) {\n              acc.runtimes[hash] = getRuntime(createRuntimeGetter(acc, hash))\n            }\n            const block = {\n              hash,\n              number: parentNode.number + 1,\n              parent: parent,\n              children: new Set<string>(),\n              runtime: event.newRuntime ? hash : parentNode.runtime,\n              refCount: 0,\n              recovering: false,\n            }\n            acc.blocks.set(hash, block)\n            acc.runtimes[block.runtime].addBlock(hash)\n          }\n\n          return acc\n        }\n\n        case \"bestBlockChanged\": {\n          if (acc.recovering) {\n            for (const [hash, block] of acc.blocks) {\n              if (block.recovering) {\n                deleteBlock(acc.blocks, hash)\n                deleteFromCache(hash)\n              }\n            }\n            acc.recovering = false\n          }\n          acc.best = event.bestBlockHash\n          return acc\n        }\n\n        case \"finalized\": {\n          acc.finalized = event.finalizedBlockHashes.slice(-1)[0]\n          const { blocks } = acc\n\n          // This logic is only needed because of a bug on some pretty old versions\n          // of the polkadot-sdk node. However, fixing it with an enhancer\n          // was a huge PITA. Therefore, it's more pragmatic to address it here\n          if (blocks.get(acc.best)!.number < blocks.get(acc.finalized)!.number)\n            acc.best = acc.finalized\n\n          acc.finalizedRuntime =\n            acc.runtimes[blocks.get(acc.finalized)!.runtime]\n\n          const { prunedBlockHashes: prunned } = event\n          deleteBlocks(acc, prunned)\n          onUnpin(prunned)\n\n          // The consumer needs to have a chance to start operations\n          // on some of the finalized blocks\n          setTimeout(() => {\n            const trail: string[] = []\n            const toUnpin: string[] = []\n            let current = blocks.get(blocks.get(acc.finalized)!.parent)\n            while (current) {\n              const { hash } = current\n              trail.push(hash)\n              if (current.refCount === 0 && !current.unpinned) {\n                current.unpinned = true\n                // A stop event took place in-between, then it should\n                // be removed, but not be **actully** unpinned.\n                if (current.recovering) deleteFromCache(hash)\n                else toUnpin.push(hash)\n              }\n              current = blocks.get(current.parent)\n            }\n\n            const toDelete: string[] = []\n            for (let i = trail.length - 1; i >= 0; i--) {\n              current = blocks.get(trail[i])!\n              if (!current.unpinned) break\n              toDelete.push(current.hash)\n            }\n\n            deleteBlocks(acc, toDelete)\n            onUnpin(toUnpin)\n          }, 0)\n          return acc\n        }\n\n        case \"blockUsage\": {\n          if (!acc.blocks.has(event.value.hash)) return acc\n\n          const block = acc.blocks.get(event.value.hash)!\n          block.refCount += event.value.type === \"hold\" ? 1 : -1\n          if (\n            block.refCount === 0 &&\n            block.number < acc.blocks.get(acc.finalized)!.number &&\n            !block.recovering\n          ) {\n            block.unpinned = true\n            onUnpin([block.hash])\n          }\n          return acc\n        }\n      }\n    }, getInitialPinnedBlocks()),\n    filter((x) => !!x.finalizedRuntime.runtime),\n    map((x) => ({ ...x })),\n    shareLatest,\n  )\n\n  const getRuntime = getRuntimeCreator(\n    withStopRecovery(pinnedBlocks$, call$, \"pinned-blocks\"),\n  )\n  return pinnedBlocks$\n}\n\nconst getInitialPinnedBlocks = (): PinnedBlocks => ({\n  best: \"\",\n  finalized: \"\",\n  runtimes: {},\n  blocks: new Map(),\n  finalizedRuntime: {} as Runtime,\n  recovering: false,\n})\n","import {\n  Observable,\n  distinct,\n  filter,\n  map,\n  mergeMap,\n  of,\n  take,\n  takeUntil,\n} from \"rxjs\"\nimport { PinnedBlocks } from \"./streams\"\nimport { HexString, ResultPayload } from \"@polkadot-api/substrate-bindings\"\n\nexport type AnalyzedBlock = {\n  hash: HexString\n  found:\n    | {\n        type: true\n        index: number\n        events: any\n      }\n    | {\n        type: false\n        validity: ResultPayload<any, any> | null // null means that the block was already present when the tx was broadcasted\n      }\n}\n\nexport const getTrackTx = (\n  blocks$: Observable<PinnedBlocks>,\n  getBody: (block: string) => Observable<string[]>, // Returns an observable that should emit just once and complete\n  getIsValid: (\n    block: string,\n    tx: string,\n  ) => Observable<ResultPayload<any, any>>, // Returns an observable that should emit just once and complete\n  getEvents: (block: string) => Observable<any>, // Returns an observable that should emit just once and complete\n) => {\n  const whileBlockPresent = <TT>(\n    hash: string,\n  ): (<T = TT>(base: Observable<T>) => Observable<T>) =>\n    takeUntil(blocks$.pipe(filter(({ blocks }) => !blocks.has(hash))))\n\n  const analyzeBlock = (\n    hash: string,\n    tx: string,\n    alreadyPresent: boolean,\n  ): Observable<AnalyzedBlock> => {\n    if (alreadyPresent)\n      return of({ hash, found: { type: false, validity: null } })\n\n    const whilePresent = whileBlockPresent(hash)\n    return getBody(hash).pipe(\n      mergeMap((txs) => {\n        const index = txs.indexOf(tx)\n        return index > -1\n          ? whilePresent(getEvents(hash)).pipe(\n              map((events) => ({\n                hash,\n                found: {\n                  type: true as true,\n                  index,\n                  events,\n                },\n              })),\n            )\n          : getIsValid(hash, tx).pipe(\n              map((validity) => ({\n                hash,\n                found: { type: false as false, validity },\n              })),\n            )\n      }),\n      whilePresent,\n    )\n  }\n\n  const findInBranch = (\n    hash: string,\n    tx: string,\n    alreadyPresent: Set<string>,\n  ): Observable<AnalyzedBlock> =>\n    analyzeBlock(hash, tx, alreadyPresent.has(hash)).pipe(\n      mergeMap((analyzed) => {\n        const { found } = analyzed\n        return found.type || found.validity?.success === false\n          ? of(analyzed)\n          : blocks$.pipe(\n              whileBlockPresent(hash),\n              mergeMap((x) => x.blocks.get(hash)!.children),\n              distinct(),\n              mergeMap((hash) => findInBranch(hash, tx, alreadyPresent)),\n            )\n      }),\n    )\n\n  return (tx: string): Observable<AnalyzedBlock> =>\n    blocks$.pipe(\n      take(1),\n      mergeMap((x) => findInBranch(x.finalized, tx, new Set(x.blocks.keys()))),\n    )\n}\n","import { Observable, map, withLatestFrom } from \"rxjs\"\nimport { fromHex, mergeUint8, toHex } from \"@polkadot-api/utils\"\nimport {\n  _void,\n  createDecoder,\n  Decoder,\n  ResultPayload,\n  u8,\n  Variant,\n} from \"@polkadot-api/substrate-bindings\"\nimport { RuntimeContext } from \"./streams\"\n\nconst external = new Uint8Array([2])\n\nconst getValidateTxArgs = (tx: string, hash: string) =>\n  toHex(mergeUint8(external, fromHex(tx), fromHex(hash)))\n\nconst TaggedTransactionQueue = \"TaggedTransactionQueue\"\nconst validateTransaction = \"validate_transaction\"\n\nconst [, defaultInvalidTxDecoder] = Variant({\n  InvalidTransaction: Variant({\n    Call: _void,\n    Payment: _void,\n    Future: _void,\n    Stale: _void,\n    BadProof: _void,\n    AncientBirthBlock: _void,\n    ExhaustsResources: _void,\n    Custom: u8,\n    BadMandatory: _void,\n    MandatoryValidation: _void,\n    BadSigner: _void,\n  }),\n  UnknownTransaction: Variant({\n    CannotLookup: _void,\n    NoUnsignedValidator: _void,\n    Custom: u8,\n  }),\n})\nconst defaultValidateTxDecoder: Decoder<ResultPayload<undefined, any>> =\n  createDecoder((input) => {\n    const firstByte = u8.dec(input)\n    if (firstByte > 1)\n      throw new Error(\"Unable to decode validateTransaction result\")\n\n    if (!firstByte) return { success: true, value: undefined }\n    let value: any\n    try {\n      value = defaultInvalidTxDecoder(input)\n    } catch (_) {\n      value = {\n        type: \"UnknownInvalidTx\",\n      }\n    }\n    return { success: false, value }\n  })\n\nexport const getValidateTx =\n  (\n    call$: (\n      hash: string | null,\n      fnName: string,\n      parameters: string,\n    ) => Observable<string>,\n    getRuntimeContext: (hash: string) => Observable<RuntimeContext>,\n  ) =>\n  (blockHash: string, tx: string): Observable<ResultPayload<any, any>> => {\n    const decoder$ = getRuntimeContext(blockHash).pipe(\n      map((ctx) => {\n        try {\n          return ctx.dynamicBuilder.buildRuntimeCall(\n            TaggedTransactionQueue,\n            validateTransaction,\n          ).value[1] as Decoder<ResultPayload<any, any>>\n        } catch (_) {\n          return defaultValidateTxDecoder\n        }\n      }),\n    )\n    return call$(\n      blockHash,\n      `${TaggedTransactionQueue}_${validateTransaction}`,\n      getValidateTxArgs(tx, blockHash),\n    ).pipe(\n      withLatestFrom(decoder$),\n      map(([result, decoder]) => decoder(result)),\n    )\n  }\n","import { concatMapEager, delayUnsubscription, shareLatest } from \"@/utils\"\nimport {\n  ChainHead,\n  DisjointError,\n  FollowEventWithRuntime,\n  StorageItemInput,\n  StorageResult,\n} from \"@polkadot-api/substrate-client\"\nimport {\n  MonoTypeOperatorFunction,\n  Observable,\n  ReplaySubject,\n  Subject,\n  defer,\n  distinctUntilChanged,\n  filter,\n  map,\n  merge,\n  mergeAll,\n  mergeMap,\n  noop,\n  of,\n  scan,\n  share,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from \"rxjs\"\n\nimport { withDefaultValue } from \"@/utils\"\nimport {\n  fromAbortControllerFn,\n  getWithOptionalhash$,\n  getWithRecovery,\n  withEnsureCanonicalChain,\n  withLazyFollower,\n  withStopRecovery,\n} from \"./enhancers\"\nimport { BlockNotPinnedError } from \"./errors\"\nimport { getRecoveralStorage$ } from \"./storage-queries\"\nimport type {\n  BlockUsageEvent,\n  PinnedBlocks,\n  PinnedBlock,\n  RuntimeContext,\n  SystemEvent,\n} from \"./streams\"\nimport { getFollow$, getPinnedBlocks$ } from \"./streams\"\nimport { getTrackTx } from \"./track-tx\"\nimport { getValidateTx } from \"./validate-tx\"\nimport { HexString } from \"@polkadot-api/substrate-bindings\"\n\nexport type {\n  PinnedBlocks,\n  PinnedBlock,\n  FollowEventWithRuntime,\n  RuntimeContext,\n  SystemEvent,\n}\n\nexport type BlockInfo = {\n  hash: string\n  number: number\n  parent: string\n}\n\nconst toBlockInfo = ({ hash, number, parent }: PinnedBlock): BlockInfo => ({\n  hash,\n  number,\n  parent,\n})\n\nexport const getChainHead$ = (chainHead: ChainHead) => {\n  const { getFollower, startFollow, follow$, getHeader } = getFollow$(chainHead)\n  const lazyFollower = withLazyFollower(getFollower)\n  const { withRecovery, withRecoveryFn } = getWithRecovery()\n\n  const blockUsage$ = new Subject<BlockUsageEvent>()\n  const holdBlock = (hash: string) => {\n    blockUsage$.next({ type: \"blockUsage\", value: { type: \"hold\", hash } })\n    return () => {\n      setTimeout(() => {\n        blockUsage$.next({\n          type: \"blockUsage\",\n          value: { type: \"release\", hash },\n        })\n      }, 0)\n    }\n  }\n\n  const usingBlock: <T>(blockHash: string) => MonoTypeOperatorFunction<T> =\n    (blockHash: string) => (base) =>\n      new Observable((observer) => {\n        const release = holdBlock(blockHash)\n        const subscription = base.subscribe(observer)\n        subscription.add(release)\n        return subscription\n      })\n\n  const withRefcount =\n    <A extends Array<any>, T>(\n      fn: (hash: string, ...args: A) => Observable<T>,\n    ): ((hash: string, ...args: A) => Observable<T>) =>\n    (hash, ...args) =>\n      fn(hash, ...args).pipe(usingBlock(hash))\n\n  const withInMemory =\n    <A extends Array<any>, T>(\n      fn: (hash: string, ...args: A) => Observable<T>,\n      label: string,\n    ): ((hash: string, ...args: A) => Observable<T>) =>\n    (hash, ...args) =>\n      new Observable((observer) => {\n        let isPresent = false\n        pinnedBlocks$.pipe(take(1)).subscribe((blocks) => {\n          const block = blocks.blocks.get(hash)\n          isPresent = !!block && !block.unpinned\n        })\n\n        return isPresent\n          ? fn(hash, ...args).subscribe(observer)\n          : observer.error(new BlockNotPinnedError(hash, label))\n      })\n\n  const unpin = (hashes: string[]) =>\n    getFollower()\n      .unpin(hashes)\n      .catch((e) => {\n        if (e instanceof DisjointError) return\n        throw e\n      })\n\n  const commonEnhancer = <A extends Array<any>, T>(\n    fn: (\n      key: string,\n      ...args: [...A, ...[abortSignal: AbortSignal]]\n    ) => Promise<T>,\n    label: string,\n  ) => {\n    const canonicalChain = (_fn: (hash: string, ...args: A) => Observable<T>) =>\n      withEnsureCanonicalChain(pinnedBlocks$, follow$, _fn)\n\n    return withInMemory(\n      withRefcount(\n        canonicalChain(\n          withStopRecovery(\n            pinnedBlocks$,\n            withRecoveryFn(fromAbortControllerFn(fn)),\n            `stop-${label}`,\n          ),\n        ),\n      ),\n      label,\n    )\n  }\n\n  const withCanonicalChain: <Args extends Array<any>, T>(\n    fn: (\n      hash: string | null,\n      withCanonical: boolean,\n      ...args: Args\n    ) => Observable<T>,\n    withCanonicalChain?: boolean,\n  ) => (hash: string | null, ...args: Args) => Observable<T> =\n    (fn, withCanonicalChain = true) =>\n    (hash, ...args) =>\n      fn(hash, withCanonicalChain, ...args)\n\n  const cache = new Map<string, Map<string, Observable<any>>>()\n  const pinnedBlocks$ = getPinnedBlocks$(\n    follow$,\n    withRefcount(withRecoveryFn(fromAbortControllerFn(lazyFollower(\"call\")))),\n    blockUsage$,\n    (blocks) => {\n      unpin(blocks)\n      blocks.forEach((hash) => {\n        cache.delete(hash)\n      })\n    },\n    (block) => {\n      cache.delete(block)\n    },\n  )\n\n  const getRuntimeContext$ = withRefcount((hash: string) =>\n    pinnedBlocks$.pipe(\n      take(1),\n      mergeMap(\n        (pinned) => pinned.runtimes[pinned.blocks.get(hash)!.runtime].runtime,\n      ),\n    ),\n  )\n\n  const withRuntime =\n    <T>(mapper: (x: T) => string) =>\n    (source$: Observable<T>): Observable<[T, RuntimeContext]> =>\n      source$.pipe(\n        concatMapEager((x) =>\n          getRuntimeContext$(mapper(x)).pipe(map((runtime) => [x, runtime])),\n        ),\n      )\n\n  const upsertCachedStream = <T>(\n    hash: string,\n    key: string,\n    stream: Observable<T>,\n  ): Observable<T> => {\n    const hashCache = cache.get(hash) ?? new Map()\n    const cached = hashCache.get(key)\n    if (cached) return cached\n\n    cache.set(hash, hashCache)\n\n    let connector: ReplaySubject<T>\n    const result = stream.pipe(\n      share({\n        connector: () => (connector = new ReplaySubject()),\n      }),\n      tap({\n        complete() {\n          hashCache.set(key, connector)\n        },\n      }),\n      delayUnsubscription(),\n    )\n    hashCache.set(key, result)\n\n    return result\n  }\n\n  const finalized$ = pinnedBlocks$.pipe(\n    filter((x) => !x.recovering),\n    distinctUntilChanged((a, b) => a.finalized === b.finalized),\n    scan((acc, value) => {\n      let current = value.blocks.get(value.finalized)!\n      const result = [current]\n\n      const latest = acc.at(-1)\n      if (!latest) return result\n\n      while (current.number > latest.number + 1) {\n        current = value.blocks.get(current.parent)!\n        if (!current) break\n        result.unshift(current)\n      }\n      return result\n    }, [] as PinnedBlock[]),\n    mergeAll(),\n    map(toBlockInfo),\n    shareLatest,\n  )\n\n  const best$ = pinnedBlocks$.pipe(\n    distinctUntilChanged((a, b) => a.best === b.best),\n    map((pinned) => toBlockInfo(pinned.blocks.get(pinned.best)!)),\n    shareLatest,\n  )\n\n  const bestBlocks$ = pinnedBlocks$.pipe(\n    filter((x) => !x.recovering),\n    distinctUntilChanged(\n      (prev, current) =>\n        prev.finalized === current.finalized && prev.best === current.best,\n    ),\n    scan((acc, pinned) => {\n      const getBlockInfo = (hash: string) =>\n        acc.get(hash) || toBlockInfo(pinned.blocks.get(hash)!)\n\n      const best = getBlockInfo(pinned.best)\n      const finalized = getBlockInfo(pinned.finalized)\n\n      const len = best.number - finalized.number + 1\n      const result = new Array<BlockInfo>(len)\n      for (let i = 0, hash = best.hash; i < len; i++) {\n        result[i] = getBlockInfo(hash)\n        hash = result[i].parent\n      }\n\n      return new Map(result.map((b) => [b.hash, b]))\n    }, new Map<string, BlockInfo>()),\n    map((x) => [...x.values()]),\n    shareLatest,\n  )\n\n  const runtime$ = pinnedBlocks$.pipe(\n    distinctUntilChanged((a, b) => a.finalizedRuntime === b.finalizedRuntime),\n    switchMap(({ finalizedRuntime: { runtime } }) =>\n      runtime.pipe(withDefaultValue(null)),\n    ),\n    shareLatest,\n  )\n\n  const metadata$ = runtime$.pipe(map((x) => x?.lookup.metadata ?? null))\n\n  const withOptionalHash$ = getWithOptionalhash$(\n    finalized$.pipe(map((b) => b.hash)),\n    best$.pipe(map((b) => b.hash)),\n    usingBlock,\n  )\n\n  const _body$ = withOptionalHash$(commonEnhancer(lazyFollower(\"body\"), \"body\"))\n  const body$ = (hash: string) =>\n    upsertCachedStream(hash, \"body\", _body$(hash, true))\n\n  const _storage$ = commonEnhancer(lazyFollower(\"storage\"), \"storage\")\n\n  const storage$ = withOptionalHash$(\n    <\n      Type extends StorageItemInput[\"type\"],\n      M extends\n        | undefined\n        | ((data: StorageResult<Type>, ctx: RuntimeContext) => any),\n    >(\n      hash: string,\n      withCanonicalChain: boolean,\n      type: Type,\n      keyMapper: (ctx: RuntimeContext) => string,\n      childTrie: string | null = null,\n      mapper?: M,\n    ): Observable<\n      undefined extends M\n        ? StorageResult<Type>\n        : { raw: StorageResult<Type>; mapped: ReturnType<NonNullable<M>> }\n    > =>\n      pinnedBlocks$.pipe(\n        take(1),\n        mergeMap(\n          (pinned) => pinned.runtimes[pinned.blocks.get(hash)!.runtime].runtime,\n        ),\n        mergeMap((ctx) => {\n          const key = keyMapper(ctx)\n          const unMapped$ = upsertCachedStream(\n            hash,\n            `storage-${type}-${key}-${childTrie ?? \"\"}`,\n            _storage$(hash, withCanonicalChain, type, key, childTrie),\n          )\n\n          return mapper\n            ? upsertCachedStream(\n                hash,\n                `storage-${type}-${key}-${childTrie ?? \"\"}-dec`,\n                unMapped$.pipe(\n                  map((raw) => ({ raw, mapped: mapper(raw, ctx) })),\n                ),\n              )\n            : unMapped$\n        }),\n      ) as Observable<\n        undefined extends M\n          ? StorageResult<Type>\n          : { raw: StorageResult<Type>; mapped: ReturnType<NonNullable<M>> }\n      >,\n  )\n\n  const recoveralStorage$ = getRecoveralStorage$(getFollower, withRecovery)\n  const storageQueries$ = withOptionalHash$(\n    withStopRecovery(\n      pinnedBlocks$,\n      (hash: string, queries: Array<StorageItemInput>, childTrie?: string) =>\n        recoveralStorage$(hash, queries, childTrie ?? null, false),\n      `storageQueries`,\n    ),\n  )\n\n  const header$ = withOptionalHash$(\n    withStopRecovery(\n      pinnedBlocks$,\n      (hash: string) => defer(() => getHeader(hash)),\n      \"header\",\n    ),\n  )\n\n  const eventsAt$ = (hash: string | null, canonical = false) =>\n    storage$(\n      hash,\n      canonical,\n      \"value\",\n      (ctx) => ctx.events.key,\n      null,\n      (x, ctx) => ctx.events.dec(x!),\n    ).pipe(map((x) => x.mapped))\n\n  const __call$ = commonEnhancer(lazyFollower(\"call\"), \"call\")\n  const call$ = withOptionalHash$(\n    (hash: string, canonical: boolean, fn: string, args: string) =>\n      upsertCachedStream(\n        hash,\n        `call-${fn}-${args}`,\n        __call$(hash, canonical, fn, args),\n      ),\n  )\n\n  const validateTx$ = getValidateTx(\n    withCanonicalChain(call$, false),\n    getRuntimeContext$,\n  )\n\n  const innerBody$ = (hash: string) =>\n    upsertCachedStream(hash, \"body\", _body$(hash, false))\n\n  const trackTx$ = getTrackTx(pinnedBlocks$, innerBody$, validateTx$, eventsAt$)\n  const trackTxWithoutEvents$ = getTrackTx(\n    pinnedBlocks$,\n    innerBody$,\n    validateTx$,\n    () => of(),\n  )\n\n  const genesis$ = runtime$.pipe(\n    filter(Boolean),\n    take(1),\n    mergeMap((runtime) => {\n      const { enc } = runtime.dynamicBuilder.buildStorage(\n        \"System\",\n        \"BlockHash\",\n      ).keys\n      // const genesis$ =\n      // there are chains (e.g. kilt) that use u64 as block number\n      // u64 is encoded as bigint\n      // using dynamic builder for safety\n      let key: string\n      try {\n        // for u32\n        key = enc(0)\n      } catch {\n        // for u64\n        key = enc(0n)\n      }\n\n      return storage$(\n        null,\n        false,\n        \"value\",\n        () => key,\n        null,\n      ) as Observable<HexString>\n    }),\n    shareReplay(1),\n  )\n\n  // calling `unfollow` also kills the subscription due to the fact\n  // that `follow$` completes, which makes all other streams to\n  // also complete (or error, in the case of ongoing operations)\n  merge(runtime$, bestBlocks$).subscribe({\n    error() {},\n  })\n\n  let unfollow = noop\n  let started: boolean | null = false\n  let nSubscribers: number = 0\n  const start = (_nSubscribers: number) => {\n    nSubscribers += _nSubscribers\n    started = true\n\n    unfollow = startFollow()\n  }\n\n  return [\n    {\n      follow$,\n      finalized$,\n      best$,\n      bestBlocks$,\n      runtime$,\n      metadata$,\n      genesis$,\n\n      header$,\n      body$,\n      call$: withCanonicalChain(call$),\n      storage$: withCanonicalChain(storage$),\n      storageQueries$,\n      eventsAt$: withCanonicalChain(eventsAt$),\n\n      holdBlock,\n      trackTx$,\n      trackTxWithoutEvents$,\n      validateTx$,\n      pinnedBlocks$,\n      withRuntime,\n      getRuntimeContext$: withOptionalHash$(getRuntimeContext$),\n      unfollow: () => {\n        if (started == null) return\n        nSubscribers--\n        if (started && !nSubscribers) {\n          started = null\n          unfollow()\n          unfollow = noop\n        }\n      },\n    },\n    start,\n  ] as const\n}\n\nexport type ChainHead$ = ReturnType<typeof getChainHead$>[0]\n","import type { SubstrateClient } from \"@polkadot-api/substrate-client\"\nimport { Observable } from \"rxjs\"\n\nexport default (baseTransaction: SubstrateClient[\"transaction\"]) =>\n  (transaction: string) =>\n    new Observable<never>((observer) =>\n      baseTransaction(transaction, (e) => {\n        observer.error(e)\n      }),\n    )\n","import type {\n  SubstrateClient,\n  UnsubscribeFn,\n} from \"@polkadot-api/substrate-client\"\nimport { Observable } from \"rxjs\"\nimport { ChainHead$, getChainHead$ } from \"./chainHead\"\nimport getBroadcastTx$ from \"./tx\"\n\nexport interface ObservableClient {\n  chainHead$: (nSubscribers?: number) => ChainHead$\n  broadcastTx$: (transaction: string) => Observable<never>\n  destroy: UnsubscribeFn\n}\n\nconst clientCache = new Map<\n  SubstrateClient,\n  { client: ObservableClient; refCount: number }\n>()\n\nexport const getObservableClient = (\n  substrateClient: SubstrateClient,\n): ObservableClient => {\n  const cached = clientCache.get(substrateClient)\n  if (cached) {\n    cached.refCount++\n    return cached.client\n  }\n\n  const destroy = () => {\n    const cached = clientCache.get(substrateClient)\n    if (!cached || cached.refCount <= 1) {\n      clientCache.delete(substrateClient)\n      substrateClient.destroy()\n    } else {\n      cached.refCount--\n    }\n  }\n\n  let cachedChainhead:\n    | readonly [ChainHead$, (nSubscribers: number) => void]\n    | null = null\n  let currentSubscribers = 0\n  let expectedSubscribers: null | number = null\n\n  const client: ObservableClient = {\n    chainHead$: (_expectedSubscribers) => {\n      currentSubscribers++\n      expectedSubscribers ||= _expectedSubscribers || 1\n      cachedChainhead ||= getChainHead$(substrateClient.chainHead)\n      const [result, start] = cachedChainhead\n      if (expectedSubscribers === currentSubscribers) {\n        const copiedCurrentSubscribers = currentSubscribers\n        currentSubscribers = 0\n        expectedSubscribers = null\n        cachedChainhead = null\n        start(copiedCurrentSubscribers)\n      }\n      return result\n    },\n    broadcastTx$: getBroadcastTx$(substrateClient.transaction),\n    destroy,\n  }\n\n  clientCache.set(substrateClient, { client, refCount: 1 })\n  return client\n}\n"],"names":["share","ReplaySubject","Observable","defer","OperationLimitError","catchError","OperationInaccessibleError","timer","concatMap","throwError","take","mergeMap","takeWhile","distinctUntilChanged","map","pipe","filter","switchMap","mergeAll","of","noop","blockHeader","connectable","Subscription","StopError","toHex","u32","Bytes","Option","Vector","EMPTY","metadataCodec","getLookupFn","getDynamicBuilder","AccountId","shareReplay","merge","scan","takeUntil","distinct","hash","mergeUint8","fromHex","Variant","_void","u8","createDecoder","withLatestFrom","Subject","DisjointError","withCanonicalChain","tap","cached"],"mappings":";;;;;;;;AAEO,MAAM,cAAyDA,UAAM,CAAA;AAAA,EAC1E,SAAW,EAAA,MAAM,IAAIC,kBAAA,CAAc,CAAC,CAAA;AAAA,EACpC,YAAc,EAAA,IAAA;AAAA,EACd,eAAiB,EAAA,IAAA;AAAA,EACjB,mBAAqB,EAAA;AACvB,CAAC,CAAA;;ACLY,MAAA,cAAA,GACX,CACE,MAAA,EACA,UAAa,GAAA,QAAA,KAEf,CAAC,OACC,KAAA,IAAIC,eAAc,CAAA,CAAC,QAAa,KAAA;AAC9B,EAAI,IAAA,eAAA;AACJ,EAAM,MAAA,MAAA,uBAAa,GAA2B,EAAA;AAC9C,EAAM,MAAA,kBAAA,uBAAyB,GAA0B,EAAA;AACzD,EAAM,MAAA,OAAA,uBAAc,GAAiB,EAAA;AAErC,EAAA,IAAI,SAAY,GAAA,CAAA;AAChB,EAAA,IAAI,eAAkB,GAAA,CAAA;AACtB,EAAA,IAAI,WAAc,GAAA,CAAA;AAElB,EAAA,MAAM,mBAAmB,MAAM;AAC7B,IAAM,MAAA,MAAA,GAAS,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AACzC,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA,IACE,mBAAmB,IAAS,KAAA,CAAA,KAC3B,OAAO,eAAoB,KAAA,WAAA,IAAe,gBAAgB,MAC3D,CAAA,EAAA;AACA,QAAA,QAAA,CAAS,QAAS,EAAA;AAAA;AAEpB,MAAA;AAAA;AAEF,IAAA,MAAM,GAAM,GAAA,eAAA,EAAA;AACZ,IAAA,MAAA,CAAO,OAAO,GAAG,CAAA;AACjB,IAAA,IAAI,gBAAgB,GAAK,EAAA;AACvB,MAAQ,OAAA,CAAA,GAAA,CAAI,GAAK,EAAA,EAAE,CAAA;AAAA;AAGrB,IAAA,IAAI,WAAc,GAAA,KAAA;AAClB,IAAI,IAAA,YAAA,GAAe,OAAO,SAAU,CAAA;AAAA,MAClC,KAAK,CAAM,EAAA;AACT,QAAA,IAAI,gBAAgB,GAAK,EAAA;AACvB,UAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,SACV,MAAA;AACL,UAAA,OAAA,CAAQ,GAAI,CAAA,GAAG,CAAG,CAAA,IAAA,CAAK,CAAC,CAAA;AAAA;AAC1B,OACF;AAAA,MACA,QAAW,GAAA;AACT,QAAc,WAAA,GAAA,IAAA;AACd,QAAA,kBAAA,CAAmB,OAAO,GAAG,CAAA;AAC7B,QAAA,IAAI,QAAQ,WAAa,EAAA;AACvB,UAAA,WAAA,EAAA;AACA,UAAO,OAAA,OAAA,CAAQ,GAAI,CAAA,WAAW,CAAG,EAAA;AAC/B,YAAQ,OAAA,CAAA,GAAA,CAAI,WAAW,CAAG,CAAA,OAAA,CAAQ,CAAC,CAAM,KAAA,QAAA,CAAS,IAAK,CAAA,CAAC,CAAC,CAAA;AACzD,YAAA,OAAA,CAAQ,OAAO,WAAW,CAAA;AAC1B,YAAI,IAAA,kBAAA,CAAmB,GAAI,CAAA,WAAW,CAAG,EAAA;AACvC,cAAA;AAAA;AAEF,YAAA,WAAA,EAAA;AAAA;AACF;AAEF,QAAiB,gBAAA,EAAA;AAAA,OACnB;AAAA,MACA,MAAM,CAAQ,EAAA;AACZ,QAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA;AAClB,KACD,CAAA;AAED,IAAA,IAAI,CAAC,WAAA,EAAgC,kBAAA,CAAA,GAAA,CAAI,KAAK,YAAY,CAAA;AAAA,GAC5D;AAEA,EAAA,eAAA,GAAkB,QAAQ,SAAU,CAAA;AAAA,IAClC,KAAK,WAAgB,EAAA;AACnB,MAAA,MAAM,GAAM,GAAA,SAAA,EAAA;AACZ,MAAO,MAAA,CAAA,GAAA;AAAA,QACL,GAAA;AAAA,QACAC,UAAM,CAAA,MAAM,MAAO,CAAA,WAAA,EAAa,GAAG,CAAC;AAAA,OACtC;AACA,MAAI,IAAA,kBAAA,CAAmB,OAAO,UAAY,EAAA;AACxC,QAAiB,gBAAA,EAAA;AAAA;AACnB,KACF;AAAA,IACA,MAAM,CAAQ,EAAA;AACZ,MAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA,KAClB;AAAA,IACA,QAAW,GAAA;AACT,MAAI,IAAA,kBAAA,CAAmB,SAAS,CAAG,EAAA;AACjC,QAAA,QAAA,CAAS,QAAS,EAAA;AAAA;AACpB;AACF,GACD,CAAA;AAED,EAAA,OAAO,MAAM;AACX,IAAA,kBAAA,CAAmB,OAAQ,CAAA,CAAC,YAAiB,KAAA,YAAA,CAAa,aAAa,CAAA;AACvE,IAAA,eAAA,CAAgB,WAAY,EAAA;AAC5B,IAAA,MAAA,CAAO,KAAM,EAAA;AACb,IAAA,OAAA,CAAQ,KAAM,EAAA;AAAA,GAChB;AACF,CAAC;;AC7FQ,MAAA,gBAAA,GACX,CAAO,YACP,KAAA,CAAC,YACC,IAAID,eAAA,CAAW,CAAC,QAAa,KAAA;AAC3B,EAAA,IAAI,SAAY,GAAA,KAAA;AAEhB,EAAM,MAAA,YAAA,GAAe,QAAQ,SAAU,CAAA;AAAA,IACrC,KAAK,CAAG,EAAA;AACN,MAAY,SAAA,GAAA,IAAA;AACZ,MAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,KACjB;AAAA,IACA,MAAM,CAAG,EAAA;AACP,MAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA,KAClB;AAAA,IACA,QAAW,GAAA;AACT,MAAA,QAAA,CAAS,QAAS,EAAA;AAAA;AACpB,GACD,CAAA;AAED,EAAA,IAAI,CAAC,SAAA,EAAoB,QAAA,CAAA,IAAA,CAAK,YAAY,CAAA;AAE1C,EAAO,OAAA,YAAA;AACT,CAAC,CAAA;;ACtBQ,MAAA,mBAAA,GACX,CAAC,EACD,KAAA,CAAI,WACF,IAAIA,eAAA,CAAW,CAAC,QAAa,KAAA;AAC3B,EAAM,MAAA,YAAA,GAAe,OAAO,SAAU,CAAA;AAAA,IACpC,KAAK,CAAG,EAAA;AACN,MAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,KACjB;AAAA,IACA,MAAM,CAAG,EAAA;AACP,MAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA,KAClB;AAAA,IACA,QAAW,GAAA;AACT,MAAA,QAAA,CAAS,QAAS,EAAA;AAAA;AACpB,GACD,CAAA;AACD,EAAM,MAAA,WAAA,GAAc,MAAM,YAAA,CAAa,WAAY,EAAA;AACnD,EAAA,OAAO,MAAM;AACX,IACa,OAAA,CAAA,OAAA,EAAU,CAAA,IAAA,CAAK,WAAW,CAAA;AAAA,GACzC;AACF,CAAC,CAAA;;;;;ACZL,MAAqB,gBAAoB,CAAA;AAAA,EAAzC,WAAA,GAAA;AACE,IAAQ,aAAA,CAAA,IAAA,EAAA,OAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AAAA;AAAA,EAEA,YAAY,IAA0B,EAAA;AAC5C,IAAA,OAAO,MAAM;AACX,MAAA,IAAI,KAAK,IAAM,EAAA;AACb,QAAK,IAAA,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA;AAAA,OACjB,MAAA;AACL,QAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,IAAA;AAAA;AAGpB,MAAA,IAAI,KAAK,IAAM,EAAA;AACb,QAAK,IAAA,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA;AAAA,OACjB,MAAA;AACL,QAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA;AAAA;AAGnB,MAAA,OAAO,IAAK,CAAA,IAAA;AACZ,MAAA,OAAO,IAAK,CAAA,IAAA;AAAA,KACd;AAAA;AACF,EAEA,KAAK,KAAU,EAAA;AACb,IAAM,MAAA,OAAA,GAA8B,EAAE,KAAM,EAAA;AAE5C,IAAI,IAAA,IAAA,CAAK,SAAS,MAAW,EAAA;AAC3B,MAAK,IAAA,CAAA,IAAA,GAAO,KAAK,KAAQ,GAAA,OAAA;AAAA,KACpB,MAAA;AACL,MAAA,IAAA,CAAK,KAAK,IAAO,GAAA,OAAA;AACjB,MAAA,OAAA,CAAQ,OAAO,IAAK,CAAA,IAAA;AAEpB,MAAA,IAAA,CAAK,IAAO,GAAA,OAAA;AAAA;AAGd,IAAO,OAAA,IAAA,CAAK,YAAY,OAAO,CAAA;AAAA;AACjC,EAEA,QAAQ,KAAU,EAAA;AAChB,IAAA,IAAA,CAAK,KAAQ,GAAA,EAAE,KAAO,EAAA,IAAA,EAAM,KAAK,KAAM,EAAA;AACvC,IAAA,IAAA,CAAK,MAAM,IAAS,KAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,KAAA,CAAA;AAChD,IAAK,IAAA,CAAA,IAAA,KAAL,IAAK,CAAA,IAAA,GAAS,IAAK,CAAA,KAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA;AACpC,EAEA,GAAM,GAAA;AACJ,IAAM,MAAA,MAAA,GAAS,KAAK,KAAO,EAAA,KAAA;AAE3B,IAAA,IAAI,KAAK,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,KAAM,CAAA,IAAA;AAExB,MAAI,IAAA,CAAC,KAAK,KAAO,EAAA;AACf,QAAA,IAAA,CAAK,IAAO,GAAA,MAAA;AAAA,OACP,MAAA;AACL,QAAO,OAAA,IAAA,CAAK,MAAM,IAAM,EAAA,IAAA;AACxB,QAAA,OAAO,KAAK,KAAM,CAAA,IAAA;AAAA;AACpB;AAGF,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,OAAU,GAAA;AACR,IAAA,OAAO,CAAC,IAAK,CAAA,KAAA;AAAA;AAEjB;AAEO,MAAM,kBAAkB,MAAM;AACnC,EAAM,MAAA,kBAAA,uBAAyB,GAAiC,EAAA;AAEhE,EAAM,MAAA,WAAA,GAAc,CAAC,UAAA,EAA6B,EAAmB,KAAA;AACnE,IAAmB,kBAAA,CAAA,GAAA,CAAI,YAAY,MAAM;AACvC,MAAA,kBAAA,CAAmB,OAAO,UAAU,CAAA;AACpC,MAAG,EAAA,EAAA;AAAA,KACJ,CAAA;AAAA,GACH;AAEA,EAAM,MAAA,QAAA,GAAW,CAAC,UAAgC,KAAA;AAChD,IAAmB,kBAAA,CAAA,GAAA,CAAI,UAAU,CAAI,IAAA;AAAA,GACvC;AAEA,EAAM,MAAA,YAAA,GAAe,IAAI,gBAGtB,EAAA;AACH,EAAA,MAAM,OAAU,GAAA,YAAA,CAAa,OAAQ,CAAA,IAAA,CAAK,YAAY,CAAA;AACtD,EAAA,MAAM,IAAO,GAAA,YAAA,CAAa,IAAK,CAAA,IAAA,CAAK,YAAY,CAAA;AAEhD,EAAM,MAAA,OAAA,GAAU,CACd,IAAA,EAIA,WACG,KAAA;AACH,IAAM,MAAA,EAAA,GAAK,cAAc,OAAU,GAAA,IAAA;AACnC,IAAA,WAAA,CAAY,IAAK,CAAA,OAAA,EAAS,EAAG,CAAA,IAAI,CAAC,CAAA;AAAA,GACpC;AAEA,EAAA,MAAM,cAAc,MAAM;AACxB,IAAM,MAAA,IAAA,GAAO,aAAa,GAAI,EAAA;AAC9B,IAAA,IAAI,CAAC,IAAM,EAAA;AAEX,IAAmB,kBAAA,CAAA,MAAA,CAAO,KAAK,OAAO,CAAA;AACtC,IAAA,OAAA,CAAQ,IAAI,CAAA;AAAA,GACd;AAEA,EAAM,MAAA,OAAA,GAAU,CAAI,IAGd,KAAA;AACJ,IAAM,MAAA,EAAE,OAAS,EAAA,QAAA,EAAa,GAAA,IAAA;AAE9B,IAAA,IAAI,gBAAmB,GAAA,KAAA;AACvB,IAAM,MAAA,YAAA,GAAe,QAAQ,SAAU,CAAA;AAAA,MACrC,KAAK,CAAG,EAAA;AACN,QAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,OACjB;AAAA,MACA,MAAM,CAAG,EAAA;AACN,QAAC,CAAA,gBAAA,GAAmB,aAAaE,mCAC9B,IAAA,OAAA,CAAQ,MAAM,IAAI,CAAA,GAClB,QAAS,CAAA,KAAA,CAAM,CAAC,CAAA;AAAA,OACtB;AAAA,MACA,QAAW,GAAA;AACT,QAAA,QAAA,CAAS,QAAS,EAAA;AAAA;AACpB,KACD,CAAA;AAED,IAAI,IAAA,CAAC,aAAa,MAAQ,EAAA;AACxB,MAAA,WAAA,CAAY,SAAS,MAAM;AACzB,QAAA,YAAA,CAAa,WAAY,EAAA;AACzB,QAAY,WAAA,EAAA;AAAA,OACb,CAAA;AAAA,KACH,MAAA,IAAW,CAAC,gBAAA,EAA8B,WAAA,EAAA;AAAA,GAC5C;AAEA,EAAM,MAAA,YAAA,GACJ,CAAC,WAAc,GAAA,KAAA,KACf,CAAI,OACF,KAAA,IAAIF,eAAW,CAAA,CAAC,QAAa,KAAA;AAC3B,IAAM,MAAA,WAAA,GAAc,EAAE,QAAA,EAAU,OAAQ,EAAA;AAExC,IAAI,IAAA,YAAA,CAAa,SAAW,EAAA;AAC1B,MAAA,OAAA,CAAQ,WAAW,CAAA;AAAA,KACd,MAAA;AACL,MAAA,OAAA,CAAQ,aAAa,WAAW,CAAA;AAAA;AAGlC,IAAA,OAAO,MAAM;AACX,MAAA,QAAA,CAAS,OAAO,CAAA;AAAA,KAClB;AAAA,GACD,CAAA;AAEL,EAAA,MAAM,qBAAqB,YAAa,EAAA;AACxC,EAAM,MAAA,cAAA,GACJ,CAA6B,EAC7B,KAAA,CAAA,GAAI,SACF,kBAAmB,CAAA,EAAA,CAAG,GAAG,IAAI,CAAC,CAAA;AAElC,EAAO,OAAA,EAAE,cAAc,cAAe,EAAA;AACxC,CAAA;;AC1KO,MAAM,4BAA4B,KAAM,CAAA;AAAA,EAC7C,WAAA,CAAY,MAAc,KAAe,EAAA;AACvC,IAAA,KAAA,CAAM,CAAS,MAAA,EAAA,IAAI,CAAmB,gBAAA,EAAA,KAAK,CAAG,CAAA,CAAA,CAAA;AAC9C,IAAA,IAAA,CAAK,IAAO,GAAA,qBAAA;AAAA;AAEhB;AAEO,MAAM,yBAAyB,KAAM,CAAA;AAAA,EAC1C,WAAc,GAAA;AACZ,IAAA,KAAA,CAAM,cAAc,CAAA;AACpB,IAAA,IAAA,CAAK,IAAO,GAAA,kBAAA;AAAA;AAEhB;AAEO,MAAM,0BAA0B,KAAM,CAAA;AAAA,EAC3C,WAAc,GAAA;AACZ,IAAA,KAAA,CAAM,sCAAsC,CAAA;AAC5C,IAAA,IAAA,CAAK,IAAO,GAAA,mBAAA;AAAA;AAEhB;;ACNA,MAAM,gCAAoB,IAAA,GAAA,CAAI,CAAC,MAAQ,EAAA,WAAA,EAAa,IAAI,CAAC,CAAA;AAEzD,MAAM,QAAA,GAAW,CAAI,OAA2B,KAAA;AAC9C,EAAA,MAAM,SAAwB,OAAQ,CAAA,IAAA;AAAA,IACpCG,eAAA;AAAA,MAAW,CAAC,CAAA,KACV,CAAa,YAAAC,0CAAA,GACTC,WAAM,GAAG,CAAA,CAAE,IAAK,CAAAC,cAAA,CAAU,MAAM,MAAM,CAAC,CACvC,GAAAC,eAAA,CAAW,MAAM,CAAC;AAAA;AACxB,GACF;AACA,EAAO,OAAA,MAAA;AACT,CAAA;AAEO,MAAM,oBAAuB,GAAA,CAClC,UACA,EAAA,KAAA,EACA,UACG,KAAA;AACH,EAAA,OAAO,CACH,EAAA,KAEF,CAAC,IAAA,EAAA,GAAwB,IAAe,KAAA;AACtC,IAAI,IAAA,CAAC,aAAc,CAAA,GAAA,CAAI,IAAI,CAAA;AACzB,MAAA,OAAO,SAAS,EAAG,CAAA,IAAA,EAAgB,GAAG,IAAI,CAAC,CAAE,CAAA,IAAA;AAAA,QAC3C,WAAW,IAAc;AAAA,OAC3B;AAEF,IAAM,MAAA,KAAA,GAAQ,IAAS,KAAA,MAAA,GAAS,KAAQ,GAAA,UAAA;AACxC,IAAA,MAAM,UAAyB,KAAM,CAAA,IAAA;AAAA,MACnCC,UAAK,CAAC,CAAA;AAAA,MACNC,aAAS,CAAA,CAAC,CAAM,KAAA,EAAA,CAAG,CAAG,EAAA,GAAG,IAAI,CAAA,CAAE,IAAK,CAAA,UAAA,CAAW,CAAC,CAAC,CAAC,CAAA;AAAA,MAClDN,eAAA,CAAW,CAAC,CAAM,KAAA;AAChB,QAAA,OAAO,CAAa,YAAA,mBAAA,GAChB,OACA,GAAAI,eAAA,CAAW,MAAM,CAAC,CAAA;AAAA,OACvB;AAAA,KACH;AACA,IAAA,OAAO,SAAS,OAAO,CAAA;AAAA,GACzB;AACJ,CAAA;;AClDa,MAAA,qBAAA,GACX,CACE,EAEF,KAAA,CAAA,GAAI,SACF,IAAIP,eAAA,CAAW,CAAC,QAAa,KAAA;AAC3B,EAAI,IAAA,OAAA,GAAuC,IAAI,eAAgB,EAAA;AAE/D,EAAA,EAAA,CAAG,GAAG,CAAC,GAAG,MAAM,OAAQ,CAAA,MAAM,CAAC,CAAE,CAAA,IAAA;AAAA,IAC/B,CAAC,KAAe,KAAA;AACd,MAAA,QAAA,CAAS,KAAK,KAAK,CAAA;AACnB,MAAA,QAAA,CAAS,QAAS,EAAA;AAAA,KACpB;AAAA,IACA,CAAC,KAAe,KAAA;AACd,MAAA,QAAA,CAAS,MAAM,KAAK,CAAA;AAAA;AACtB,GACF;AAEA,EAAA,OAAO,MAAM;AACX,IAAA,QAAA,CAAS,WAAY,EAAA;AACrB,IAAA,OAAA,CAAS,KAAM,EAAA;AACf,IAAU,OAAA,GAAA,MAAA;AAAA,GACZ;AACF,CAAC,CAAA;;ACvBE,MAAM,gBACX,GAAA,CAAC,WACD,KAAA,CAAmC,GACnC,KAAA,CAAA,GAAI,IACD,KAAA,WAAA,EAAsB,CAAA,GAAG,CAAE,CAAA,GAAG,IAAI,CAAA;;ACHhC,MAAM,sBAAyB,GAAA,CACpC,OACA,EAAA,SAAA,KAEA,OAAQ,CAAA,IAAA;AAAA,EACNU,eAAU,CAAC,CAAA,KAAM,EAAE,MAAO,CAAA,GAAA,CAAI,SAAS,CAAC,CAAA;AAAA,EACxCC,yBAAA;AAAA,IACE,CAAC,GAAG,CAAM,KAAA,CAAA,CAAE,cAAc,CAAE,CAAA,SAAA,IAAa,CAAE,CAAA,IAAA,KAAS,CAAE,CAAA;AAAA,GACxD;AAAA,EACAC,QAAA,CAAI,CAAC,MAAwC,KAAA;AAC3C,IACE,IAAA,MAAA,CAAO,MAAO,CAAA,GAAA,CAAI,SAAS,CAAA,CAAG,MAC9B,GAAA,MAAA,CAAO,MAAO,CAAA,GAAA,CAAI,MAAO,CAAA,IAAI,CAAG,CAAA,MAAA;AAEhC,MAAO,OAAA,IAAA;AAET,IAAA,MAAM,EAAE,MAAO,EAAA,GAAI,MAAO,CAAA,MAAA,CAAO,IAAI,SAAS,CAAA;AAC9C,IAAA,IAAI,OAAU,GAAA,MAAA,CAAO,MAAO,CAAA,GAAA,CAAI,OAAO,IAAI,CAAA;AAC3C,IAAI,IAAA,WAAA,GAAc,MAAO,CAAA,SAAA,KAAc,OAAQ,CAAA,IAAA;AAC/C,IAAO,OAAA,OAAA,CAAQ,SAAS,MAAQ,EAAA;AAC9B,MAAA,OAAA,GAAU,MAAO,CAAA,MAAA,CAAO,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAA;AAC1C,MAAc,WAAA,GAAA,WAAA,IAAe,MAAO,CAAA,SAAA,KAAc,OAAQ,CAAA,IAAA;AAAA;AAE5D,IAAA,IAAI,aAAoB,OAAA,WAAA;AACxB,IAAO,OAAA,OAAA,CAAQ,IAAS,KAAA,SAAA,GAAY,MAAS,GAAA,IAAA;AAAA,GAC9C,CAAA;AAAA,EACDD,yBAAqB,EAAA;AAAA,EACrBD,cAAU,CAAA,CAAC,CAAM,KAAA,CAAA,KAAM,aAAa,IAAI;AAC1C;;AChBc,SAAA,wBAAA,CACd,OACA,EAAA,OAAA,EACA,EACuE,EAAA;AACvE,EAAO,OAAA,CAAC,IAAc,EAAA,eAAA,EAAA,GAAoB,IAAY,KAAA;AACpD,IAAA,MAAM,WAAmD,eACrD,GAAAG,SAAA;AAAA,MACE,cAAA;AAAA,QACE,IAAA;AAAA,QACA,OAAQ,CAAA,IAAA;AAAA,UACNC,WAAO,CAAA,CAAC,GAA0B,KAAA,GAAA,CAAI,SAAS,WAAW,CAAA;AAAA,UAC1DL,aAAS,CAAA,CAAC,GAAQ,KAAA,GAAA,CAAI,iBAAiB;AAAA;AACzC,OACF;AAAA,MACA,uBAAA,CAAwB,MAAM,OAAO;AAAA,KACvC,GACA,CAAC,CAAM,KAAA,CAAA;AAEX,IAAA,OAAO,QAAS,CAAA,EAAA,CAAG,IAAM,EAAA,GAAG,IAAI,CAAC,CAAA;AAAA,GACnC;AACF;AAEA,MAAM,uBAAA,GACJ,CAAI,IAAc,EAAA,OAAA,KAClB,CAAC,OACC,KAAA,sBAAA,CAAuB,OAAS,EAAA,IAAI,CAAE,CAAA,IAAA;AAAA,EACpCD,UAAK,CAAC,CAAA;AAAA,EACNO,cAAA;AAAA,IAAU,CAAC,WACT,MAAS,GAAA,OAAA,GAAUR,gBAAW,MAAM,IAAI,mBAAmB;AAAA;AAE/D,CAAA;AAEJ,MAAM,cAAA,GACJ,CAAI,IAAc,EAAA,OAAA,KAClB,CAAC,OACC,KAAA,IAAIP,eAAc,CAAA,CAAC,UAAe,KAAA;AAChC,EAAM,MAAA,kBAAA,GAAqB,OACxB,CAAA,IAAA,CAAKc,WAAO,CAAA,CAAC,CAAM,KAAA,CAAA,KAAM,IAAI,CAAC,CAC9B,CAAA,SAAA,CAAU,MAAM;AACf,IAAW,UAAA,CAAA,KAAA,CAAM,IAAI,gBAAA,EAAkB,CAAA;AAAA,GACxC,CAAA;AACH,EAAM,MAAA,kBAAA,GAAqB,OAAQ,CAAA,SAAA,CAAU,UAAU,CAAA;AAEvD,EAAA,OAAO,MAAM;AACX,IAAA,kBAAA,CAAmB,WAAY,EAAA;AAC/B,IAAA,kBAAA,CAAmB,WAAY,EAAA;AAAA,GACjC;AACF,CAAC,CAAA;;AC3DW,SAAA,gBAAA,CACd,OACA,EAAA,EAAA,EACA,KACA,EAAA;AACA,EAAO,OAAA,CAAC,SAAiB,IAAY,KAAA;AACnC,IAAA,MAAM,OAAU,GAAA,EAAA,CAAG,IAAM,EAAA,GAAG,IAAI,CAAA;AAEhC,IAAO,OAAA,IAAId,eAA4C,CAAA,CAAC,QAAa,KAAA;AACnE,MAAA,IAAI,SAAiC,GAAA,IAAA;AACrC,MAAA,IAAI,YAAe,GAAA,KAAA;AACnB,MAAA,MAAM,mBAAmB,MAAM;AAC7B,QAAA,IAAI,YAAc,EAAA;AAClB,QAAe,YAAA,GAAA,IAAA;AACf,QAAA,SAAA,GAAY,QAAQ,SAAU,CAAA;AAAA,UAC5B,IAAM,EAAA,CAAC,CAAM,KAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,UAC5B,KAAO,EAAA,CAAC,CAAM,KAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA,UAC9B,QAAA,EAAU,MAAM,QAAA,CAAS,QAAS;AAAA,SACnC,CAAA;AACD,QAAA,SAAA,CAAU,IAAI,MAAM;AAClB,UAAe,YAAA,GAAA,KAAA;AACf,UAAY,SAAA,GAAA,IAAA;AAAA,SACb,CAAA;AAAA,OACH;AAEA,MAAA,IAAI,YAAe,GAAA,KAAA;AACnB,MAAM,MAAA,QAAA,GAAW,QAAQ,SAAU,CAAA;AAAA,QACjC,IAAA,EAAM,CAAC,CAAM,KAAA;AACX,UAAA,MAAM,KAAQ,GAAA,CAAA,CAAE,MAAO,CAAA,GAAA,CAAI,IAAI,CAAA;AAC/B,UAAA,IAAI,CAAC,KAAO,EAAA;AAGV,YAAA,IAAI,YAAc,EAAA;AAChB,cAAA,QAAA,CAAS,KAAM,CAAA,IAAI,mBAAoB,CAAA,IAAA,EAAM,KAAK,CAAC,CAAA;AAAA;AACrD,WACF,MAAA,IAAW,MAAM,UAAY,EAAA;AAE3B,YAAA,SAAA,EAAW,WAAY,EAAA;AAAA,WAClB,MAAA;AACL,YAAiB,gBAAA,EAAA;AAAA;AAEnB,UAAA,YAAA,GAAe,CAAE,CAAA,UAAA;AAAA,SACnB;AAAA,QACA,KAAO,EAAA,CAAC,CAAM,KAAA,QAAA,CAAS,MAAM,CAAC;AAAA,OAC/B,CAAA;AAED,MAAA,OAAO,MAAM;AACX,QAAA,QAAA,CAAS,WAAY,EAAA;AACrB,QAAA,SAAA,EAAW,WAAY,EAAA;AAAA,OACzB;AAAA,KACD,CAAA;AAAA,GACH;AACF;;AChDa,MAAA,oBAAA,GAAuB,CAClC,WAAA,EACA,YACG,KAAA;AACH,EAAA,MAAM,oBAAoB,CACxB,IAAA,EACA,OACA,EAAA,SAAA,EACA,mBAEA,IAAIA,eAAA;AAAA,IACF,CAAC,QACC,KAAA,WAAA,EAAc,CAAA,mBAAA;AAAA,MACZ,IAAA;AAAA,MACA,OAAA;AAAA,MACA,SAAa,IAAA,IAAA;AAAA,MACb,CAAC,KAAU,KAAA;AACT,QAAA,QAAA,CAAS,KAAK,KAAK,CAAA;AAAA,OACrB;AAAA,MACA,CAAC,KAAU,KAAA;AACT,QAAA,QAAA,CAAS,MAAM,KAAK,CAAA;AAAA,OACtB;AAAA,MACA,MAAM;AACJ,QAAA,QAAA,CAAS,QAAS,EAAA;AAAA,OACpB;AAAA,MACA,CAAC,UAAe,KAAA;AAId,QAAA,IAAI,UAAa,GAAA,CAAA;AACf,UAAS,QAAA,CAAA,IAAA;AAAA,YACP,iBAAA;AAAA,cACE,IAAA;AAAA,cACA,OAAA,CAAQ,KAAM,CAAA,CAAC,UAAU,CAAA;AAAA,cACzB,SAAA;AAAA,cACA;AAAA;AACF,WACF;AAAA;AACJ;AACF,IACF,IAAK,CAAAgB,aAAA,EAAY,EAAA,YAAA,CAAa,cAAc,CAAC,CAAA;AAEjD,EAAO,OAAA,iBAAA;AACT,CAAA;;AClCA,MAAM,qBACJ,GAAA,CAAC,SACD,KAAA,CAAC,YACC,OAAQ,CAAA,IAAA;AAAA,EACNV,cAAA,CAAU,CAAC,KAAU,KAAA;AACnB,IAAA,OAAO,KAAM,CAAA,IAAA,KAAS,aAClB,GAAAW,OAAA,CAAG,KAAK,CACR,GAAA,SAAA,CAAU,KAAM,CAAA,oBAAA,CAAqB,CAAC,CAAC,CAAE,CAAA,IAAA,CAAK,CAAC,MAAY,MAAA;AAAA,MACzD,GAAG,KAAA;AAAA,MACH,QAAQ,MAAO,CAAA,MAAA;AAAA,MACf,YAAY,MAAO,CAAA;AAAA,KACnB,CAAA,CAAA;AAAA,GACP;AACH,CAAA;AAES,MAAA,UAAA,GAAa,CAAC,SAAyB,KAAA;AAClD,EAAA,IAAI,QAAkC,GAAA,IAAA;AACtC,EAAA,IAAI,QAAuB,GAAAC,SAAA;AAE3B,EAAA,MAAM,cAAc,MAAM;AACxB,IAAA,IAAI,CAAC,QAAA,EAAgB,MAAA,IAAI,MAAM,gCAAgC,CAAA;AAC/D,IAAO,OAAA,QAAA;AAAA,GACT;AAEA,EAAM,MAAA,SAAA,GAAY,CAAC,IAAA,KACjB,WAAY,EAAA,CAAE,OAAO,IAAI,CAAA,CAAE,IAAK,CAAAC,6BAAA,CAAY,GAAG,CAAA;AAEjD,EAAA,MAAM,OAAU,GAAAC,gBAAA;AAAA,IACd,IAAIpB,eAAmC,CAAA,CAAC,QAAa,KAAA;AACnD,MAAW,QAAA,GAAA,SAAA;AAAA,QACT,IAAA;AAAA,QACA,CAAC,CAAM,KAAA;AACL,UAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,SACjB;AAAA,QACA,CAAC,CAAM,KAAA;AACL,UAAW,QAAA,GAAA,IAAA;AACX,UAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA;AAClB,OACF;AACA,MAAA,QAAA,GAAW,MAAM;AACf,QAAA,QAAA,CAAS,QAAS,EAAA;AAClB,QAAA,QAAA,EAAU,QAAS,EAAA;AAAA,OACrB;AAAA,KACD,CAAE,CAAA,IAAA,CAAK,sBAAsB,SAAS,CAAA,EAAG,qBAAqB;AAAA,GACjE;AAEA,EAAA,MAAM,cAAc,MAAM;AACxB,IAAA,OAAA,CAAQ,OAAQ,EAAA;AAChB,IAAA,OAAO,MAAM;AACX,MAAS,QAAA,EAAA;AAAA,KACX;AAAA,GACF;AAEA,EAAO,OAAA;AAAA,IACL,SAAA;AAAA,IACA,WAAA;AAAA,IACA,WAAA;AAAA,IACA;AAAA,GACF;AACF,CAAA;AAEA,MAAM,sBACJ,MACA,CAAC,YACC,IAAIA,eAAA,CAKF,CAAC,QAAa,KAAA;AACd,EAAM,MAAA,YAAA,GAAe,IAAIqB,iBAAa,EAAA;AACtC,EAAM,MAAA,SAAA,GAAY,MAChB,OAAA,CAAQ,SAAU,CAAA;AAAA,IAChB,IAAM,EAAA,CAAC,CAAM,KAAA,QAAA,CAAS,KAAK,CAAC,CAAA;AAAA,IAC5B,KAAA,EAAO,CAAC,CAAM,KAAA;AACZ,MAAA,IAAI,aAAaC,yBAAW,EAAA;AAC1B,QAAA,QAAA,CAAS,IAAK,CAAA,EAAE,IAAM,EAAA,YAAA,EAAc,CAAA;AAAA,OAC/B,MAAA;AACL,QAAQ,OAAA,CAAA,IAAA,CAAK,mDAA8C,CAAC,CAAA;AAAA;AAE9D,MAAa,YAAA,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA,KAC9B;AAAA,IACA,QAAA,EAAU,MAAM,QAAA,CAAS,QAAS;AAAA,GACnC,CAAA;AACH,EAAa,YAAA,CAAA,GAAA,CAAI,WAAW,CAAA;AAC5B,EAAO,OAAA,YAAA;AACT,CAAC,CAAA;;ACnCL,MAAM,OAAU,GAAAC,WAAA,CAAMC,qBAAI,CAAA,GAAA,CAAI,EAAE,CAAC,CAAA;AACjC,MAAM,cAAcC,uBAAM,EAAA;AAC1B,MAAM,mBAAA,GAAsBC,yBAAO,WAAW,CAAA;AAC9C,MAAM,cAAA,GAAiBC,wBAAO,CAAAH,qBAAG,CAAE,CAAA,GAAA;AAEtB,MAAA,iBAAA,GAAoB,CAC/B,KACG,KAAA;AACH,EAAM,MAAA,YAAA,GAAe,CACnB,OACiE,KAAA;AACjE,IAAM,MAAA,YAAA,GAAe,CAAC,MAAA,EAAgB,IAAqC,KAAA;AACzE,MAAA,MAAM,OAAO,OAAQ,EAAA;AACrB,MAAA,OAAO,IACH,GAAA,KAAA,CAAM,IAAM,EAAA,MAAA,EAAQ,IAAI,CAAE,CAAA,IAAA;AAAA,QACxBrB,eAAA,CAAW,CAAC,CAAM,KAAA;AAChB,UAAA,IAAI,CAAa,YAAA,mBAAA;AACf,YAAO,OAAA,YAAA,CAAa,QAAQ,IAAI,CAAA;AAClC,UAAA,IAAI,CAAa,YAAAC,0CAAA;AACf,YAAO,OAAAC,UAAA,CAAM,GAAG,CAAE,CAAA,IAAA;AAAA,cAChBI,aAAS,CAAA,MAAM,YAAa,CAAA,MAAA,EAAQ,IAAI,CAAC;AAAA,aAC3C;AACF,UAAM,MAAA,CAAA;AAAA,SACP;AAAA,OAEH,GAAAmB,UAAA;AAAA,KACN;AAEA,IAAA,MAAM,QAAW,GAAA,YAAA,CAAa,4BAA8B,EAAA,EAAE,CAAE,CAAA,IAAA;AAAA,MAC9DhB,SAAI,cAAc;AAAA,KACpB;AAEA,IAAA,MAAM,GAAM,GAAA,YAAA,CAAa,mBAAqB,EAAA,EAAE,CAAE,CAAA,IAAA;AAAA,MAChDA,QAAA,CAAI,CAAC,CAAM,KAAA;AACT,QAAM,MAAA,WAAA,GAAc,WAAY,CAAA,GAAA,CAAI,CAAC,CAAA;AACrC,QAAM,MAAA,QAAA,GAAWiB,0BAAc,CAAA,GAAA,CAAI,WAAW,CAAA;AAC9C,QAAA,OAAO,EAAE,QAAA,EAAU,QAAS,CAAA,QAAA,CAAS,OAAc,WAAY,EAAA;AAAA,OAChE;AAAA,KACH;AAEA,IAAA,MAAM,GAAM,GAAA,YAAA,CAAa,8BAAgC,EAAA,OAAO,CAAE,CAAA,IAAA;AAAA,MAChEjB,QAAA,CAAI,CAAC,CAAM,KAAA;AACT,QAAM,MAAA,WAAA,GAAc,mBAAoB,CAAA,GAAA,CAAI,CAAC,CAAA;AAC7C,QAAM,MAAA,QAAA,GAAWiB,0BAAc,CAAA,GAAA,CAAI,WAAW,CAAA;AAC9C,QAAA,OAAO,EAAE,QAAA,EAAU,QAAS,CAAA,QAAA,CAAS,OAAc,WAAY,EAAA;AAAA,OAChE;AAAA,KACH;AAEA,IAAA,OAAO,QAAS,CAAA,IAAA;AAAA,MACd1B,gBAAW,MAAMc,OAAA,CAAG,CAAC,EAAE,CAAC,CAAC,CAAA;AAAA,MACzBR,aAAA,CAAS,CAAC,CAAO,KAAA,CAAA,CAAE,SAAS,EAAE,CAAA,GAAI,MAAM,GAAI;AAAA,KAC9C;AAAA,GACF;AAEA,EAAA,OAAO,CAAC,OAA0C,KAAA;AAChD,IAAA,MAAM,cAAc,OAAQ,EAAA;AAC5B,IAAA,MAAM,MAAS,mBAAA,IAAI,GAAY,CAAA,CAAC,WAAW,CAAC,CAAA;AAE5C,IAAA,MAAM,eAA8C,GAAA,YAAA;AAAA,MAClD;AAAA,KACA,CAAA,IAAA;AAAA,MACAG,QAAI,CAAA,CAAC,EAAE,QAAA,EAAU,aAAkB,KAAA;AACjC,QAAM,MAAA,MAAA,GAASkB,6BAAY,QAAQ,CAAA;AACnC,QAAM,MAAA,cAAA,GAAiBC,mCAAkB,MAAM,CAAA;AAC/C,QAAA,MAAM,MAAS,GAAA,cAAA,CAAe,YAAa,CAAA,QAAA,EAAU,QAAQ,CAAA;AAE7D,QAAM,MAAA,YAAA,GAAe,QAAS,CAAA,SAAA,CAAU,gBAAiB,CAAA,IAAA;AAAA,UACvD,CAAC,CAAM,KAAA,CAAA,CAAE,UAAe,KAAA;AAAA,SAC1B;AAEA,QAAA,IAAI,OAAyB,GAAA,IAAA;AAC7B,QAAA,IAAI,YAAc,EAAA;AAChB,UAAM,MAAA,cAAA,GAAiB,MAAO,CAAA,YAAA,CAAa,IAAI,CAAA;AAC/C,UAAI,IAAA,cAAA,CAAe,SAAS,QAAU,EAAA;AACpC,YAAM,MAAA,eAAA,GAAkB,eAAe,KAAM,CAAA,QAAA;AAC7C,YAAA,IAAI,gBAAgB,IAAS,KAAA,QAAA;AAC3B,cAAA,OAAA,GAAU,gBAAgB,KAAM,CAAA,EAAA;AAAA;AACpC;AAGF,QAAO,OAAA;AAAA,UACL,OAAA;AAAA,UACA,WAAA;AAAA,UACA,MAAA;AAAA,UACA,cAAA;AAAA,UACA,MAAQ,EAAA;AAAA,YACN,GAAA,EAAK,MAAO,CAAA,IAAA,CAAK,GAAI,EAAA;AAAA,YACrB,GAAA,EAAK,OAAO,KAAM,CAAA;AAAA,WACpB;AAAA,UACA,SAAA,EAAWC,2BAAU,CAAA,cAAA,CAAe,UAAU;AAAA,SAChD;AAAA,OACD,CAAA;AAAA,MACDC,iBAAY,CAAC;AAAA,KACf;AAEA,IAAA,MAAM,MAAkB,GAAA;AAAA,MACtB,EAAI,EAAA,WAAA;AAAA,MACJ,OAAS,EAAA,eAAA;AAAA,MACT,QAAA,EAAU,CAAC,KAAkB,KAAA;AAC3B,QAAA,MAAA,CAAO,IAAI,KAAK,CAAA;AAChB,QAAO,OAAA,MAAA;AAAA,OACT;AAAA,MACA,YAAA,EAAc,CAAC,MAAW,KAAA;AACxB,QAAO,MAAA,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AACxB,UAAA,MAAA,CAAO,OAAO,KAAK,CAAA;AAAA,SACpB,CAAA;AACD,QAAA,OAAO,MAAO,CAAA,IAAA;AAAA,OAChB;AAAA,MACA;AAAA,KACF;AACA,IAAA,eAAA,CAAgB,SAAU,CAAA;AAAA,MACxB,KAAQ,GAAA;AAAA;AAAC,KACV,CAAA;AAED,IAAO,OAAA,MAAA;AAAA,GACT;AACF,CAAA;;ACxJA,MAAM,mBAAA,GAAsB,CAAC,MAAA,EAAsB,OAAuB,KAAA;AACxE,EAAA,OAAO,MAAM;AACX,IAAM,MAAA,OAAA,GAAU,MAAO,CAAA,QAAA,CAAS,OAAO,CAAA;AACvC,IAAI,IAAA,CAAC,SAAgB,OAAA,MAAA,CAAO,OAAO,GAAI,CAAA,OAAO,IAAI,OAAU,GAAA,IAAA;AAC5D,IAAA,MAAM,SAAS,CAAC,GAAG,OAAQ,CAAA,MAAM,EAC9B,OAAQ,EAAA,CACR,IAAK,CAAA,CAAC,MAAM,CAAC,MAAA,CAAO,OAAO,GAAI,CAAA,CAAC,EAAG,QAAQ,CAAA;AAC9C,IAAA,OAAO,MAAU,IAAA,IAAA;AAAA,GACnB;AACF,CAAA;AAEA,MAAM,WAAA,GAAc,CAAC,MAAA,EAAgC,SAAsB,KAAA;AACzE,EAAO,MAAA,CAAA,GAAA,CAAI,OAAO,GAAI,CAAA,SAAS,EAAG,MAAM,CAAA,EAAG,QAAS,CAAA,MAAA,CAAO,SAAS,CAAA;AACpE,EAAA,MAAA,CAAO,OAAO,SAAS,CAAA;AACzB,CAAA;AAEA,MAAM,YAAA,GAAe,CAAC,MAAA,EAAsB,QAAuB,KAAA;AACjE,EAAS,QAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACzB,IAAY,WAAA,CAAA,MAAA,CAAO,QAAQ,IAAI,CAAA;AAAA,GAChC,CAAA;AAED,EAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,QAAQ,CAAA,CAC3B,IAAI,CAAC,CAAC,GAAK,EAAA,KAAK,CAAO,MAAA;AAAA,IACtB,GAAA;AAAA,IACA,MAAA,EAAQ,KAAM,CAAA,YAAA,CAAa,QAAQ;AAAA,IACnC,CACD,CAAA,MAAA,CAAO,CAAC,CAAA,KAAM,EAAE,MAAW,KAAA,CAAC,CAC5B,CAAA,GAAA,CAAI,CAAC,CAAM,KAAA,CAAA,CAAE,GAAG,CAChB,CAAA,OAAA,CAAQ,CAAC,aAAkB,KAAA;AAC1B,IAAO,OAAA,MAAA,CAAO,SAAS,aAAa,CAAA;AAAA,GACrC,CAAA;AACL,CAAA;AAEO,MAAM,mBAAmB,CAC9B,OAAA,EACA,KACA,EAAA,WAAA,EACA,SACA,eACG,KAAA;AACH,EAAA,MAAM,aAA0C,GAAAC,UAAA;AAAA,IAC9C,WAAA;AAAA,IACA;AAAA,GACA,CAAA,IAAA;AAAA,IACAC,SAAA,CAAK,CAAC,GAAA,EAAK,KAAU,KAAA;AACnB,MAAA,QAAQ,MAAM,IAAM;AAAA,QAClB,KAAK,aAAA;AACH,UAAA,IAAI,IAAI,UAAY,EAAA;AAClB,YAAM,MAAA,WAAA,GAAc,MAAM,oBAAqB,CAAA,IAAA;AAAA,cAAK,CAAC,IAAA,KACnD,GAAI,CAAA,MAAA,CAAO,IAAI,IAAI;AAAA,aACrB;AACA,YAAA,IAAI,CAAC,WAAa,EAAA;AAChB,cAAA,GAAA,GAAM,sBAAuB,EAAA;AAAA;AAC/B;AAGF,UAAA,MAAM,CAAC,aAAa,CAAA,GAAI,KAAM,CAAA,oBAAA,CAAqB,MAAM,EAAE,CAAA;AAC3D,UAAI,GAAA,CAAA,SAAA,GAAY,IAAI,IAAO,GAAA,aAAA;AAE3B,UAAM,MAAA,OAAA,GAAU,KAAM,CAAA,oBAAA,CAAqB,MAAS,GAAA,CAAA;AACpD,UAAA,KAAA,CAAM,oBAAqB,CAAA,OAAA,CAAQ,CAAC,IAAA,EAAM,CAAM,KAAA;AAC9C,YAAA,IAAI,GAAI,CAAA,MAAA,CAAO,GAAI,CAAA,IAAI,CAAG,EAAA;AACxB,cAAA,GAAA,CAAI,MAAO,CAAA,GAAA,CAAI,IAAI,CAAA,CAAG,UAAa,GAAA,KAAA;AAAA,aAC9B,MAAA;AACL,cAAI,GAAA,CAAA,MAAA,CAAO,IAAI,IAAM,EAAA;AAAA,gBACnB,IAAA;AAAA,gBACA,MAAA,EACE,MAAM,CACF,GAAA,KAAA,CAAM,aACN,KAAM,CAAA,oBAAA,CAAqB,IAAI,CAAC,CAAA;AAAA,gBACtC,UAAU,IAAI,GAAA;AAAA,kBACZ,CAAA,KAAM,UAAU,EAAC,GAAI,CAAC,KAAM,CAAA,oBAAA,CAAqB,CAAI,GAAA,CAAC,CAAC;AAAA,iBACzD;AAAA,gBACA,OAAS,EAAA,IAAA;AAAA,gBACT,QAAU,EAAA,CAAA;AAAA,gBACV,MAAA,EAAQ,MAAM,MAAS,GAAA,CAAA;AAAA,gBACvB,UAAY,EAAA;AAAA,eACb,CAAA;AAAA;AACH,WACD,CAAA;AAED,UAAA,MAAM,gBAAmB,GAAA,MAAA,CAAO,MAAO,CAAA,GAAA,CAAI,QAAQ,CAAE,CAAA,IAAA;AAAA,YAAK,CAAC,OAAA,KACzD,OAAQ,CAAA,MAAA,CAAO,IAAI,aAAa;AAAA,WAClC;AAEA,UAAA,GAAA,CAAI,gBACF,GAAA,gBAAA,KACC,GAAI,CAAA,QAAA,CAAS,aAAa,CAAI,GAAA,UAAA;AAAA,YAC7B,mBAAA,CAAoB,KAAK,aAAa;AAAA,WACxC,CAAA;AAEF,UAAO,OAAA,GAAA;AAAA,QAET,KAAK,YAAA;AACH,UAAA,KAAA,MAAW,KAAS,IAAA,GAAA,CAAI,MAAO,CAAA,MAAA,EAAU,EAAA;AACvC,YAAA,KAAA,CAAM,UAAa,GAAA,IAAA;AAAA;AAErB,UAAA,GAAA,CAAI,UAAa,GAAA,IAAA;AAEjB,UAAO,OAAA,GAAA;AAAA,QAET,KAAK,UAAY,EAAA;AACf,UAAA,MAAM,EAAE,eAAA,EAAiB,MAAQ,EAAA,SAAA,EAAW,MAAS,GAAA,KAAA;AACrD,UAAA,IAAI,GAAI,CAAA,MAAA,CAAO,GAAI,CAAA,IAAI,CAAG,EAAA;AACxB,YAAA,GAAA,CAAI,MAAO,CAAA,GAAA,CAAI,IAAI,CAAA,CAAG,UAAa,GAAA,KAAA;AAAA,WAC9B,MAAA;AACL,YAAA,MAAM,UAAa,GAAA,GAAA,CAAI,MAAO,CAAA,GAAA,CAAI,MAAM,CAAA;AACxC,YAAW,UAAA,CAAA,QAAA,CAAS,IAAI,IAAI,CAAA;AAC5B,YAAA,IAAI,MAAM,UAAY,EAAA;AACpB,cAAA,GAAA,CAAI,SAAS,IAAI,CAAA,GAAI,WAAW,mBAAoB,CAAA,GAAA,EAAK,IAAI,CAAC,CAAA;AAAA;AAEhE,YAAA,MAAM,KAAQ,GAAA;AAAA,cACZ,IAAA;AAAA,cACA,MAAA,EAAQ,WAAW,MAAS,GAAA,CAAA;AAAA,cAC5B,MAAA;AAAA,cACA,QAAA,sBAAc,GAAY,EAAA;AAAA,cAC1B,OAAS,EAAA,KAAA,CAAM,UAAa,GAAA,IAAA,GAAO,UAAW,CAAA,OAAA;AAAA,cAC9C,QAAU,EAAA,CAAA;AAAA,cACV,UAAY,EAAA;AAAA,aACd;AACA,YAAI,GAAA,CAAA,MAAA,CAAO,GAAI,CAAA,IAAA,EAAM,KAAK,CAAA;AAC1B,YAAA,GAAA,CAAI,QAAS,CAAA,KAAA,CAAM,OAAO,CAAA,CAAE,SAAS,IAAI,CAAA;AAAA;AAG3C,UAAO,OAAA,GAAA;AAAA;AACT,QAEA,KAAK,kBAAoB,EAAA;AACvB,UAAA,IAAI,IAAI,UAAY,EAAA;AAClB,YAAA,KAAA,MAAW,CAAC,IAAA,EAAM,KAAK,CAAA,IAAK,IAAI,MAAQ,EAAA;AACtC,cAAA,IAAI,MAAM,UAAY,EAAA;AACpB,gBAAY,WAAA,CAAA,GAAA,CAAI,QAAQ,IAAI,CAAA;AAC5B,gBAAA,eAAA,CAAgB,IAAI,CAAA;AAAA;AACtB;AAEF,YAAA,GAAA,CAAI,UAAa,GAAA,KAAA;AAAA;AAEnB,UAAA,GAAA,CAAI,OAAO,KAAM,CAAA,aAAA;AACjB,UAAO,OAAA,GAAA;AAAA;AACT,QAEA,KAAK,WAAa,EAAA;AAChB,UAAA,GAAA,CAAI,YAAY,KAAM,CAAA,oBAAA,CAAqB,KAAM,CAAA,EAAE,EAAE,CAAC,CAAA;AACtD,UAAM,MAAA,EAAE,QAAW,GAAA,GAAA;AAKnB,UAAI,IAAA,MAAA,CAAO,GAAI,CAAA,GAAA,CAAI,IAAI,CAAA,CAAG,SAAS,MAAO,CAAA,GAAA,CAAI,GAAI,CAAA,SAAS,CAAG,CAAA,MAAA;AAC5D,YAAA,GAAA,CAAI,OAAO,GAAI,CAAA,SAAA;AAEjB,UAAI,GAAA,CAAA,gBAAA,GACF,IAAI,QAAS,CAAA,MAAA,CAAO,IAAI,GAAI,CAAA,SAAS,EAAG,OAAO,CAAA;AAEjD,UAAM,MAAA,EAAE,iBAAmB,EAAA,OAAA,EAAY,GAAA,KAAA;AACvC,UAAA,YAAA,CAAa,KAAK,OAAO,CAAA;AACzB,UAAA,OAAA,CAAQ,OAAO,CAAA;AAIf,UAAA,UAAA,CAAW,MAAM;AACf,YAAA,MAAM,QAAkB,EAAC;AACzB,YAAA,MAAM,UAAoB,EAAC;AAC3B,YAAI,IAAA,OAAA,GAAU,OAAO,GAAI,CAAA,MAAA,CAAO,IAAI,GAAI,CAAA,SAAS,EAAG,MAAM,CAAA;AAC1D,YAAA,OAAO,OAAS,EAAA;AACd,cAAM,MAAA,EAAE,MAAS,GAAA,OAAA;AACjB,cAAA,KAAA,CAAM,KAAK,IAAI,CAAA;AACf,cAAA,IAAI,OAAQ,CAAA,QAAA,KAAa,CAAK,IAAA,CAAC,QAAQ,QAAU,EAAA;AAC/C,gBAAA,OAAA,CAAQ,QAAW,GAAA,IAAA;AAGnB,gBAAI,IAAA,OAAA,CAAQ,UAAY,EAAA,eAAA,CAAgB,IAAI,CAAA;AAAA,qBACvC,OAAA,CAAQ,KAAK,IAAI,CAAA;AAAA;AAExB,cAAU,OAAA,GAAA,MAAA,CAAO,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAA;AAAA;AAGrC,YAAA,MAAM,WAAqB,EAAC;AAC5B,YAAA,KAAA,IAAS,IAAI,KAAM,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAAK,EAAA,EAAA;AAC1C,cAAA,OAAA,GAAU,MAAO,CAAA,GAAA,CAAI,KAAM,CAAA,CAAC,CAAC,CAAA;AAC7B,cAAI,IAAA,CAAC,QAAQ,QAAU,EAAA;AACvB,cAAS,QAAA,CAAA,IAAA,CAAK,QAAQ,IAAI,CAAA;AAAA;AAG5B,YAAA,YAAA,CAAa,KAAK,QAAQ,CAAA;AAC1B,YAAA,OAAA,CAAQ,OAAO,CAAA;AAAA,aACd,CAAC,CAAA;AACJ,UAAO,OAAA,GAAA;AAAA;AACT,QAEA,KAAK,YAAc,EAAA;AACjB,UAAI,IAAA,CAAC,IAAI,MAAO,CAAA,GAAA,CAAI,MAAM,KAAM,CAAA,IAAI,GAAU,OAAA,GAAA;AAE9C,UAAA,MAAM,QAAQ,GAAI,CAAA,MAAA,CAAO,GAAI,CAAA,KAAA,CAAM,MAAM,IAAI,CAAA;AAC7C,UAAA,KAAA,CAAM,QAAY,IAAA,KAAA,CAAM,KAAM,CAAA,IAAA,KAAS,SAAS,CAAI,GAAA,EAAA;AACpD,UAAA,IACE,KAAM,CAAA,QAAA,KAAa,CACnB,IAAA,KAAA,CAAM,SAAS,GAAI,CAAA,MAAA,CAAO,GAAI,CAAA,GAAA,CAAI,SAAS,CAAA,CAAG,MAC9C,IAAA,CAAC,MAAM,UACP,EAAA;AACA,YAAA,KAAA,CAAM,QAAW,GAAA,IAAA;AACjB,YAAQ,OAAA,CAAA,CAAC,KAAM,CAAA,IAAI,CAAC,CAAA;AAAA;AAEtB,UAAO,OAAA,GAAA;AAAA;AACT;AACF,KACF,EAAG,wBAAwB,CAAA;AAAA,IAC3BrB,YAAO,CAAC,CAAA,KAAM,CAAC,CAAC,CAAA,CAAE,iBAAiB,OAAO,CAAA;AAAA,IAC1CF,SAAI,CAAC,CAAA,MAAO,EAAE,GAAG,GAAI,CAAA,CAAA;AAAA,IACrB;AAAA,GACF;AAEA,EAAA,MAAM,UAAa,GAAA,iBAAA;AAAA,IACjB,gBAAA,CAAiB,aAAe,EAAA,KAAA,EAAO,eAAe;AAAA,GACxD;AACA,EAAO,OAAA,aAAA;AACT,CAAA;AAEA,MAAM,yBAAyB,OAAqB;AAAA,EAClD,IAAM,EAAA,EAAA;AAAA,EACN,SAAW,EAAA,EAAA;AAAA,EACX,UAAU,EAAC;AAAA,EACX,MAAA,sBAAY,GAAI,EAAA;AAAA,EAChB,kBAAkB,EAAC;AAAA,EACnB,UAAY,EAAA;AACd,CAAA,CAAA;;ACtOO,MAAM,UAAa,GAAA,CACxB,OACA,EAAA,OAAA,EACA,YAIA,SACG,KAAA;AACH,EAAA,MAAM,oBAAoB,CACxB,IAAA,KAEAwB,cAAU,CAAA,OAAA,CAAQ,KAAKtB,WAAO,CAAA,CAAC,EAAE,MAAA,OAAa,CAAC,MAAA,CAAO,IAAI,IAAI,CAAC,CAAC,CAAC,CAAA;AAEnE,EAAA,MAAM,YAAe,GAAA,CACnB,IACA,EAAA,EAAA,EACA,cAC8B,KAAA;AAC9B,IAAI,IAAA,cAAA;AACF,MAAO,OAAAG,OAAA,CAAG,EAAE,IAAA,EAAM,KAAO,EAAA,EAAE,MAAM,KAAO,EAAA,QAAA,EAAU,IAAK,EAAA,EAAG,CAAA;AAE5D,IAAM,MAAA,YAAA,GAAe,kBAAkB,IAAI,CAAA;AAC3C,IAAO,OAAA,OAAA,CAAQ,IAAI,CAAE,CAAA,IAAA;AAAA,MACnBR,aAAA,CAAS,CAAC,GAAQ,KAAA;AAChB,QAAM,MAAA,KAAA,GAAQ,GAAI,CAAA,OAAA,CAAQ,EAAE,CAAA;AAC5B,QAAA,OAAO,QAAQ,EACX,GAAA,YAAA,CAAa,SAAU,CAAA,IAAI,CAAC,CAAE,CAAA,IAAA;AAAA,UAC5BG,QAAA,CAAI,CAAC,MAAY,MAAA;AAAA,YACf,IAAA;AAAA,YACA,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,IAAA;AAAA,cACN,KAAA;AAAA,cACA;AAAA;AACF,WACA,CAAA;AAAA,SAEJ,GAAA,UAAA,CAAW,IAAM,EAAA,EAAE,CAAE,CAAA,IAAA;AAAA,UACnBA,QAAA,CAAI,CAAC,QAAc,MAAA;AAAA,YACjB,IAAA;AAAA,YACA,KAAO,EAAA,EAAE,IAAM,EAAA,KAAA,EAAgB,QAAS;AAAA,WACxC,CAAA;AAAA,SACJ;AAAA,OACL,CAAA;AAAA,MACD;AAAA,KACF;AAAA,GACF;AAEA,EAAA,MAAM,YAAe,GAAA,CACnB,IACA,EAAA,EAAA,EACA,cAEA,KAAA,YAAA,CAAa,IAAM,EAAA,EAAA,EAAI,cAAe,CAAA,GAAA,CAAI,IAAI,CAAC,CAAE,CAAA,IAAA;AAAA,IAC/CH,aAAA,CAAS,CAAC,QAAa,KAAA;AACrB,MAAM,MAAA,EAAE,OAAU,GAAA,QAAA;AAClB,MAAO,OAAA,KAAA,CAAM,QAAQ,KAAM,CAAA,QAAA,EAAU,YAAY,KAC7C,GAAAQ,OAAA,CAAG,QAAQ,CAAA,GACX,OAAQ,CAAA,IAAA;AAAA,QACN,kBAAkB,IAAI,CAAA;AAAA,QACtBR,aAAA,CAAS,CAAC,CAAM,KAAA,CAAA,CAAE,OAAO,GAAI,CAAA,IAAI,EAAG,QAAQ,CAAA;AAAA,QAC5C4B,aAAS,EAAA;AAAA,QACT5B,cAAS,CAAC6B,KAAAA,KAAS,aAAaA,KAAM,EAAA,EAAA,EAAI,cAAc,CAAC;AAAA,OAC3D;AAAA,KACL;AAAA,GACH;AAEF,EAAO,OAAA,CAAC,OACN,OAAQ,CAAA,IAAA;AAAA,IACN9B,UAAK,CAAC,CAAA;AAAA,IACNC,aAAS,CAAA,CAAC,CAAM,KAAA,YAAA,CAAa,EAAE,SAAW,EAAA,EAAA,EAAI,IAAI,GAAA,CAAI,CAAE,CAAA,MAAA,CAAO,IAAK,EAAC,CAAC,CAAC;AAAA,GACzE;AACJ,CAAA;;ACvFA,MAAM,QAAW,GAAA,IAAI,UAAW,CAAA,CAAC,CAAC,CAAC,CAAA;AAEnC,MAAM,iBAAoB,GAAA,CAAC,EAAY,EAAA,IAAA,KACrCc,WAAM,CAAAgB,gBAAA,CAAW,QAAU,EAAAC,aAAA,CAAQ,EAAE,CAAA,EAAGA,aAAQ,CAAA,IAAI,CAAC,CAAC,CAAA;AAExD,MAAM,sBAAyB,GAAA,wBAAA;AAC/B,MAAM,mBAAsB,GAAA,sBAAA;AAE5B,MAAM,GAAG,uBAAuB,CAAA,GAAIC,yBAAQ,CAAA;AAAA,EAC1C,oBAAoBA,yBAAQ,CAAA;AAAA,IAC1B,IAAM,EAAAC,uBAAA;AAAA,IACN,OAAS,EAAAA,uBAAA;AAAA,IACT,MAAQ,EAAAA,uBAAA;AAAA,IACR,KAAO,EAAAA,uBAAA;AAAA,IACP,QAAU,EAAAA,uBAAA;AAAA,IACV,iBAAmB,EAAAA,uBAAA;AAAA,IACnB,iBAAmB,EAAAA,uBAAA;AAAA,IACnB,MAAQ,EAAAC,oBAAA;AAAA,IACR,YAAc,EAAAD,uBAAA;AAAA,IACd,mBAAqB,EAAAA,uBAAA;AAAA,IACrB,SAAW,EAAAA;AAAA,GACZ,CAAA;AAAA,EACD,oBAAoBD,yBAAQ,CAAA;AAAA,IAC1B,YAAc,EAAAC,uBAAA;AAAA,IACd,mBAAqB,EAAAA,uBAAA;AAAA,IACrB,MAAQ,EAAAC;AAAA,GACT;AACH,CAAC,CAAA;AACD,MAAM,wBAAA,GACJC,+BAAc,CAAA,CAAC,KAAU,KAAA;AACvB,EAAM,MAAA,SAAA,GAAYD,oBAAG,CAAA,GAAA,CAAI,KAAK,CAAA;AAC9B,EAAA,IAAI,SAAY,GAAA,CAAA;AACd,IAAM,MAAA,IAAI,MAAM,6CAA6C,CAAA;AAE/D,EAAA,IAAI,CAAC,SAAW,EAAA,OAAO,EAAE,OAAS,EAAA,IAAA,EAAM,OAAO,MAAU,EAAA;AACzD,EAAI,IAAA,KAAA;AACJ,EAAI,IAAA;AACF,IAAA,KAAA,GAAQ,wBAAwB,KAAK,CAAA;AAAA,WAC9B,CAAG,EAAA;AACV,IAAQ,KAAA,GAAA;AAAA,MACN,IAAM,EAAA;AAAA,KACR;AAAA;AAEF,EAAO,OAAA,EAAE,OAAS,EAAA,KAAA,EAAO,KAAM,EAAA;AACjC,CAAC,CAAA;AAEI,MAAM,gBACX,CACE,KAAA,EAKA,iBAEF,KAAA,CAAC,WAAmB,EAAoD,KAAA;AACtE,EAAM,MAAA,QAAA,GAAW,iBAAkB,CAAA,SAAS,CAAE,CAAA,IAAA;AAAA,IAC5C/B,QAAA,CAAI,CAAC,GAAQ,KAAA;AACX,MAAI,IAAA;AACF,QAAA,OAAO,IAAI,cAAe,CAAA,gBAAA;AAAA,UACxB,sBAAA;AAAA,UACA;AAAA,SACF,CAAE,MAAM,CAAC,CAAA;AAAA,eACF,CAAG,EAAA;AACV,QAAO,OAAA,wBAAA;AAAA;AACT,KACD;AAAA,GACH;AACA,EAAO,OAAA,KAAA;AAAA,IACL,SAAA;AAAA,IACA,CAAA,EAAG,sBAAsB,CAAA,CAAA,EAAI,mBAAmB,CAAA,CAAA;AAAA,IAChD,iBAAA,CAAkB,IAAI,SAAS;AAAA,GAC/B,CAAA,IAAA;AAAA,IACAiC,oBAAe,QAAQ,CAAA;AAAA,IACvBjC,QAAA,CAAI,CAAC,CAAC,MAAA,EAAQ,OAAO,CAAM,KAAA,OAAA,CAAQ,MAAM,CAAC;AAAA,GAC5C;AACF,CAAA;;ACrBF,MAAM,cAAc,CAAC,EAAE,IAAM,EAAA,MAAA,EAAQ,QAAsC,MAAA;AAAA,EACzE,IAAA;AAAA,EACA,MAAA;AAAA,EACA;AACF,CAAA,CAAA;AAEa,MAAA,aAAA,GAAgB,CAAC,SAAyB,KAAA;AACrD,EAAA,MAAM,EAAE,WAAa,EAAA,WAAA,EAAa,SAAS,SAAU,EAAA,GAAI,WAAW,SAAS,CAAA;AAC7E,EAAM,MAAA,YAAA,GAAe,iBAAiB,WAAW,CAAA;AACjD,EAAA,MAAM,EAAE,YAAA,EAAc,cAAe,EAAA,GAAI,eAAgB,EAAA;AAEzD,EAAM,MAAA,WAAA,GAAc,IAAIkC,YAAyB,EAAA;AACjD,EAAM,MAAA,SAAA,GAAY,CAAC,IAAiB,KAAA;AAClC,IAAY,WAAA,CAAA,IAAA,CAAK,EAAE,IAAA,EAAM,YAAc,EAAA,KAAA,EAAO,EAAE,IAAM,EAAA,MAAA,EAAQ,IAAK,EAAA,EAAG,CAAA;AACtE,IAAA,OAAO,MAAM;AACX,MAAA,UAAA,CAAW,MAAM;AACf,QAAA,WAAA,CAAY,IAAK,CAAA;AAAA,UACf,IAAM,EAAA,YAAA;AAAA,UACN,KAAO,EAAA,EAAE,IAAM,EAAA,SAAA,EAAW,IAAK;AAAA,SAChC,CAAA;AAAA,SACA,CAAC,CAAA;AAAA,KACN;AAAA,GACF;AAEA,EAAM,MAAA,UAAA,GACJ,CAAC,SAAsB,KAAA,CAAC,SACtB,IAAI9C,eAAA,CAAW,CAAC,QAAa,KAAA;AAC3B,IAAM,MAAA,OAAA,GAAU,UAAU,SAAS,CAAA;AACnC,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,SAAA,CAAU,QAAQ,CAAA;AAC5C,IAAA,YAAA,CAAa,IAAI,OAAO,CAAA;AACxB,IAAO,OAAA,YAAA;AAAA,GACR,CAAA;AAEL,EAAA,MAAM,YACJ,GAAA,CACE,EAEF,KAAA,CAAC,SAAS,IACR,KAAA,EAAA,CAAG,IAAM,EAAA,GAAG,IAAI,CAAA,CAAE,IAAK,CAAA,UAAA,CAAW,IAAI,CAAC,CAAA;AAE3C,EAAM,MAAA,YAAA,GACJ,CACE,EAAA,EACA,KAEF,KAAA,CAAC,SAAS,IACR,KAAA,IAAIA,eAAW,CAAA,CAAC,QAAa,KAAA;AAC3B,IAAA,IAAI,SAAY,GAAA,KAAA;AAChB,IAAA,aAAA,CAAc,KAAKQ,SAAK,CAAA,CAAC,CAAC,CAAE,CAAA,SAAA,CAAU,CAAC,MAAW,KAAA;AAChD,MAAA,MAAM,KAAQ,GAAA,MAAA,CAAO,MAAO,CAAA,GAAA,CAAI,IAAI,CAAA;AACpC,MAAA,SAAA,GAAY,CAAC,CAAC,KAAS,IAAA,CAAC,KAAM,CAAA,QAAA;AAAA,KAC/B,CAAA;AAED,IAAA,OAAO,SACH,GAAA,EAAA,CAAG,IAAM,EAAA,GAAG,IAAI,CAAE,CAAA,SAAA,CAAU,QAAQ,CAAA,GACpC,SAAS,KAAM,CAAA,IAAI,mBAAoB,CAAA,IAAA,EAAM,KAAK,CAAC,CAAA;AAAA,GACxD,CAAA;AAEL,EAAM,MAAA,KAAA,GAAQ,CAAC,MAAA,KACb,WAAY,EAAA,CACT,MAAM,MAAM,CAAA,CACZ,KAAM,CAAA,CAAC,CAAM,KAAA;AACZ,IAAA,IAAI,aAAauC,6BAAe,EAAA;AAChC,IAAM,MAAA,CAAA;AAAA,GACP,CAAA;AAEL,EAAM,MAAA,cAAA,GAAiB,CACrB,EAAA,EAIA,KACG,KAAA;AACH,IAAA,MAAM,iBAAiB,CAAC,GAAA,KACtB,wBAAyB,CAAA,aAAA,EAAe,SAAS,GAAG,CAAA;AAEtD,IAAO,OAAA,YAAA;AAAA,MACL,YAAA;AAAA,QACE,cAAA;AAAA,UACE,gBAAA;AAAA,YACE,aAAA;AAAA,YACA,cAAA,CAAe,qBAAsB,CAAA,EAAE,CAAC,CAAA;AAAA,YACxC,QAAQ,KAAK,CAAA;AAAA;AACf;AACF,OACF;AAAA,MACA;AAAA,KACF;AAAA,GACF;AAEA,EAAA,MAAM,kBAQJ,GAAA,CAAC,EAAIC,EAAAA,mBAAAA,GAAqB,IAC1B,KAAA,CAAC,IAAS,EAAA,GAAA,IAAA,KACR,EAAG,CAAA,IAAA,EAAMA,mBAAoB,EAAA,GAAG,IAAI,CAAA;AAExC,EAAM,MAAA,KAAA,uBAAY,GAA0C,EAAA;AAC5D,EAAA,MAAM,aAAgB,GAAA,gBAAA;AAAA,IACpB,OAAA;AAAA,IACA,aAAa,cAAe,CAAA,qBAAA,CAAsB,aAAa,MAAM,CAAC,CAAC,CAAC,CAAA;AAAA,IACxE,WAAA;AAAA,IACA,CAAC,MAAW,KAAA;AACV,MAAA,KAAA,CAAM,MAAM,CAAA;AACZ,MAAO,MAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACvB,QAAA,KAAA,CAAM,OAAO,IAAI,CAAA;AAAA,OAClB,CAAA;AAAA,KACH;AAAA,IACA,CAAC,KAAU,KAAA;AACT,MAAA,KAAA,CAAM,OAAO,KAAK,CAAA;AAAA;AACpB,GACF;AAEA,EAAA,MAAM,kBAAqB,GAAA,YAAA;AAAA,IAAa,CAAC,SACvC,aAAc,CAAA,IAAA;AAAA,MACZxC,UAAK,CAAC,CAAA;AAAA,MACNC,aAAA;AAAA,QACE,CAAC,MAAW,KAAA,MAAA,CAAO,QAAS,CAAA,MAAA,CAAO,OAAO,GAAI,CAAA,IAAI,CAAG,CAAA,OAAO,CAAE,CAAA;AAAA;AAChE;AACF,GACF;AAEA,EAAA,MAAM,WACJ,GAAA,CAAI,MACJ,KAAA,CAAC,YACC,OAAQ,CAAA,IAAA;AAAA,IACN,cAAA;AAAA,MAAe,CAAC,CAAA,KACd,kBAAmB,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAE,IAAK,CAAAG,QAAA,CAAI,CAAC,OAAY,KAAA,CAAC,CAAG,EAAA,OAAO,CAAC,CAAC;AAAA;AACnE,GACF;AAEJ,EAAA,MAAM,kBAAqB,GAAA,CACzB,IACA,EAAA,GAAA,EACA,MACkB,KAAA;AAClB,IAAA,MAAM,YAAY,KAAM,CAAA,GAAA,CAAI,IAAI,CAAA,wBAAS,GAAI,EAAA;AAC7C,IAAM,MAAA,MAAA,GAAS,SAAU,CAAA,GAAA,CAAI,GAAG,CAAA;AAChC,IAAA,IAAI,QAAe,OAAA,MAAA;AAEnB,IAAM,KAAA,CAAA,GAAA,CAAI,MAAM,SAAS,CAAA;AAEzB,IAAI,IAAA,SAAA;AACJ,IAAA,MAAM,SAAS,MAAO,CAAA,IAAA;AAAA,MACpBd,UAAM,CAAA;AAAA,QACJ,SAAW,EAAA,MAAO,SAAY,GAAA,IAAIC,kBAAc;AAAA,OACjD,CAAA;AAAA,MACDkD,QAAI,CAAA;AAAA,QACF,QAAW,GAAA;AACT,UAAU,SAAA,CAAA,GAAA,CAAI,KAAK,SAAS,CAAA;AAAA;AAC9B,OACD,CAAA;AAAA,MACD,mBAAoB;AAAA,KACtB;AACA,IAAU,SAAA,CAAA,GAAA,CAAI,KAAK,MAAM,CAAA;AAEzB,IAAO,OAAA,MAAA;AAAA,GACT;AAEA,EAAA,MAAM,aAAa,aAAc,CAAA,IAAA;AAAA,IAC/BnC,WAAO,CAAA,CAAC,CAAM,KAAA,CAAC,EAAE,UAAU,CAAA;AAAA,IAC3BH,0BAAqB,CAAC,CAAA,EAAG,MAAM,CAAE,CAAA,SAAA,KAAc,EAAE,SAAS,CAAA;AAAA,IAC1DwB,SAAA,CAAK,CAAC,GAAA,EAAK,KAAU,KAAA;AACnB,MAAA,IAAI,OAAU,GAAA,KAAA,CAAM,MAAO,CAAA,GAAA,CAAI,MAAM,SAAS,CAAA;AAC9C,MAAM,MAAA,MAAA,GAAS,CAAC,OAAO,CAAA;AAEvB,MAAM,MAAA,MAAA,GAAS,GAAI,CAAA,EAAA,CAAG,EAAE,CAAA;AACxB,MAAI,IAAA,CAAC,QAAe,OAAA,MAAA;AAEpB,MAAA,OAAO,OAAQ,CAAA,MAAA,GAAS,MAAO,CAAA,MAAA,GAAS,CAAG,EAAA;AACzC,QAAA,OAAA,GAAU,KAAM,CAAA,MAAA,CAAO,GAAI,CAAA,OAAA,CAAQ,MAAM,CAAA;AACzC,QAAA,IAAI,CAAC,OAAS,EAAA;AACd,QAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAExB,MAAO,OAAA,MAAA;AAAA,KACT,EAAG,EAAmB,CAAA;AAAA,IACtBnB,aAAS,EAAA;AAAA,IACTJ,SAAI,WAAW,CAAA;AAAA,IACf;AAAA,GACF;AAEA,EAAA,MAAM,QAAQ,aAAc,CAAA,IAAA;AAAA,IAC1BD,0BAAqB,CAAC,CAAA,EAAG,MAAM,CAAE,CAAA,IAAA,KAAS,EAAE,IAAI,CAAA;AAAA,IAChDC,QAAA,CAAI,CAAC,MAAA,KAAW,WAAY,CAAA,MAAA,CAAO,OAAO,GAAI,CAAA,MAAA,CAAO,IAAI,CAAE,CAAC,CAAA;AAAA,IAC5D;AAAA,GACF;AAEA,EAAA,MAAM,cAAc,aAAc,CAAA,IAAA;AAAA,IAChCE,WAAO,CAAA,CAAC,CAAM,KAAA,CAAC,EAAE,UAAU,CAAA;AAAA,IAC3BH,yBAAA;AAAA,MACE,CAAC,MAAM,OACL,KAAA,IAAA,CAAK,cAAc,OAAQ,CAAA,SAAA,IAAa,IAAK,CAAA,IAAA,KAAS,OAAQ,CAAA;AAAA,KAClE;AAAA,IACAwB,SAAA,CAAK,CAAC,GAAA,EAAK,MAAW,KAAA;AACpB,MAAA,MAAM,YAAe,GAAA,CAAC,IACpB,KAAA,GAAA,CAAI,GAAI,CAAA,IAAI,CAAK,IAAA,WAAA,CAAY,MAAO,CAAA,MAAA,CAAO,GAAI,CAAA,IAAI,CAAE,CAAA;AAEvD,MAAM,MAAA,IAAA,GAAO,YAAa,CAAA,MAAA,CAAO,IAAI,CAAA;AACrC,MAAM,MAAA,SAAA,GAAY,YAAa,CAAA,MAAA,CAAO,SAAS,CAAA;AAE/C,MAAA,MAAM,GAAM,GAAA,IAAA,CAAK,MAAS,GAAA,SAAA,CAAU,MAAS,GAAA,CAAA;AAC7C,MAAM,MAAA,MAAA,GAAS,IAAI,KAAA,CAAiB,GAAG,CAAA;AACvC,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,IAAA,GAAO,KAAK,IAAM,EAAA,CAAA,GAAI,KAAK,CAAK,EAAA,EAAA;AAC9C,QAAO,MAAA,CAAA,CAAC,CAAI,GAAA,YAAA,CAAa,IAAI,CAAA;AAC7B,QAAO,IAAA,GAAA,MAAA,CAAO,CAAC,CAAE,CAAA,MAAA;AAAA;AAGnB,MAAO,OAAA,IAAI,GAAI,CAAA,MAAA,CAAO,GAAI,CAAA,CAAC,CAAM,KAAA,CAAC,CAAE,CAAA,IAAA,EAAM,CAAC,CAAC,CAAC,CAAA;AAAA,KAC/C,kBAAO,IAAA,GAAA,EAAwB,CAAA;AAAA,IAC/BvB,QAAA,CAAI,CAAC,CAAM,KAAA,CAAC,GAAG,CAAE,CAAA,MAAA,EAAQ,CAAC,CAAA;AAAA,IAC1B;AAAA,GACF;AAEA,EAAA,MAAM,WAAW,aAAc,CAAA,IAAA;AAAA,IAC7BD,0BAAqB,CAAC,CAAA,EAAG,MAAM,CAAE,CAAA,gBAAA,KAAqB,EAAE,gBAAgB,CAAA;AAAA,IACxEI,cAAA;AAAA,MAAU,CAAC,EAAE,gBAAA,EAAkB,EAAE,OAAA,EAAU,EAAA,KACzC,OAAQ,CAAA,IAAA,CAAK,gBAAiB,CAAA,IAAI,CAAC;AAAA,KACrC;AAAA,IACA;AAAA,GACF;AAEA,EAAM,MAAA,SAAA,GAAY,QAAS,CAAA,IAAA,CAAKH,QAAI,CAAA,CAAC,MAAM,CAAG,EAAA,MAAA,CAAO,QAAY,IAAA,IAAI,CAAC,CAAA;AAEtE,EAAA,MAAM,iBAAoB,GAAA,oBAAA;AAAA,IACxB,WAAW,IAAK,CAAAA,QAAA,CAAI,CAAC,CAAM,KAAA,CAAA,CAAE,IAAI,CAAC,CAAA;AAAA,IAClC,MAAM,IAAK,CAAAA,QAAA,CAAI,CAAC,CAAM,KAAA,CAAA,CAAE,IAAI,CAAC,CAAA;AAAA,IAC7B;AAAA,GACF;AAEA,EAAA,MAAM,SAAS,iBAAkB,CAAA,cAAA,CAAe,aAAa,MAAM,CAAA,EAAG,MAAM,CAAC,CAAA;AAC7E,EAAM,MAAA,KAAA,GAAQ,CAAC,IACb,KAAA,kBAAA,CAAmB,MAAM,MAAQ,EAAA,MAAA,CAAO,IAAM,EAAA,IAAI,CAAC,CAAA;AAErD,EAAA,MAAM,SAAY,GAAA,cAAA,CAAe,YAAa,CAAA,SAAS,GAAG,SAAS,CAAA;AAEnE,EAAA,MAAM,QAAW,GAAA,iBAAA;AAAA,IACf,CAME,MACAoC,mBACA,EAAA,IAAA,EACA,WACA,SAA2B,GAAA,IAAA,EAC3B,WAMA,aAAc,CAAA,IAAA;AAAA,MACZxC,UAAK,CAAC,CAAA;AAAA,MACNC,aAAA;AAAA,QACE,CAAC,MAAW,KAAA,MAAA,CAAO,QAAS,CAAA,MAAA,CAAO,OAAO,GAAI,CAAA,IAAI,CAAG,CAAA,OAAO,CAAE,CAAA;AAAA,OAChE;AAAA,MACAA,aAAA,CAAS,CAAC,GAAQ,KAAA;AAChB,QAAM,MAAA,GAAA,GAAM,UAAU,GAAG,CAAA;AACzB,QAAA,MAAM,SAAY,GAAA,kBAAA;AAAA,UAChB,IAAA;AAAA,UACA,WAAW,IAAI,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA,EAAI,aAAa,EAAE,CAAA,CAAA;AAAA,UACzC,SAAU,CAAA,IAAA,EAAMuC,mBAAoB,EAAA,IAAA,EAAM,KAAK,SAAS;AAAA,SAC1D;AAEA,QAAA,OAAO,MACH,GAAA,kBAAA;AAAA,UACE,IAAA;AAAA,UACA,WAAW,IAAI,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA,EAAI,aAAa,EAAE,CAAA,IAAA,CAAA;AAAA,UACzC,SAAU,CAAA,IAAA;AAAA,YACRpC,QAAA,CAAI,CAAC,GAAA,MAAS,EAAE,GAAA,EAAK,QAAQ,MAAO,CAAA,GAAA,EAAK,GAAG,CAAA,EAAI,CAAA;AAAA;AAClD,SAEF,GAAA,SAAA;AAAA,OACL;AAAA;AACH,GAKJ;AAEA,EAAM,MAAA,iBAAA,GAAoB,oBAAqB,CAAA,WAAA,EAAa,YAAY,CAAA;AACxE,EAAA,MAAM,eAAkB,GAAA,iBAAA;AAAA,IACtB,gBAAA;AAAA,MACE,aAAA;AAAA,MACA,CAAC,MAAc,OAAkC,EAAA,SAAA,KAC/C,kBAAkB,IAAM,EAAA,OAAA,EAAS,SAAa,IAAA,IAAA,EAAM,KAAK,CAAA;AAAA,MAC3D,CAAA,cAAA;AAAA;AACF,GACF;AAEA,EAAA,MAAM,OAAU,GAAA,iBAAA;AAAA,IACd,gBAAA;AAAA,MACE,aAAA;AAAA,MACA,CAAC,IAAiB,KAAAX,UAAA,CAAM,MAAM,SAAA,CAAU,IAAI,CAAC,CAAA;AAAA,MAC7C;AAAA;AACF,GACF;AAEA,EAAA,MAAM,SAAY,GAAA,CAAC,IAAqB,EAAA,SAAA,GAAY,KAClD,KAAA,QAAA;AAAA,IACE,IAAA;AAAA,IACA,SAAA;AAAA,IACA,OAAA;AAAA,IACA,CAAC,GAAQ,KAAA,GAAA,CAAI,MAAO,CAAA,GAAA;AAAA,IACpB,IAAA;AAAA,IACA,CAAC,CAAG,EAAA,GAAA,KAAQ,GAAI,CAAA,MAAA,CAAO,IAAI,CAAE;AAAA,IAC7B,IAAK,CAAAW,QAAA,CAAI,CAAC,CAAM,KAAA,CAAA,CAAE,MAAM,CAAC,CAAA;AAE7B,EAAA,MAAM,OAAU,GAAA,cAAA,CAAe,YAAa,CAAA,MAAM,GAAG,MAAM,CAAA;AAC3D,EAAA,MAAM,KAAQ,GAAA,iBAAA;AAAA,IACZ,CAAC,IAAA,EAAc,SAAoB,EAAA,EAAA,EAAY,IAC7C,KAAA,kBAAA;AAAA,MACE,IAAA;AAAA,MACA,CAAA,KAAA,EAAQ,EAAE,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA;AAAA,MAClB,OAAQ,CAAA,IAAA,EAAM,SAAW,EAAA,EAAA,EAAI,IAAI;AAAA;AACnC,GACJ;AAEA,EAAA,MAAM,WAAc,GAAA,aAAA;AAAA,IAClB,kBAAA,CAAmB,OAAO,KAAK,CAAA;AAAA,IAC/B;AAAA,GACF;AAEA,EAAM,MAAA,UAAA,GAAa,CAAC,IAClB,KAAA,kBAAA,CAAmB,MAAM,MAAQ,EAAA,MAAA,CAAO,IAAM,EAAA,KAAK,CAAC,CAAA;AAEtD,EAAA,MAAM,QAAW,GAAA,UAAA,CAAW,aAAe,EAAA,UAAA,EAAY,aAAa,SAAS,CAAA;AAC7E,EAAA,MAAM,qBAAwB,GAAA,UAAA;AAAA,IAC5B,aAAA;AAAA,IACA,UAAA;AAAA,IACA,WAAA;AAAA,IACA,MAAMK,OAAG;AAAA,GACX;AAEA,EAAA,MAAM,WAAW,QAAS,CAAA,IAAA;AAAA,IACxBH,YAAO,OAAO,CAAA;AAAA,IACdN,UAAK,CAAC,CAAA;AAAA,IACNC,aAAA,CAAS,CAAC,OAAY,KAAA;AACpB,MAAA,MAAM,EAAE,GAAA,EAAQ,GAAA,OAAA,CAAQ,cAAe,CAAA,YAAA;AAAA,QACrC,QAAA;AAAA,QACA;AAAA,OACA,CAAA,IAAA;AAKF,MAAI,IAAA,GAAA;AACJ,MAAI,IAAA;AAEF,QAAA,GAAA,GAAM,IAAI,CAAC,CAAA;AAAA,OACL,CAAA,MAAA;AAEN,QAAA,GAAA,GAAM,IAAI,EAAE,CAAA;AAAA;AAGd,MAAO,OAAA,QAAA;AAAA,QACL,IAAA;AAAA,QACA,KAAA;AAAA,QACA,OAAA;AAAA,QACA,MAAM,GAAA;AAAA,QACN;AAAA,OACF;AAAA,KACD,CAAA;AAAA,IACDwB,iBAAY,CAAC;AAAA,GACf;AAKA,EAAMC,UAAA,CAAA,QAAA,EAAU,WAAW,CAAA,CAAE,SAAU,CAAA;AAAA,IACrC,KAAQ,GAAA;AAAA;AAAC,GACV,CAAA;AAED,EAAA,IAAI,QAAW,GAAAhB,SAAA;AACf,EAAA,IAAI,OAA0B,GAAA,KAAA;AAC9B,EAAA,IAAI,YAAuB,GAAA,CAAA;AAC3B,EAAM,MAAA,KAAA,GAAQ,CAAC,aAA0B,KAAA;AACvC,IAAgB,YAAA,IAAA,aAAA;AAChB,IAAU,OAAA,GAAA,IAAA;AAEV,IAAA,QAAA,GAAW,WAAY,EAAA;AAAA,GACzB;AAEA,EAAO,OAAA;AAAA,IACL;AAAA,MACE,OAAA;AAAA,MACA,UAAA;AAAA,MACA,KAAA;AAAA,MACA,WAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MAEA,OAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA,EAAO,mBAAmB,KAAK,CAAA;AAAA,MAC/B,QAAA,EAAU,mBAAmB,QAAQ,CAAA;AAAA,MACrC,eAAA;AAAA,MACA,SAAA,EAAW,mBAAmB,SAAS,CAAA;AAAA,MAEvC,SAAA;AAAA,MACA,QAAA;AAAA,MACA,qBAAA;AAAA,MACA,WAAA;AAAA,MACA,aAAA;AAAA,MACA,WAAA;AAAA,MACA,kBAAA,EAAoB,kBAAkB,kBAAkB,CAAA;AAAA,MACxD,UAAU,MAAM;AACd,QAAA,IAAI,WAAW,IAAM,EAAA;AACrB,QAAA,YAAA,EAAA;AACA,QAAI,IAAA,OAAA,IAAW,CAAC,YAAc,EAAA;AAC5B,UAAU,OAAA,GAAA,IAAA;AACV,UAAS,QAAA,EAAA;AACT,UAAW,QAAA,GAAAA,SAAA;AAAA;AACb;AACF,KACF;AAAA,IACA;AAAA,GACF;AACF,CAAA;;AC3eA,sBAAe,CAAC,eAAA,KACd,CAAC,WAAA,KACC,IAAIlB,eAAA;AAAA,EAAkB,CAAC,QAAA,KACrB,eAAgB,CAAA,WAAA,EAAa,CAAC,CAAM,KAAA;AAClC,IAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA,GACjB;AACH,CAAA;;ACKJ,MAAM,WAAA,uBAAkB,GAGtB,EAAA;AAEW,MAAA,mBAAA,GAAsB,CACjC,eACqB,KAAA;AACrB,EAAM,MAAA,MAAA,GAAS,WAAY,CAAA,GAAA,CAAI,eAAe,CAAA;AAC9C,EAAA,IAAI,MAAQ,EAAA;AACV,IAAO,MAAA,CAAA,QAAA,EAAA;AACP,IAAA,OAAO,MAAO,CAAA,MAAA;AAAA;AAGhB,EAAA,MAAM,UAAU,MAAM;AACpB,IAAMkD,MAAAA,OAAAA,GAAS,WAAY,CAAA,GAAA,CAAI,eAAe,CAAA;AAC9C,IAAA,IAAI,CAACA,OAAAA,IAAUA,OAAO,CAAA,QAAA,IAAY,CAAG,EAAA;AACnC,MAAA,WAAA,CAAY,OAAO,eAAe,CAAA;AAClC,MAAA,eAAA,CAAgB,OAAQ,EAAA;AAAA,KACnB,MAAA;AACL,MAAAA,OAAO,CAAA,QAAA,EAAA;AAAA;AACT,GACF;AAEA,EAAA,IAAI,eAEO,GAAA,IAAA;AACX,EAAA,IAAI,kBAAqB,GAAA,CAAA;AACzB,EAAA,IAAI,mBAAqC,GAAA,IAAA;AAEzC,EAAA,MAAM,MAA2B,GAAA;AAAA,IAC/B,UAAA,EAAY,CAAC,oBAAyB,KAAA;AACpC,MAAA,kBAAA,EAAA;AACA,MAAA,mBAAA,KAAA,mBAAA,GAAwB,oBAAwB,IAAA,CAAA,CAAA;AAChD,MAAoB,eAAA,KAAA,eAAA,GAAA,aAAA,CAAc,gBAAgB,SAAS,CAAA,CAAA;AAC3D,MAAM,MAAA,CAAC,MAAQ,EAAA,KAAK,CAAI,GAAA,eAAA;AACxB,MAAA,IAAI,wBAAwB,kBAAoB,EAAA;AAC9C,QAAA,MAAM,wBAA2B,GAAA,kBAAA;AACjC,QAAqB,kBAAA,GAAA,CAAA;AACrB,QAAsB,mBAAA,GAAA,IAAA;AACtB,QAAkB,eAAA,GAAA,IAAA;AAClB,QAAA,KAAA,CAAM,wBAAwB,CAAA;AAAA;AAEhC,MAAO,OAAA,MAAA;AAAA,KACT;AAAA,IACA,YAAA,EAAc,eAAgB,CAAA,eAAA,CAAgB,WAAW,CAAA;AAAA,IACzD;AAAA,GACF;AAEA,EAAA,WAAA,CAAY,IAAI,eAAiB,EAAA,EAAE,MAAQ,EAAA,QAAA,EAAU,GAAG,CAAA;AACxD,EAAO,OAAA,MAAA;AACT;;;;;;;;;"}