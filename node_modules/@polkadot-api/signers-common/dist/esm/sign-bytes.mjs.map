{"version":3,"file":"sign-bytes.mjs","sources":["../../src/sign-bytes.ts"],"sourcesContent":["import { Binary } from \"@polkadot-api/substrate-bindings\"\nimport { mergeUint8 } from \"@polkadot-api/utils\"\n\nconst [preBytes, postBytes] = [\"<Bytes>\", \"</Bytes>\"].map((str) =>\n  Binary.fromText(str).asBytes(),\n)\n\nexport const getSignBytes =\n  (sign: (x: Uint8Array) => Uint8Array | Promise<Uint8Array>) =>\n  async (data: Uint8Array): Promise<Uint8Array> => {\n    let isPadded = true\n    let i: number\n\n    for (i = 0; isPadded && i < preBytes.length; i++)\n      isPadded = preBytes[i] === data[i]\n    isPadded = isPadded && i === preBytes.length\n\n    const postDataStart = data.length - postBytes.length\n    for (i = 0; isPadded && i < postBytes.length; i++)\n      isPadded = postBytes[i] === data[postDataStart + i]\n    isPadded = isPadded && i === postBytes.length\n\n    return sign(isPadded ? data : mergeUint8(preBytes, data, postBytes))\n  }\n"],"names":[],"mappings":";;;AAGA,MAAM,CAAC,QAAU,EAAA,SAAS,IAAI,CAAC,SAAA,EAAW,UAAU,CAAE,CAAA,GAAA;AAAA,EAAI,CAAC,GACzD,KAAA,MAAA,CAAO,QAAS,CAAA,GAAG,EAAE,OAAQ;AAC/B,CAAA;AAEO,MAAM,YACX,GAAA,CAAC,IACD,KAAA,OAAO,IAA0C,KAAA;AAC/C,EAAA,IAAI,QAAW,GAAA,IAAA;AACf,EAAI,IAAA,CAAA;AAEJ,EAAA,KAAK,CAAI,GAAA,CAAA,EAAG,QAAY,IAAA,CAAA,GAAI,SAAS,MAAQ,EAAA,CAAA,EAAA;AAC3C,IAAA,QAAA,GAAW,QAAS,CAAA,CAAC,CAAM,KAAA,IAAA,CAAK,CAAC,CAAA;AACnC,EAAW,QAAA,GAAA,QAAA,IAAY,MAAM,QAAS,CAAA,MAAA;AAEtC,EAAM,MAAA,aAAA,GAAgB,IAAK,CAAA,MAAA,GAAS,SAAU,CAAA,MAAA;AAC9C,EAAA,KAAK,CAAI,GAAA,CAAA,EAAG,QAAY,IAAA,CAAA,GAAI,UAAU,MAAQ,EAAA,CAAA,EAAA;AAC5C,IAAA,QAAA,GAAW,SAAU,CAAA,CAAC,CAAM,KAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA;AACpD,EAAW,QAAA,GAAA,QAAA,IAAY,MAAM,SAAU,CAAA,MAAA;AAEvC,EAAA,OAAO,KAAK,QAAW,GAAA,IAAA,GAAO,WAAW,QAAU,EAAA,IAAA,EAAM,SAAS,CAAC,CAAA;AACrE;;;;"}