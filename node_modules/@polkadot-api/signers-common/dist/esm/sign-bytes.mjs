import { Binary } from '@polkadot-api/substrate-bindings';
import { mergeUint8 } from '@polkadot-api/utils';

const [preBytes, postBytes] = ["<Bytes>", "</Bytes>"].map(
  (str) => Binary.fromText(str).asBytes()
);
const getSignBytes = (sign) => async (data) => {
  let isPadded = true;
  let i;
  for (i = 0; isPadded && i < preBytes.length; i++)
    isPadded = preBytes[i] === data[i];
  isPadded = isPadded && i === preBytes.length;
  const postDataStart = data.length - postBytes.length;
  for (i = 0; isPadded && i < postBytes.length; i++)
    isPadded = postBytes[i] === data[postDataStart + i];
  isPadded = isPadded && i === postBytes.length;
  return sign(isPadded ? data : mergeUint8(preBytes, data, postBytes));
};

export { getSignBytes };
//# sourceMappingURL=sign-bytes.mjs.map
