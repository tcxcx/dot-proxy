{"version":3,"file":"v4.mjs","sources":["../../src/v4.ts"],"sourcesContent":["import {\n  type V14,\n  type V15,\n  compact,\n  enhanceEncoder,\n  u8,\n} from \"@polkadot-api/substrate-bindings\"\nimport { mergeUint8 } from \"@polkadot-api/utils\"\nimport { getLookupFn, LookupEntry } from \"@polkadot-api/metadata-builders\"\n\nconst versionCodec = enhanceEncoder(\n  u8.enc,\n  (value: { signed: boolean; version: number }) =>\n    (+!!value.signed << 7) | value.version,\n)\n\nconst enum SignerType {\n  Polkadot,\n  Ethereum,\n}\nconst unkownSignerType = () => new Error(\"Unkown signer\")\nconst getSignerType = (metadata: V14 | V15): [SignerType, [] | [number]] => {\n  const { extrinsic } = metadata\n  const getLookup = getLookupFn(metadata)\n  let address: LookupEntry\n  let signature: LookupEntry\n  if (\"address\" in extrinsic) {\n    address = getLookup(extrinsic.address)\n    signature = getLookup(extrinsic.signature)\n  } else {\n    const extProps = Object.fromEntries(\n      metadata.lookup[extrinsic.type].params\n        .filter((x) => x.type != null)\n        .map((x) => [x.name, getLookup(x.type!)]),\n    )\n    address = extProps[\"Address\"]\n    signature = extProps[\"Signature\"]\n    if (!address || !signature) throw unkownSignerType()\n  }\n\n  if (\n    address.type === \"AccountId20\" &&\n    signature.type === \"array\" &&\n    signature.len === 65 &&\n    signature.value.type === \"primitive\" &&\n    signature.value.value === \"u8\"\n  )\n    return [SignerType.Ethereum, []]\n\n  if (\n    signature.type !== \"enum\" ||\n    [\"Ecdsa\", \"Ed25519\", \"Sr25519\"].some((x) => !(x in signature.value))\n  )\n    throw unkownSignerType()\n\n  if (address.type === \"enum\") {\n    const id = address.value[\"Id\"]\n    if (id.type === \"lookupEntry\" && id.value.type === \"AccountId32\")\n      return [SignerType.Polkadot, [id.idx]]\n  } else if (address.type === \"AccountId32\") return [SignerType.Polkadot, []]\n  throw unkownSignerType()\n}\n\nconst signingTypeId: Record<\"Ecdsa\" | \"Ed25519\" | \"Sr25519\", number> = {\n  Ed25519: 0,\n  Sr25519: 1,\n  Ecdsa: 2,\n}\n\nexport const createV4Tx = (\n  metadata: V14 | V15,\n  publicKey: Uint8Array,\n  signed: Uint8Array,\n  extra: Uint8Array[],\n  callData: Uint8Array,\n  signingType?: \"Ecdsa\" | \"Ed25519\" | \"Sr25519\",\n) => {\n  const [signerType, addressPrefix] = getSignerType(metadata)\n  const preResult = mergeUint8(\n    versionCodec({ signed: true, version: 4 }),\n    // converting it to a `MultiAddress` enum, where the index 0 is `Id(AccountId)`\n    signerType === SignerType.Ethereum\n      ? publicKey\n      : new Uint8Array([...addressPrefix, ...publicKey]),\n    signerType === SignerType.Ethereum || !signingType\n      ? signed\n      : new Uint8Array([signingTypeId[signingType], ...signed]),\n    ...extra,\n    callData,\n  )\n  return mergeUint8(compact.enc(preResult.length), preResult)\n}\n"],"names":[],"mappings":"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"}