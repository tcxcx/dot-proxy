import { Option, str, enhanceCodec, Struct, compactNumber, u32, u8, Vector, ScaleEnum, _void } from '@polkadot-api/substrate-bindings';

const Variant = (inner) => enhanceCodec(
  ScaleEnum(inner),
  (value) => {
    if (typeof value === "string") {
      return {
        tag: value,
        value: void 0
      };
    }
    const [tag, val] = Object.entries(value)[0];
    return {
      tag,
      value: val
    };
  },
  (value) => {
    return {
      [value.tag]: value.value
    };
  }
);
const PjsVector = (inner, size) => enhanceCodec(
  Vector(inner, size),
  (value) => value ?? [],
  (v) => v
);
const oStr = Option(str);
const docs = PjsVector(str);
const primitive = Variant({
  bool: _void,
  char: _void,
  str: _void,
  u8: _void,
  u16: _void,
  u32: _void,
  u64: _void,
  u128: _void,
  u256: _void,
  i8: _void,
  i16: _void,
  i32: _void,
  i64: _void,
  i128: _void,
  i256: _void
});
const fields = PjsVector(
  Struct({
    name: oStr,
    type: compactNumber,
    typeName: oStr,
    docs
  })
);
const arr = Struct({
  len: u32,
  type: compactNumber
});
const bitSequence = Struct({
  bitStoreType: compactNumber,
  bitOrderType: compactNumber
});
const variants = PjsVector(
  Struct({
    name: str,
    fields,
    index: u8,
    docs
  })
);
const def = Variant({
  composite: Struct({
    fields
  }),
  variant: Struct({
    variants
  }),
  sequence: Struct({
    type: compactNumber
  }),
  array: arr,
  tuple: Vector(compactNumber),
  primitive,
  compact: compactNumber,
  bitSequence
});
const param = Struct({
  name: str,
  type: Option(compactNumber)
});
const params = PjsVector(param);
const metadataEntry = Struct({
  id: compactNumber,
  path: docs,
  params,
  def,
  docs
});
const entry = enhanceCodec(
  metadataEntry,
  (value) => ({
    id: value.id,
    path: value.type.path,
    params: value.type.params ?? [],
    def: value.type.def,
    docs: []
  }),
  (value) => ({
    id: value.id,
    type: {
      def: value.def,
      path: value.path,
      params: value.params
    }
  })
);
const pjsTypes = PjsVector(entry);

export { pjsTypes };
//# sourceMappingURL=metadata-pjs-types.mjs.map
