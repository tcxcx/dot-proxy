{"version":3,"file":"dynamic-builders.mjs","sources":["../../src/dynamic-builders.ts"],"sourcesContent":["import { getLookupCodecBuilder } from \"@polkadot-api/metadata-builders\"\nimport { Binary, Variant } from \"@polkadot-api/substrate-bindings\"\nimport {\n  _void,\n  Bytes,\n  Codec,\n  CodecType,\n  createCodec,\n  enhanceCodec,\n  StringRecord,\n  Struct,\n  Tuple,\n} from \"@polkadot-api/substrate-bindings\"\nimport { InkMetadataLookup } from \"./get-lookup\"\nimport {\n  EventParamSpec,\n  EventSpecV5,\n  MessageParamSpec,\n  TypeSpec,\n} from \"./metadata-types\"\n\nexport const getInkDynamicBuilder = (metadataLookup: InkMetadataLookup) => {\n  const { metadata } = metadataLookup\n\n  const buildDefinition = getLookupCodecBuilder(metadataLookup)\n\n  const buildStorage = (name = \"\") => {\n    const storageEntry = metadataLookup.storage[name]\n    if (!storageEntry)\n      throw new Error(`Storage entry ${name ? name : \"{root}\"} not found`)\n\n    const keyCodec =\n      storageEntry.key == null ? _void : buildDefinition(storageEntry.key)\n    return {\n      key: prependBytes(keyCodec, storageEntry.keyPrefix),\n      value: buildDefinition(storageEntry.typeId),\n    }\n  }\n\n  const buildCallable = (callable: {\n    selector: string\n    args: Array<MessageParamSpec>\n    returnType: TypeSpec\n  }) => {\n    const argsCodec = Struct(\n      Object.fromEntries(\n        callable.args.map((param) => [\n          param.label,\n          buildDefinition(param.type.type),\n        ]),\n      ) as StringRecord<Codec<any>>,\n    )\n\n    return {\n      call: prependBytes(argsCodec, callable.selector),\n      value: buildDefinition(callable.returnType.type),\n    }\n  }\n\n  const buildConstructor = (label: string) => {\n    const constr = metadata.spec.constructors.find((c) => c.label === label)\n    if (!constr) {\n      throw new Error(`Constructor ${label} not found`)\n    }\n\n    return buildCallable(constr)\n  }\n\n  const buildMessage = (label: string) => {\n    const message = metadata.spec.messages.find((c) => c.label === label)\n    if (!message) {\n      throw new Error(`Message ${label} not found`)\n    }\n\n    return buildCallable(message)\n  }\n\n  const buildEventCodec = (event: { args: EventParamSpec[] }) =>\n    Struct(\n      Object.fromEntries(\n        event.args.map((param) => [\n          param.label,\n          buildDefinition(param.type.type),\n        ]),\n      ) as StringRecord<Codec<any>>,\n    )\n\n  const buildEvent = (signatureTopic: string | undefined) => {\n    const events = metadata.spec.events as EventSpecV5[]\n\n    const withType = <T>(codec: Codec<T>, type: string) =>\n      enhanceCodec<T, { type: string; value: T }>(\n        codec,\n        (evt) => evt.value,\n        (value) => ({ type, value }),\n      )\n\n    if (signatureTopic) {\n      const event = events.find((evt) => evt.signature_topic === signatureTopic)\n      return event ? withType(buildEventCodec(event), event.label) : null\n    }\n\n    const candidates = events.filter(\n      (evt) => evt.signature_topic === signatureTopic,\n    )\n    return candidates.length\n      ? first(candidates.map((c) => withType(buildEventCodec(c), c.label)))\n      : null\n  }\n\n  const buildEvents = () =>\n    Variant(\n      Object.fromEntries(\n        metadata.spec.events.map((evt) => [evt.label, buildEventCodec(evt)]),\n      ) as StringRecord<Codec<any>>,\n    )\n\n  return {\n    buildConstructor,\n    buildMessage,\n    buildStorage,\n    buildEvents,\n    buildEvent,\n  }\n}\n\nexport type InkDynamicBuilder = ReturnType<typeof getInkDynamicBuilder>\n\nconst prependBytes = <T>(codec: Codec<T>, hex: string) => {\n  const bytes = Binary.fromHex(hex).asBytes()\n  const wrappedCodec = Tuple(Bytes(bytes.length), codec)\n  return enhanceCodec(\n    wrappedCodec,\n    (value: CodecType<typeof codec>): CodecType<typeof wrappedCodec> => [\n      bytes,\n      value,\n    ],\n    ([, value]) => value,\n  )\n}\n\nconst first = <T>(codecs: Codec<T>[]) =>\n  createCodec<T>(\n    (x) => {\n      for (const codec of codecs) {\n        try {\n          codec.enc(x)\n        } catch (_) {}\n      }\n      throw new Error(\"Unable to encode\")\n    },\n    (x) => {\n      for (const codec of codecs) {\n        try {\n          codec.dec(x)\n        } catch (_) {}\n      }\n      throw new Error(\"Unable to decode\")\n    },\n  )\n"],"names":[],"mappings":"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"}