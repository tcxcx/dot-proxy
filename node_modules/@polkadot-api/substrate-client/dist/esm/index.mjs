import { getTransaction } from './transaction/transaction.mjs';
export { DisjointError, OperationError, OperationInaccessibleError, OperationLimitError, StopError } from './chainhead/errors.mjs';
import { getChainHead } from './chainhead/chainhead.mjs';
export { RpcError } from './client/RpcError.mjs';
import { createClient as createClient$1 } from './client/createClient.mjs';
export { DestroyedError } from './client/DestroyedError.mjs';
import { abortablePromiseFn } from './internal-utils/abortablePromiseFn.mjs';
import { createGetChainSpec } from './chainspec.mjs';
export { AbortError } from '@polkadot-api/utils';

const clientCache = /* @__PURE__ */ new Map();
const createClient = (provider) => {
  const cached = clientCache.get(provider);
  if (cached) {
    cached.refCount++;
    return cached.client;
  }
  const { request, disconnect } = createClient$1(provider);
  const destroy = () => {
    const cached2 = clientCache.get(provider);
    if (!cached2 || cached2.refCount <= 1) {
      clientCache.delete(provider);
      disconnect();
    } else {
      cached2.refCount--;
    }
  };
  const client = {
    chainHead: getChainHead(request),
    transaction: getTransaction(request),
    getChainSpecData: createGetChainSpec(request),
    destroy,
    request: abortablePromiseFn(
      (onSuccess, onError, method, params) => request(method, params, { onSuccess, onError })
    ),
    _request: request
  };
  clientCache.set(provider, { client, refCount: 1 });
  return client;
};

export { createClient };
//# sourceMappingURL=index.mjs.map
