import { AbortError, noop } from '@polkadot-api/utils';

const abortablePromiseFn = (fn) => (...args) => new Promise((res, rej) => {
  let cancel = noop;
  const [actualArgs, abortSignal] = args[args.length - 1] instanceof AbortSignal ? [args.slice(0, args.length - 1), args[args.length - 1]] : [args];
  const onAbort = () => {
    cancel();
    rej(new AbortError());
  };
  abortSignal?.addEventListener("abort", onAbort, { once: true });
  const withCleanup = (fn2) => (x) => {
    cancel = noop;
    abortSignal?.removeEventListener("abort", onAbort);
    fn2(x);
  };
  cancel = fn(...[withCleanup(res), withCleanup(rej), ...actualArgs]);
});

export { abortablePromiseFn };
//# sourceMappingURL=abortablePromiseFn.mjs.map
