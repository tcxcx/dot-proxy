'use strict';

var utils = require('@polkadot-api/utils');
var signersCommon = require('@polkadot-api/signers-common');
var substrateBindings = require('@polkadot-api/substrate-bindings');

function getPolkadotSigner(publicKey, signingType, sign) {
  const signTx = async (callData, signedExtensions, metadata, _, hasher = substrateBindings.Blake2256) => {
    let decMeta;
    try {
      const tmpMeta = substrateBindings.decAnyMetadata(metadata);
      if (tmpMeta.metadata.tag !== "v14" && tmpMeta.metadata.tag !== "v15")
        throw null;
      decMeta = tmpMeta.metadata.value;
    } catch (_2) {
      throw new Error("Unsupported metadata version");
    }
    const extra = [];
    const additionalSigned = [];
    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {
      const signedExtension = signedExtensions[identifier];
      if (!signedExtension)
        throw new Error(`Missing ${identifier} signed extension`);
      extra.push(signedExtension.value);
      additionalSigned.push(signedExtension.additionalSigned);
    });
    const toSign = utils.mergeUint8(callData, ...extra, ...additionalSigned);
    const signed = await sign(toSign.length > 256 ? hasher(toSign) : toSign);
    return signersCommon.createV4Tx(decMeta, publicKey, signed, extra, callData, signingType);
  };
  return {
    publicKey,
    signTx,
    signBytes: signersCommon.getSignBytes(sign)
  };
}

exports.getPolkadotSigner = getPolkadotSigner;
//# sourceMappingURL=index.js.map
