import { ClientOptions, AddChainOptions } from 'smoldot';

type SmoldotOptions = Omit<ClientOptions, "portToWorker">;
interface StartMsg {
    type: "start";
    value: SmoldotOptions;
}
interface AddChainMsg {
    type: "add-chain";
    value: Omit<AddChainOptions, "potentialRelayChains"> & {
        potentialRelayChainIds?: number[];
    };
}
interface TerminateMsg {
    type: "terminate";
}
interface ChainMsg {
    type: "chain";
    value: {
        id: number;
    } & ({
        type: "remove" | "receive" | "receiveIterable";
    } | {
        type: "send";
        value: string;
    });
}
type RequestMessage = StartMsg | AddChainMsg | TerminateMsg | ChainMsg;
type CorrelatedRequestMessage = {
    id: number;
} & RequestMessage;

export type { AddChainMsg, ChainMsg, CorrelatedRequestMessage, RequestMessage, SmoldotOptions, StartMsg, TerminateMsg };
