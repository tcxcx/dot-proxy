const chainIds = /* @__PURE__ */ new WeakMap();
const startFromWorker = (worker, options = {}) => {
  worker.setMaxListeners(0);
  sendToWorker(worker, {
    type: "start",
    value: options
  });
  return {
    async addChain(options2) {
      const { potentialRelayChains, ...addChainOptions } = options2;
      const id = await sendToWorker(worker, {
        type: "add-chain",
        value: {
          ...addChainOptions,
          potentialRelayChainIds: potentialRelayChains?.map((chain2) => {
            const id2 = chainIds.get(chain2);
            if (id2 == null) {
              throw new Error("Only chains created with `addChain` can be used");
            }
            return id2;
          })
        }
      });
      const chain = {
        jsonRpcResponses: {
          next: async () => sendToWorker(worker, {
            type: "chain",
            value: {
              id,
              type: "receiveIterable"
            }
          }),
          [Symbol.asyncIterator]() {
            return this;
          }
        },
        nextJsonRpcResponse() {
          return sendToWorker(worker, {
            type: "chain",
            value: {
              id,
              type: "receive"
            }
          });
        },
        remove() {
          return sendToWorker(worker, {
            type: "chain",
            value: {
              id,
              type: "remove"
            }
          });
        },
        sendJsonRpc(value) {
          return sendToWorker(worker, {
            type: "chain",
            value: {
              id,
              type: "send",
              value
            }
          });
        }
      };
      chainIds.set(chain, id);
      return chain;
    },
    async terminate() {
      await sendToWorker(worker, {
        type: "terminate"
      });
    }
  };
};
let msgId = 0;
function sendToWorker(worker, msg) {
  const id = msgId++;
  worker.postMessage({ ...msg, id });
  return new Promise((resolve) => {
    const msgHandler = (response) => {
      if (response.id === id) {
        resolve(response.value);
        worker.off("message", msgHandler);
      }
    };
    worker.on("message", msgHandler);
  });
}

export { startFromWorker };
//# sourceMappingURL=from-node-worker.mjs.map
