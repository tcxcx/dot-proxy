{"version":3,"file":"checksum-builder.mjs","sources":["../../src/checksum-builder.ts"],"sourcesContent":["import type { StringRecord } from \"@polkadot-api/substrate-bindings\"\nimport { h64 } from \"@polkadot-api/substrate-bindings\"\nimport {\n  LookupGraph,\n  buildLookupGraph,\n  getStronglyConnectedComponents,\n  getSubgraph,\n  mergeSCCsWithCommonNodes,\n} from \"./lookup-graph\"\nimport {\n  ArrayVar,\n  LookupEntry,\n  MetadataLookup,\n  MetadataPrimitives,\n  StructVar,\n  TupleVar,\n  VoidVar,\n} from \"./lookups\"\n\nconst textEncoder = new TextEncoder()\nconst encodeText = textEncoder.encode.bind(textEncoder)\n\nconst getChecksum = (values: Array<bigint>) => {\n  const res = new Uint8Array(values.length * 8)\n  const dv = new DataView(res.buffer)\n\n  for (let i = 0; i < values.length; i++) dv.setBigUint64(i * 8, values[i])\n\n  return h64(res)\n}\nconst getStringChecksum = (values: Array<string>) =>\n  getChecksum(values.map((v) => h64(encodeText(v))))\n\ntype Shape =\n  | \"primitive\"\n  | \"void\"\n  | \"vector\"\n  | \"tuple\"\n  | \"struct\"\n  | \"option\"\n  | \"result\"\n  | \"enum\"\nconst shapeIds: Record<Shape, bigint> = {\n  primitive: 0n,\n  vector: 1n,\n  tuple: 2n,\n  struct: 3n,\n  option: 4n,\n  result: 5n,\n  enum: 6n,\n  void: 7n,\n}\n\ntype RuntimePrimitives =\n  | \"undefined\"\n  | \"number\"\n  | \"string\"\n  | \"bigint\"\n  | \"boolean\"\n  | \"bitSequence\"\n  | \"byteSequence\"\n  | \"accountId32\"\n  | \"accountId20\"\n\nconst runtimePrimitiveIds: Record<RuntimePrimitives, bigint> = {\n  undefined: 0n,\n  number: 1n,\n  string: 2n,\n  bigint: 3n,\n  boolean: 4n,\n  bitSequence: 5n, // {bitsLen: number, bytes: Uint8Array}\n  byteSequence: 6n, // Binary\n  accountId32: 7n, // SS58String\n  accountId20: 8n, // EthAccount\n}\n\nconst metadataPrimitiveIds: Record<MetadataPrimitives, bigint> = {\n  bool: runtimePrimitiveIds.boolean,\n  char: runtimePrimitiveIds.string,\n  str: runtimePrimitiveIds.string,\n  u8: runtimePrimitiveIds.number,\n  u16: runtimePrimitiveIds.number,\n  u32: runtimePrimitiveIds.number,\n  u64: runtimePrimitiveIds.bigint,\n  u128: runtimePrimitiveIds.bigint,\n  u256: runtimePrimitiveIds.bigint,\n  i8: runtimePrimitiveIds.number,\n  i16: runtimePrimitiveIds.number,\n  i32: runtimePrimitiveIds.number,\n  i64: runtimePrimitiveIds.bigint,\n  i128: runtimePrimitiveIds.bigint,\n  i256: runtimePrimitiveIds.bigint,\n}\n\nconst structLikeBuilder = <T>(\n  shapeId: bigint,\n  input: StringRecord<T>,\n  innerChecksum: (value: T) => bigint,\n) => {\n  const sortedEntries = Object.entries(input).sort(([a], [b]) =>\n    a.localeCompare(b),\n  )\n  const keysChecksum = getStringChecksum(sortedEntries.map(([key]) => key))\n  const valuesChecksum = getChecksum(\n    sortedEntries.map(([, entry]) => innerChecksum(entry)),\n  )\n\n  return getChecksum([shapeId, keysChecksum, valuesChecksum])\n}\n\nconst _buildChecksum = (\n  input: LookupEntry,\n  buildNextChecksum: (entry: LookupEntry) => bigint,\n): bigint => {\n  if (input.type === \"primitive\")\n    return getChecksum([shapeIds.primitive, metadataPrimitiveIds[input.value]])\n\n  if (input.type === \"void\") return getChecksum([shapeIds.void])\n\n  if (input.type === \"compact\")\n    return getChecksum([\n      shapeIds.primitive,\n      runtimePrimitiveIds[input.isBig ? \"bigint\" : \"number\"],\n    ])\n\n  if (input.type === \"bitSequence\")\n    return getChecksum([shapeIds.primitive, runtimePrimitiveIds.bitSequence])\n\n  if (input.type === \"AccountId32\") {\n    return getChecksum([shapeIds.primitive, runtimePrimitiveIds.accountId32])\n  }\n\n  if (input.type === \"AccountId20\") {\n    return getChecksum([shapeIds.primitive, runtimePrimitiveIds.accountId20])\n  }\n\n  const buildVector = (entry: LookupEntry, length?: number) => {\n    const innerChecksum = buildNextChecksum(entry)\n    return getChecksum(\n      length !== undefined\n        ? [shapeIds.vector, innerChecksum, BigInt(length)]\n        : [shapeIds.vector, innerChecksum],\n    )\n  }\n\n  if (input.type === \"array\") {\n    const innerValue = input.value\n    if (innerValue.type === \"primitive\" && innerValue.value === \"u8\") {\n      return getChecksum([\n        shapeIds.primitive,\n        runtimePrimitiveIds.byteSequence,\n        BigInt(input.len),\n      ])\n    }\n    return buildVector(innerValue, input.len)\n  }\n\n  if (input.type === \"sequence\") {\n    const innerValue = input.value\n    if (innerValue.type === \"primitive\" && innerValue.value === \"u8\") {\n      return getChecksum([shapeIds.primitive, runtimePrimitiveIds.byteSequence])\n    }\n    return buildVector(innerValue)\n  }\n\n  const buildTuple = (entries: LookupEntry[]) =>\n    getChecksum([shapeIds.tuple, ...entries.map(buildNextChecksum)])\n\n  const buildStruct = (entries: StringRecord<LookupEntry>) =>\n    structLikeBuilder(shapeIds.struct, entries, buildNextChecksum)\n\n  if (input.type === \"tuple\") return buildTuple(input.value)\n\n  if (input.type === \"struct\") return buildStruct(input.value)\n\n  if (input.type === \"option\")\n    return getChecksum([shapeIds.option, buildNextChecksum(input.value)])\n\n  if (input.type === \"result\")\n    return getChecksum([\n      shapeIds.result,\n      buildNextChecksum(input.value.ok),\n      buildNextChecksum(input.value.ko),\n    ])\n\n  return structLikeBuilder(shapeIds.enum, input.value, (entry) => {\n    if (entry.type === \"lookupEntry\") return buildNextChecksum(entry.value)\n    switch (entry.type) {\n      case \"void\":\n        return getChecksum([shapeIds.void])\n      case \"tuple\":\n        return buildTuple(entry.value)\n      case \"struct\":\n        return buildStruct(entry.value)\n      case \"array\":\n        return buildVector(entry.value, entry.len)\n    }\n  })\n}\n\nconst sortCyclicGroups = (groups: Array<Set<number>>, graph: LookupGraph) => {\n  const getReachableNodes = (group: Set<number>) => {\n    const result = new Set<number>()\n    const toVisit = Array.from(group)\n    while (toVisit.length) {\n      const id = toVisit.pop()!\n      if (result.has(id)) continue\n      result.add(id)\n\n      graph.get(id)?.refs.forEach((id) => toVisit.push(id))\n    }\n\n    return Array.from(result)\n  }\n\n  const result: Array<Set<number>> = new Array()\n\n  function dependentsFirst(group: Set<number>) {\n    if (result.includes(group)) return\n    const dependents = groups.filter(\n      (candidate) =>\n        candidate !== group &&\n        getReachableNodes(group).some((node) => candidate.has(node)),\n    )\n    dependents.forEach((group) => dependentsFirst(group))\n    if (result.includes(group)) return\n    result.push(group)\n  }\n\n  groups.forEach((group) => dependentsFirst(group))\n  return result\n}\n\nfunction iterateChecksums(\n  group: Set<number>,\n  iterations: number,\n  cache: Map<number, bigint>,\n  graph: LookupGraph,\n) {\n  // Keep the values that are getting changed on each iteration in a separate\n  // cache, because two nodes referencing the same one should read the same\n  // previous iteration checksum for that node.\n  const groupReadCache = new Map([...group].map((id) => [id, 0n]))\n  const groupWriteCache = new Map<number, bigint>()\n\n  const recursiveBuildChecksum = (\n    entry: LookupEntry,\n    // The first call has to skip the cache, otherwise it would return the\n    // previous iteration result.\n    skipCache = true,\n  ): bigint => {\n    if (!skipCache && (groupReadCache.has(entry.id) || cache.has(entry.id))) {\n      return groupReadCache.get(entry.id) ?? cache.get(entry.id)!\n    }\n    const result = _buildChecksum(entry, (nextEntry) =>\n      recursiveBuildChecksum(nextEntry, false),\n    )\n    if (group.has(entry.id)) {\n      groupWriteCache.set(entry.id, result)\n    } else {\n      cache.set(entry.id, result)\n    }\n    return result\n  }\n\n  for (let i = 0; i < iterations; i++) {\n    group.forEach((id) => recursiveBuildChecksum(graph.get(id)!.entry))\n\n    group.forEach((id) => groupReadCache.set(id, groupWriteCache.get(id)!))\n  }\n\n  return groupReadCache\n}\n\nfunction getMirroredNodes(\n  cyclicGroups: Array<Set<number>>,\n  graph: LookupGraph,\n) {\n  const maxSize = cyclicGroups.reduce(\n    (acc, group) => Math.max(acc, group.size),\n    0,\n  )\n  const allEntries = new Set([...graph.values()].map((v) => v.entry.id))\n\n  const resultingChecksums = iterateChecksums(\n    allEntries,\n    maxSize,\n    // Cache won't be used, since it's using the internal one for every node.\n    new Map(),\n    graph,\n  )\n\n  const checksumToNodes = new Map<bigint, number[]>()\n  for (const id of allEntries) {\n    const checksum = resultingChecksums.get(id)\n    if (checksum == undefined) throw new Error(\"Unreachable\")\n    if (!checksumToNodes.has(checksum)) {\n      checksumToNodes.set(checksum, [])\n    }\n    checksumToNodes.get(checksum)!.push(id)\n  }\n\n  const checksumsWithDuplicates = [...checksumToNodes.entries()].filter(\n    ([, nodes]) => nodes.length > 1,\n  )\n\n  const duplicatesMap: Record<number, number[]> = {}\n  checksumsWithDuplicates.forEach(([, nodes]) => {\n    nodes.forEach((n) => (duplicatesMap[n] = nodes))\n  })\n\n  return duplicatesMap\n}\n\nconst buildChecksum = (\n  entry: LookupEntry,\n  cache: Map<number, bigint>,\n  graph: LookupGraph,\n) => {\n  if (cache.has(entry.id)) return cache.get(entry.id)!\n\n  const subGraph = getSubgraph(entry.id, graph)\n\n  const cycles = getStronglyConnectedComponents(subGraph).filter(\n    // SCCs can be of length=1, but for those we're only interested with those that are circular with themselves\n    (group) => group.size > 1 || isSelfCircular(group, subGraph),\n  )\n  const cyclicGroups = mergeSCCsWithCommonNodes(cycles).filter((group) => {\n    // Exclude groups that were previously calculated\n    return !cache.has(group.values().next().value!)\n  })\n  const mirrored = getMirroredNodes(cyclicGroups, subGraph)\n  const sortedCyclicGroups = sortCyclicGroups(cyclicGroups, subGraph)\n\n  sortedCyclicGroups.forEach((group) => {\n    if (cache.has(group.values().next().value!)) {\n      // exclude mirrored groups\n      return\n    }\n\n    const result = iterateChecksums(group, group.size, cache, graph)\n    group.forEach((id) => {\n      const checksum = result.get(id)!\n      if (id in mirrored) {\n        mirrored[id].forEach((id) => cache.set(id, checksum))\n      } else {\n        cache.set(id, checksum)\n      }\n    })\n  })\n\n  const getChecksum = (entry: LookupEntry) => {\n    if (cache.has(entry.id)) return cache.get(entry.id)!\n    return _buildChecksum(entry, getChecksum)\n  }\n\n  return getChecksum(entry)\n}\n\nconst isSelfCircular = (group: Set<number>, graph: LookupGraph) => {\n  if (group.size !== 1) return false\n  const [id] = group\n\n  return graph.get(id)!.refs.has(id)\n}\n\nexport const getChecksumBuilder = (getLookupEntryDef: MetadataLookup) => {\n  const { metadata } = getLookupEntryDef\n  const graph = buildLookupGraph(getLookupEntryDef, metadata.lookup.length)\n\n  const cache = new Map<number, bigint>()\n\n  const buildDefinition = (id: number): bigint =>\n    buildChecksum(getLookupEntryDef(id), cache, graph)\n\n  const buildStorage = (pallet: string, entry: string): bigint | null => {\n    try {\n      const storageEntry = metadata.pallets\n        .find((x) => x.name === pallet)!\n        .storage!.items.find((s) => s.name === entry)!\n\n      if (storageEntry.type.tag === \"plain\")\n        return buildDefinition(storageEntry.type.value)\n\n      const { key, value } = storageEntry.type.value\n      const val = buildDefinition(value)\n      const returnKey = buildDefinition(key)\n      return getChecksum([val, returnKey])\n    } catch (_) {\n      return null\n    }\n  }\n\n  const buildRuntimeCall = (api: string, method: string): bigint | null => {\n    try {\n      const entry = metadata.apis\n        .find((x) => x.name === api)\n        ?.methods.find((x) => x.name === method)\n      if (!entry) throw null\n\n      const argNamesChecksum = getStringChecksum(\n        entry.inputs.map((x) => x.name),\n      )\n      const argValuesChecksum = getChecksum(\n        entry.inputs.map((x) => buildDefinition(x.type)),\n      )\n      const outputChecksum = buildDefinition(entry.output)\n\n      return getChecksum([argNamesChecksum, argValuesChecksum, outputChecksum])\n    } catch (_) {\n      return null\n    }\n  }\n\n  const buildComposite = (\n    input: TupleVar | StructVar | VoidVar | ArrayVar,\n  ): bigint => {\n    if (input.type === \"void\") return getChecksum([0n])\n\n    if (input.type === \"tuple\") {\n      const values = Object.values(input.value).map((entry) =>\n        buildDefinition(entry.id),\n      )\n\n      return getChecksum([shapeIds.tuple, ...values])\n    }\n\n    if (input.type === \"array\") {\n      return getChecksum([\n        shapeIds.vector,\n        buildDefinition(input.value.id),\n        BigInt(input.len),\n      ])\n    }\n\n    // Otherwise struct\n    return structLikeBuilder(shapeIds.struct, input.value, (entry) =>\n      buildDefinition(entry.id),\n    )\n  }\n\n  const buildNamedTuple = (input: StructVar): bigint => {\n    return structLikeBuilder(shapeIds.tuple, input.value, (entry) =>\n      buildDefinition(entry.id),\n    )\n  }\n\n  const variantShapeId = {\n    errors: 1n,\n    events: 2n,\n    calls: 3n,\n  }\n  const buildVariant =\n    (variantType: \"errors\" | \"events\" | \"calls\") =>\n    (pallet: string, name: string): bigint | null => {\n      try {\n        const palletEntry = metadata.pallets.find((x) => x.name === pallet)!\n        const enumLookup = getLookupEntryDef(\n          palletEntry[variantType]! as number,\n        )\n        buildDefinition(enumLookup.id)\n\n        if (enumLookup.type !== \"enum\") throw null\n        const entry = enumLookup.value[name]\n        const valueChecksum =\n          entry.type === \"lookupEntry\"\n            ? buildDefinition(entry.value.id)\n            : buildComposite(entry)\n        return getChecksum([variantShapeId[variantType], valueChecksum])\n      } catch (_) {\n        return null\n      }\n    }\n\n  const buildConstant = (\n    pallet: string,\n    constantName: string,\n  ): bigint | null => {\n    try {\n      const storageEntry = metadata.pallets\n        .find((x) => x.name === pallet)!\n        .constants!.find((s) => s.name === constantName)!\n\n      return buildDefinition(storageEntry.type)\n    } catch (_) {\n      return null\n    }\n  }\n\n  const toStringEnhancer =\n    <Args extends Array<any>>(\n      fn: (...args: Args) => bigint | null,\n    ): ((...args: Args) => string | null) =>\n    (...args) =>\n      fn(...args)?.toString(32) ?? null\n\n  return {\n    buildDefinition: toStringEnhancer(buildDefinition),\n    buildRuntimeCall: toStringEnhancer(buildRuntimeCall),\n    buildStorage: toStringEnhancer(buildStorage),\n    buildCall: toStringEnhancer(buildVariant(\"calls\")),\n    buildEvent: toStringEnhancer(buildVariant(\"events\")),\n    buildError: toStringEnhancer(buildVariant(\"errors\")),\n    buildConstant: toStringEnhancer(buildConstant),\n    buildComposite: toStringEnhancer(buildComposite),\n    buildNamedTuple: toStringEnhancer(buildNamedTuple),\n    getAllGeneratedChecksums: () =>\n      Array.from(cache.values()).map((v) => v.toString(32)),\n  }\n}\n"],"names":["result","id","group","getChecksum","entry"],"mappings":"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"}