"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.excludeKey = void 0;
const ts = require("typescript");
const path_1 = require("./utils/path");
const fs_1 = require("./utils/fs");
const log_1 = require("./utils/log");
/**
 * Copy non-typescript files to `outDir`.
 * @internal
 */
function copyOtherFiles(program) {
    const srcDir = program.getCommonSourceDirectory();
    const options = program.getCompilerOptions();
    const outDir = options.outDir; // already checked before
    const declarationDir = options.declarationDir;
    // https://github.com/Microsoft/TypeScript/issues/1863
    const excludes = program[exports.excludeKey] || [];
    // Exclude typescript files and outDir/declarationDir if previously emitted in the same folder
    excludes.push('**/*.ts', outDir, declarationDir || '');
    const otherFiles = matchAllFilesBut(srcDir, excludes);
    // Track copied files to list them later if needed
    const copiedFiles = [];
    for (const srcOtherFile of otherFiles) {
        const destOtherFile = (0, path_1.changeDir)(srcOtherFile, srcDir, outDir);
        try {
            (0, fs_1.cp)(srcOtherFile, destOtherFile);
        }
        catch (error) {
            if (error.code === 'EEXIST')
                console.warn(log_1.Color.yellow(error.message));
            else
                throw error;
        }
        copiedFiles.push(destOtherFile);
    }
    return copiedFiles;
}
exports.default = copyOtherFiles;
/**
 * Attach exclude pattern to the program during creation,
 * to keep a reference when copying other files.
 * @internal
 */
exports.excludeKey = Symbol('exclude');
/**
 * @internal
 */
function matchAllFilesBut(path, excludes) {
    return ts.sys.readDirectory(path, undefined, excludes, undefined);
}
