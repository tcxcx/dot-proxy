var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  state: () => state2
});
module.exports = __toCommonJS(src_exports);

// src/state/stateFactory.ts
var import_rxjs2 = require("rxjs");

// src/internal/share-latest.ts
var import_rxjs = require("rxjs");

// src/internal/empty-value.ts
var EMPTY_VALUE = {};

// src/internal/share-latest.ts
var shareLatest = (source$, defaultValue, teardown = import_rxjs.noop) => {
  let subject;
  let subscription;
  let refCount = 0;
  let currentValue = EMPTY_VALUE;
  let promise;
  const emitIfEmpty = defaultValue === EMPTY_VALUE ? import_rxjs.noop : () => {
    currentValue === EMPTY_VALUE && subject && subject.next(currentValue = defaultValue);
  };
  const result = new import_rxjs.Observable((subscriber) => {
    subscriber.complete = import_rxjs.noop;
    refCount++;
    let innerSub;
    subscriber.add(() => {
      refCount--;
      innerSub.unsubscribe();
      if (refCount === 0) {
        currentValue = EMPTY_VALUE;
        if (subscription) {
          subscription.unsubscribe();
        }
        teardown();
        subject = null;
        subscription = null;
        promise = null;
      }
    });
    if (!subject) {
      subject = new import_rxjs.Subject();
      innerSub = subject.subscribe(subscriber);
      subscription = null;
      subscription = new import_rxjs.Subscriber({
        next(value) {
          subject.next(currentValue = value);
        },
        error(err) {
          const _subject = subject;
          subscription = null;
          subject = null;
          _subject.error(err);
        },
        complete() {
          subscription = null;
          emitIfEmpty();
          subject.complete();
        }
      });
      source$.subscribe(subscription);
      emitIfEmpty();
    } else {
      innerSub = subject.subscribe(subscriber);
      if (currentValue !== EMPTY_VALUE) {
        subscriber.next(currentValue);
      }
    }
  });
  result.getRefCount = () => refCount;
  const noSubscribersErr = new Error("No subscribers");
  result.getComplete$ = () => new import_rxjs.Observable((observer) => {
    if (refCount === 0) {
      observer.error(noSubscribersErr);
      return;
    }
    if (!subscription) {
      observer.next(true);
      observer.complete();
      return;
    }
    observer.next(false);
    return subject.subscribe({
      complete() {
        observer.next(true);
        observer.complete();
      }
    });
  });
  result.getValue = () => {
    if (refCount === 0) {
      throw noSubscribersErr;
    }
    if (currentValue !== EMPTY_VALUE)
      return currentValue;
    if (promise)
      return promise;
    return promise = new Promise((res, rej) => {
      const error = (e) => {
        rej(e);
        promise = null;
      };
      const pSubs = subject.subscribe({
        next(v) {
          pSubs.unsubscribe();
          res(v);
          promise = null;
        },
        error,
        complete() {
          error(new Error("Empty observable"));
        }
      });
      subscription.add(pSubs);
      subscription.add(() => {
        error(noSubscribersErr);
      });
    });
  };
  if (defaultValue !== EMPTY_VALUE) {
    ;
    result.getDefaultValue = () => defaultValue;
  }
  return result;
};
var share_latest_default = shareLatest;

// src/state/stateFactory.ts
function cloneProps(internal, external) {
  external.getValue = internal.getValue;
  external.getRefCount = internal.getRefCount;
  external.getComplete$ = internal.getComplete$;
  if (internal.getDefaultValue) {
    ;
    external.getDefaultValue = internal.getDefaultValue;
  }
}
function connectFactoryObservable(getObservable, defaultValue) {
  const cache = new NestedMap();
  const getDefaultValue = typeof defaultValue === "function" ? defaultValue : () => defaultValue;
  const getSharedObservables$ = (input) => {
    for (let i = input.length - 1; input[i] === void 0 && i > -1; i--) {
      input.splice(-1);
    }
    const keys = [input.length, ...input];
    const cachedVal = cache.get(keys);
    if (cachedVal !== void 0) {
      return cachedVal;
    }
    const sharedObservable$ = share_latest_default(new import_rxjs2.Observable((observer) => getObservable(...input).subscribe(observer)), getDefaultValue(...input), () => {
      cache.delete(keys);
    });
    const publicShared$ = new import_rxjs2.Observable((subscriber) => {
      const inCache = cache.get(keys);
      let source$ = sharedObservable$;
      if (!inCache) {
        cache.set(keys, result);
      } else if (inCache !== publicShared$) {
        source$ = inCache;
        cloneProps(source$, publicShared$);
      }
      return source$.subscribe(subscriber);
    });
    cloneProps(sharedObservable$, publicShared$);
    const result = publicShared$;
    cache.set(keys, result);
    return result;
  };
  return (...input) => getSharedObservables$(input);
}
var NestedMap = class {
  constructor() {
    __publicField(this, "root");
    this.root = /* @__PURE__ */ new Map();
  }
  get(keys) {
    let current = this.root;
    for (let i = 0; i < keys.length; i++) {
      current = current.get(keys[i]);
      if (!current)
        return void 0;
    }
    return current;
  }
  set(keys, value) {
    let current = this.root;
    let i;
    for (i = 0; i < keys.length - 1; i++) {
      let nextCurrent = current.get(keys[i]);
      if (!nextCurrent) {
        nextCurrent = /* @__PURE__ */ new Map();
        current.set(keys[i], nextCurrent);
      }
      current = nextCurrent;
    }
    current.set(keys[i], value);
  }
  delete(keys) {
    const maps = [this.root];
    let current = this.root;
    for (let i = 0; i < keys.length - 1; i++) {
      maps.push(current = current.get(keys[i]));
    }
    let mapIdx = maps.length - 1;
    maps[mapIdx].delete(keys[mapIdx]);
    while (--mapIdx > -1 && maps[mapIdx].get(keys[mapIdx]).size === 0) {
      maps[mapIdx].delete(keys[mapIdx]);
    }
  }
};

// src/state/stateSingle.ts
function state(observable, defaultValue) {
  return share_latest_default(observable, defaultValue);
}

// src/state/index.ts
function state2(observable, defaultValue) {
  return (typeof observable === "function" ? connectFactoryObservable : state)(observable, arguments.length > 1 ? defaultValue : EMPTY_VALUE);
}
//# sourceMappingURL=rxjs-state.cjs.development.js.map
