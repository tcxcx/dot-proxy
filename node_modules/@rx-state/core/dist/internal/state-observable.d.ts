import { noop, Observable, OperatorFunction } from "rxjs";
import { StatePromise } from "../StateObservable";
export default class StateObservable<T> extends Observable<T> {
    private defaultValue;
    private subject;
    private subscription;
    private refCount;
    private currentValue;
    private promise;
    constructor(source$: Observable<T>, defaultValue: T, teardown?: typeof noop);
    pipe(...ops: OperatorFunction<any, any>[]): StateObservable<any>;
    getRefCount: () => number;
    getValue: (filter?: (value: T) => boolean) => T | StatePromise<T>;
    getDefaultValue?: (() => T) | undefined;
}
