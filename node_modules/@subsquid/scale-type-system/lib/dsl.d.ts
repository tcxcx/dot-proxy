import { BitSequence, Bytes } from '@subsquid/scale-codec';
import { Type } from './type-checker';
import { GetType, Simplify, ValueCase } from './type-util';
import { EnumDefinition, EnumStruct, GetEnumType } from './types/enum';
import { ExternalEnum } from './types/externalEnum';
import { GetStructType } from './types/struct';
export { GetType, ExternalEnum, ValueCase };
export declare function number(): Type<number>;
export declare function bigint(): Type<bigint>;
export declare function numeric(): Type<number | bigint>;
export declare function string(): Type<string>;
export declare function bytes(): Type<Bytes>;
export declare function bitseq(): Type<BitSequence>;
export declare function boolean(): Type<boolean>;
export declare function any(): Type<any>;
export declare function unknown(): Type<unknown>;
export declare function unit(): Type<null>;
export declare function array<T extends Type>(def: Get<T>): Type<GetType<T>[]>;
export declare function tuple(): Type<null>;
export declare function tuple<T extends Type>(def: Get<[t: T]>): Type<[GetType<T>]>;
export declare function tuple<T1 extends Type, T2 extends Type>(def: Get<[t1: T1, t2: T2]>): Type<[GetType<T1>, GetType<T2>]>;
export declare function tuple<T1 extends Type, T2 extends Type, T3 extends Type>(def: Get<[t1: T1, t2: T2, t3: T3]>): Type<[GetType<T1>, GetType<T2>, GetType<T3>]>;
export declare function tuple<T1 extends Type, T2 extends Type, T3 extends Type, T4 extends Type>(def: Get<[t1: T1, t2: T2, t3: T3, t4: T4]>): Type<[GetType<T1>, GetType<T2>, GetType<T3>, GetType<T4>]>;
export declare function tuple<T1 extends Type, T2 extends Type, T3 extends Type, T4 extends Type, T5 extends Type>(def: Get<[t1: T1, t2: T2, t3: T3, t4: T4, t5: T5]>): Type<[GetType<T1>, GetType<T2>, GetType<T3>, GetType<T4>, GetType<T5>]>;
export declare function tuple<T1 extends Type, T2 extends Type, T3 extends Type, T4 extends Type, T5 extends Type, T6 extends Type>(def: Get<[t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6]>): Type<[GetType<T1>, GetType<T2>, GetType<T3>, GetType<T4>, GetType<T5>, GetType<T6>]>;
export declare function tuple<T1 extends Type, T2 extends Type, T3 extends Type, T4 extends Type, T5 extends Type, T6 extends Type, T7 extends Type>(def: Get<[t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7]>): Type<[GetType<T1>, GetType<T2>, GetType<T3>, GetType<T4>, GetType<T5>, GetType<T6>, GetType<T7>]>;
export declare function tuple<T1 extends Type, T2 extends Type, T3 extends Type, T4 extends Type, T5 extends Type, T6 extends Type, T7 extends Type, T8 extends Type>(def: Get<[t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8]>): Type<[GetType<T1>, GetType<T2>, GetType<T3>, GetType<T4>, GetType<T5>, GetType<T6>, GetType<T7>, GetType<T8>]>;
export declare function tuple<T1 extends Type, T2 extends Type, T3 extends Type, T4 extends Type, T5 extends Type, T6 extends Type, T7 extends Type, T8 extends Type, T9 extends Type>(def: Get<[t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9]>): Type<[GetType<T1>, GetType<T2>, GetType<T3>, GetType<T4>, GetType<T5>, GetType<T6>, GetType<T7>, GetType<T8>, GetType<T9>]>;
export declare function struct<T extends Record<string, Type>>(def: Get<T>): Type<GetStructType<T>>;
export declare function option<T extends Type>(type: Get<T>): Type<GetType<T> | undefined>;
export declare function openEnum<Variants extends EnumDefinition>(variants: Get<Variants>): Type<GetEnumType<Variants> | {
    __kind: '*';
}>;
export declare function closedEnum<Variants extends EnumDefinition>(variants: Get<Variants>): Type<GetEnumType<Variants>>;
export declare function enumStruct<T extends Record<string, Type>>(def: T): EnumStruct<GetStructType<T>>;
export declare function externalEnum(): Type<ExternalEnum>;
export declare function externalEnum<Variants extends EnumDefinition>(variants: Get<Variants>): Type<GetEnumType<Variants> | {
    __kind: '*';
    value: {
        __kind: string;
    };
}>;
export type Option<T> = Simplify<ValueCase<'Some', T> | {
    __kind: 'None';
}>;
export declare function enumOption<T extends Type<any>>(some: Get<T>): Type<Option<GetType<T>>>;
export type Result<T, E> = Simplify<ValueCase<'Ok', T> | ValueCase<'Err', E>>;
export declare function result<T extends Type<any>, E extends Type<any>>(ok: Get<T>, err: Get<E>): Type<Result<GetType<T>, GetType<E>>>;
export declare function union<T1 extends Type, T2 extends Type>(t1: T1, t2: T2): Type<GetType<T1> | GetType<T2>>;
export declare function union<T1 extends Type, T2 extends Type, T3 extends Type>(t1: T1, t2: T2, t3: T3): Type<GetType<T1> | GetType<T2> | GetType<T3>>;
export declare function union<T1 extends Type, T2 extends Type, T3 extends Type, T4 extends Type>(t1: T1, t2: T2, t3: T3, t4: T4): Type<GetType<T1> | GetType<T2> | GetType<T3> | GetType<T4>>;
type Get<T> = T | (() => T);
//# sourceMappingURL=dsl.d.ts.map