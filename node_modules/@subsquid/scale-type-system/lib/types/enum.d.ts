import { Variant } from '@subsquid/scale-codec';
import { BaseType, ScaleType, Type, TypeChecker } from '../type-checker';
import { GetType, Simplify, ValueCase } from '../type-util';
export type EnumDefinition = Record<string, Type | EnumStruct>;
export declare class EnumStruct<T = unknown> {
    private struct;
    constructor(struct: Type<T>);
    getStruct(): Type<T>;
}
export type GetEnumType<Variants> = Simplify<{
    [K in keyof Variants]: Variants[K] extends EnumStruct<infer S> ? Simplify<{
        __kind: K;
    } & S> : ValueCase<K, GetType<Variants[K]>>;
}[keyof Variants]>;
export declare class EnumType<Variants extends EnumDefinition, Open extends boolean | 'external'> extends BaseType<GetEnumType<Variants> | (Open extends [true] ? {
    __kind: '*';
} : Open extends 'external' ? {
    __kind: '*';
    value: {
        __kind: string;
    };
} : never)> {
    private variants;
    private open;
    constructor(variants: () => Variants, open: Open);
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
    getVariants(): Variants;
}
export declare function matchTopExternalVariant(typeChecker: TypeChecker, v: Variant): boolean;
//# sourceMappingURL=enum.d.ts.map