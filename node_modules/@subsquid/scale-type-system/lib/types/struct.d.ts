import { BaseType, ScaleType, Type, TypeChecker } from '../type-checker';
import { GetType, Simplify } from '../type-util';
type UseOptionForUndefinedProps<T> = {
    [K in keyof T as [unknown] extends [T[K]] ? K : [undefined] extends [T[K]] ? never : K]: T[K];
} & {
    [K in keyof T as [unknown] extends [T[K]] ? never : [undefined] extends [T[K]] ? K : never]+?: T[K];
};
export type GetStructType<F> = Simplify<UseOptionForUndefinedProps<{
    [K in keyof F]: GetType<F[K]>;
}>>;
export declare class StructType<F extends Record<string, Type>> extends BaseType<GetStructType<F>> {
    private fields;
    constructor(fields: () => F);
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
    private getFields;
}
export {};
//# sourceMappingURL=struct.d.ts.map