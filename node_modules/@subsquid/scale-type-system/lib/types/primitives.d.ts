import { BitSequence, Bytes } from '@subsquid/scale-codec';
import { BaseType, ScaleType, TypeChecker } from '../type-checker';
export declare class NumberType extends BaseType<number> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class BigIntType extends BaseType<bigint> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class NumericType extends BaseType<number | bigint> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class BooleanType extends BaseType<boolean> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class StringType extends BaseType<string> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class BytesType extends BaseType<Bytes> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class BitSequenceType extends BaseType<BitSequence> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class UnitType extends BaseType<null> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class AnyType extends BaseType<any> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
export declare class UnknownType extends BaseType<unknown> {
    match(typeChecker: TypeChecker, ty: ScaleType): boolean;
}
//# sourceMappingURL=primitives.d.ts.map