"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructType = void 0;
const scale_codec_1 = require("@subsquid/scale-codec");
const util_internal_1 = require("@subsquid/util-internal");
const type_checker_1 = require("../type-checker");
class StructType extends type_checker_1.BaseType {
    constructor(fields) {
        super();
        this.fields = fields;
    }
    match(typeChecker, ty) {
        if (ty.kind != scale_codec_1.TypeKind.Composite)
            return false;
        if (ty.fields.length == 0 || ty.fields[0].name == null)
            return false;
        let fields = new Map(ty.fields.map(f => [f.name, f.type]));
        for (let [name, value] of this.getFields()) {
            let ti = fields.get(name);
            if (ti == null || !typeChecker.match(ti, value))
                return false;
        }
        return true;
    }
    getFields() {
        return Object.entries(this.fields());
    }
}
exports.StructType = StructType;
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], StructType.prototype, "getFields", null);
//# sourceMappingURL=struct.js.map