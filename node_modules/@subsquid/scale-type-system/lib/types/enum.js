"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchTopExternalVariant = exports.EnumType = exports.EnumStruct = void 0;
const scale_codec_1 = require("@subsquid/scale-codec");
const util_internal_1 = require("@subsquid/util-internal");
const type_checker_1 = require("../type-checker");
class EnumStruct {
    constructor(struct) {
        this.struct = struct;
    }
    getStruct() {
        return this.struct;
    }
}
exports.EnumStruct = EnumStruct;
class EnumType extends type_checker_1.BaseType {
    constructor(variants, open) {
        super();
        this.variants = variants;
        this.open = open;
    }
    match(typeChecker, ty) {
        if (ty.kind != scale_codec_1.TypeKind.Variant)
            return false;
        let variants = this.getVariants();
        if (!this.open && ty.variants.length != Object.keys(variants).length)
            return false;
        for (let variant of ty.variants) {
            let type = variants[variant.name];
            if (type == null) {
                if (!this.open)
                    return false;
                if (this.open == 'external' && !matchTopExternalVariant(typeChecker, variant))
                    return false;
            }
            else if (!matchVariant(typeChecker, variant, type)) {
                return false;
            }
        }
        return true;
    }
    getVariants() {
        return this.variants();
    }
}
exports.EnumType = EnumType;
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], EnumType.prototype, "getVariants", null);
function matchVariant(typeChecker, variant, type) {
    if (variant.fields.length == 0) {
        if (type instanceof EnumStruct)
            return false;
        return type.match(typeChecker, {
            kind: scale_codec_1.TypeKind.Tuple,
            tuple: []
        });
    }
    else if (variant.fields[0].name == null) {
        if (type instanceof EnumStruct)
            return false;
        if (variant.fields.length == 1) {
            return typeChecker.match(variant.fields[0].type, type);
        }
        else {
            return type.match(typeChecker, {
                kind: scale_codec_1.TypeKind.Tuple,
                tuple: variant.fields.map(f => f.type)
            });
        }
    }
    else {
        return type instanceof EnumStruct && type.getStruct().match(typeChecker, {
            kind: scale_codec_1.TypeKind.Composite,
            fields: variant.fields
        });
    }
}
function matchTopExternalVariant(typeChecker, v) {
    return v.fields.length == 1
        && v.fields[0].name == null
        && typeChecker.getScaleType(v.fields[0].type).kind == scale_codec_1.TypeKind.Variant;
}
exports.matchTopExternalVariant = matchTopExternalVariant;
//# sourceMappingURL=enum.js.map