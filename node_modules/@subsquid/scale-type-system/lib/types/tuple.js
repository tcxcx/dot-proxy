"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TupleType = void 0;
const scale_codec_1 = require("@subsquid/scale-codec");
const util_internal_1 = require("@subsquid/util-internal");
const assert_1 = __importDefault(require("assert"));
const type_checker_1 = require("../type-checker");
class TupleType extends type_checker_1.BaseType {
    constructor(_tuple) {
        super();
        this._tuple = _tuple;
    }
    match(typeChecker, ty) {
        let tuple;
        switch (ty.kind) {
            case scale_codec_1.TypeKind.Tuple:
                tuple = ty.tuple;
                break;
            case scale_codec_1.TypeKind.Composite:
                if (ty.fields[0]?.name != null)
                    return false;
                tuple = ty.fields.map(f => {
                    (0, assert_1.default)(f.name == null);
                    return f.type;
                });
                break;
            default:
                return false;
        }
        let def = this.getDef();
        if (tuple.length != def.length)
            return false;
        for (let i = 0; i < def.length; i++) {
            if (!typeChecker.match(tuple[i], def[i]))
                return false;
        }
        return true;
    }
    getDef() {
        return this._tuple();
    }
}
exports.TupleType = TupleType;
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], TupleType.prototype, "getDef", null);
//# sourceMappingURL=tuple.js.map