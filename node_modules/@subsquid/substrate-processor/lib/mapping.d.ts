import { Bytes, ExtrinsicSignature, Hash, QualifiedName } from '@subsquid/substrate-data';
import { Runtime } from '@subsquid/substrate-runtime';
import { ParentBlockHeader } from './interfaces/data';
import { PartialBlockHeader } from './interfaces/data-partial';
export declare class BlockHeader implements PartialBlockHeader {
    #private;
    id: string;
    height: number;
    hash: Hash;
    parentHash: Hash;
    stateRoot?: Hash;
    extrinsicsRoot?: Hash;
    digest?: {
        logs: Bytes[];
    };
    specName: string;
    specVersion: number;
    implName: string;
    implVersion: number;
    timestamp?: number;
    validator?: Bytes;
    constructor(runtime: Runtime, runtimeOfPrevBlock: Runtime, src: PartialBlockHeader);
    get _runtime(): Runtime;
    get _runtimeOfPrevBlock(): Runtime;
    getParent(): ParentBlockHeader;
}
export declare class Extrinsic {
    #private;
    id: string;
    index: number;
    version?: number;
    signature?: ExtrinsicSignature;
    fee?: bigint;
    tip?: bigint;
    error?: any;
    success?: boolean;
    hash?: string;
    constructor(block: BlockHeader, index: number);
    get block(): BlockHeader;
    set block(value: BlockHeader);
    get call(): Call | undefined;
    set call(value: Call | undefined);
    getCall(): Call;
    get subcalls(): Call[];
    set subcalls(calls: Call[]);
    get events(): Event[];
    set events(events: Event[]);
    encode(): Uint8Array;
}
export declare class Call {
    #private;
    id: string;
    extrinsicIndex: number;
    address: number[];
    name?: QualifiedName;
    args?: any;
    origin?: any;
    error?: any;
    success?: boolean;
    constructor(block: BlockHeader, extrinsicIndex: number, address: number[]);
    get block(): BlockHeader;
    set block(value: BlockHeader);
    get extrinsic(): Extrinsic | undefined;
    set extrinsic(value: Extrinsic | undefined);
    getExtrinsic(): Extrinsic;
    get parentCall(): Call | undefined;
    set parentCall(value: Call | undefined);
    getParentCall(): Call;
    get subcalls(): Call[];
    set subcalls(calls: Call[]);
    get events(): Event[];
    set events(events: Event[]);
    encode(): Uint8Array;
    get _ethereumTransactTo(): Bytes | undefined;
    set _ethereumTransactTo(value: Bytes | undefined);
    get _ethereumTransactSighash(): Bytes | undefined;
    set _ethereumTransactSighash(value: Bytes | undefined);
}
export declare class Event {
    #private;
    id: string;
    index: number;
    name?: QualifiedName;
    args?: any;
    phase?: 'Initialization' | 'ApplyExtrinsic' | 'Finalization';
    extrinsicIndex?: number;
    callAddress?: number[];
    topics?: Bytes[];
    constructor(block: BlockHeader, index: number);
    get block(): BlockHeader;
    set block(value: BlockHeader);
    get extrinsic(): Extrinsic | undefined;
    set extrinsic(value: Extrinsic | undefined);
    getExtrinsic(): Extrinsic;
    get call(): Call | undefined;
    set call(value: Call | undefined);
    getCall(): Call;
    get _evmLogAddress(): Bytes | undefined;
    set _evmLogAddress(value: Bytes | undefined);
    get _evmLogTopics(): Bytes[] | undefined;
    set _evmLogTopics(value: Bytes[] | undefined);
    get _evmLogTopic0(): Bytes | undefined;
    get _evmLogTopic1(): Bytes | undefined;
    get _evmLogTopic2(): Bytes | undefined;
    get _evmLogTopic3(): Bytes | undefined;
    get _contractAddress(): Bytes | undefined;
    set _contractAddress(value: Bytes | undefined);
    get _gearProgramId(): Bytes | undefined;
    set _gearProgramId(value: Bytes | undefined);
    get _reviveContract(): Bytes | undefined;
    set _reviveContract(value: Bytes | undefined);
    get _reviveTopics(): Bytes[] | undefined;
    set _reviveTopics(value: Bytes[] | undefined);
    get _reviveTopic0(): Bytes | undefined;
    get _reviveTopic1(): Bytes | undefined;
    get _reviveTopic2(): Bytes | undefined;
    get _reviveTopic3(): Bytes | undefined;
}
export declare class Block {
    header: BlockHeader;
    constructor(header: BlockHeader);
    extrinsics: Extrinsic[];
    calls: Call[];
    events: Event[];
}
export declare function setUpItems(block: Block): void;
//# sourceMappingURL=mapping.d.ts.map