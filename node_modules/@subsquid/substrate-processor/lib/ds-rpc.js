"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcDataSource = void 0;
const base = __importStar(require("@subsquid/substrate-data"));
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_json_1 = require("@subsquid/util-internal-json");
const util_internal_range_1 = require("@subsquid/util-internal-range");
const ds_rpc_filter_1 = require("./ds-rpc-filter");
const mapping_1 = require("./mapping");
class RpcDataSource {
    constructor(options) {
        this.baseDataSource = new base.RpcDataSource(options);
    }
    getBlockHash(height) {
        return this.baseDataSource.getBlockHash(height);
    }
    getFinalizedHeight() {
        return this.baseDataSource.getFinalizedHeight();
    }
    async *getFinalizedBlocks(requests, stopOnHead) {
        for await (let batch of this.baseDataSource.getFinalizedBlocks((0, util_internal_range_1.mapRangeRequestList)(requests, toBaseDataRequest), stopOnHead)) {
            let blocks = batch.blocks.map(b => this.mapBlock(b));
            (0, ds_rpc_filter_1.filterBlockBatch)(requests, blocks);
            yield {
                ...batch,
                blocks
            };
        }
    }
    async processHotBlocks(requests, state, cb) {
        return this.baseDataSource.processHotBlocks((0, util_internal_range_1.mapRangeRequestList)(requests, toBaseDataRequest), state, upd => {
            let blocks = upd.blocks.map(b => this.mapBlock(b));
            (0, ds_rpc_filter_1.filterBlockBatch)(requests, blocks);
            return cb({ ...upd, blocks });
        });
    }
    mapBlock(src) {
        let block = new mapping_1.Block(new mapping_1.BlockHeader(src.runtime, src.runtimeOfPrevBlock, src.header));
        if (src.extrinsics) {
            for (let s of src.extrinsics) {
                let extrinsic = new mapping_1.Extrinsic(block.header, s.index);
                if (s.version != null) {
                    extrinsic.version = s.version;
                }
                if (s.signature != null) {
                    extrinsic.signature = (0, util_internal_json_1.toJSON)(s.signature);
                }
                if (s.fee != null) {
                    extrinsic.fee = s.fee;
                }
                if (s.tip != null) {
                    extrinsic.tip = s.tip;
                }
                if (s.error != null) {
                    extrinsic.error = (0, util_internal_json_1.toJSON)(s.error);
                }
                if (s.success != null) {
                    extrinsic.success = s.success;
                }
                if (s.hash != null) {
                    extrinsic.hash = s.hash;
                }
                block.extrinsics.push(extrinsic);
            }
        }
        if (src.calls) {
            for (let s of src.calls) {
                let call = new mapping_1.Call(block.header, s.extrinsicIndex, s.address);
                if (s.name) {
                    call.name = s.name;
                }
                if (s.args != null) {
                    call.args = (0, util_internal_json_1.toJSON)(s.args);
                }
                if (s.origin != null) {
                    call.origin = (0, util_internal_json_1.toJSON)(s.origin);
                }
                if (s.error != null) {
                    call.error = (0, util_internal_json_1.toJSON)(s.error);
                }
                if (s.success != null) {
                    call.success = s.success;
                }
                call._ethereumTransactTo = s._ethereumTransactTo;
                call._ethereumTransactSighash = s._ethereumTransactSighash;
                block.calls.push(call);
            }
        }
        if (src.events) {
            for (let s of src.events) {
                let event = new mapping_1.Event(block.header, s.index);
                if (s.name != null) {
                    event.name = s.name;
                }
                if (s.args != null) {
                    event.args = (0, util_internal_json_1.toJSON)(s.args);
                }
                if (s.phase != null) {
                    event.phase = s.phase;
                }
                if (s.extrinsicIndex != null) {
                    event.extrinsicIndex = s.extrinsicIndex;
                }
                if (s.callAddress != null) {
                    event.callAddress = s.callAddress;
                }
                if (s.topics != null) {
                    event.topics = s.topics;
                }
                event._evmLogAddress = s._evmLogAddress;
                event._evmLogTopics = s._evmLogTopics;
                event._contractAddress = s._contractAddress;
                event._gearProgramId = s._gearProgramId;
                event._reviveContract = s._reviveContract;
                event._reviveTopics = s._reviveTopics;
                block.events.push(event);
            }
        }
        (0, mapping_1.setUpItems)(block);
        return block;
    }
}
exports.RpcDataSource = RpcDataSource;
__decorate([
    (0, util_internal_1.annotateSyncError)((src) => ({ blockHeight: src.header.height, blockHash: src.header.hash })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [base.Block]),
    __metadata("design:returntype", mapping_1.Block)
], RpcDataSource.prototype, "mapBlock", null);
function toBaseDataRequest(req) {
    let events = !!req.events?.length
        || !!req.evmLogs?.length
        || !!req.contractsEvents?.length
        || !!req.gearMessagesQueued?.length
        || !!req.gearUserMessagesSent?.length
        || !!req.reviveContractEmitted?.length
        || req.calls?.some(c => c.events)
        || req.ethereumTransactions?.some(c => c.events)
        || false;
    let calls = !!req.calls?.length
        || !!req.ethereumTransactions?.length
        || req.events?.some(e => e.extrinsic || e.call || e.stack)
        || req.evmLogs?.some(e => e.extrinsic || e.call || e.stack)
        || req.contractsEvents?.some(e => e.extrinsic || e.call || e.stack)
        || req.gearMessagesQueued?.some(e => e.extrinsic || e.call || e.stack)
        || req.gearUserMessagesSent?.some(e => e.extrinsic || e.call || e.stack)
        || false;
    let baseReq = {
        blockTimestamp: !!req.fields?.block?.timestamp,
        blockValidator: !!req.fields?.block?.validator,
        events
    };
    if (calls) {
        baseReq.extrinsics = {
            hash: !!req.fields?.extrinsic?.hash,
            fee: !!req.fields?.extrinsic?.fee
        };
    }
    return baseReq;
}
//# sourceMappingURL=ds-rpc.js.map