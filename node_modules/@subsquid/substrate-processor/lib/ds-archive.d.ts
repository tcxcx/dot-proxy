import { RpcClient } from '@subsquid/rpc-client';
import { OldSpecsBundle, OldTypesBundle } from '@subsquid/substrate-runtime/lib/metadata';
import { ArchiveClient } from '@subsquid/util-internal-archive-client';
import { Batch, DataSource } from '@subsquid/util-internal-processor-tools';
import { RangeRequestList } from '@subsquid/util-internal-range';
import { DataRequest } from './interfaces/data-request';
import { Block } from './mapping';
export interface SubstrateArchiveOptions {
    client: ArchiveClient;
    rpc: RpcClient;
    typesBundle?: OldTypesBundle | OldSpecsBundle;
}
export declare class SubstrateArchive implements DataSource<Block, DataRequest> {
    private client;
    private rpc;
    private typesBundle?;
    constructor(options: SubstrateArchiveOptions);
    getFinalizedHeight(): Promise<number>;
    getBlockHash(height: number): Promise<string | null>;
    getFinalizedBlocks(requests: RangeRequestList<DataRequest>, stopOnHead?: boolean): AsyncIterable<Batch<Block>>;
    private mapBlock;
}
//# sourceMappingURL=ds-archive.d.ts.map