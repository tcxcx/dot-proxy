"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BlockHeader_runtime, _BlockHeader_runtimeOfPrevBlock, _Extrinsic_block, _Extrinsic_call, _Extrinsic_events, _Extrinsic_subcalls, _Call_block, _Call_extrinsic, _Call_parentCall, _Call_subcalls, _Call_events, _Call_ethereumTransactTo, _Call_ethereumTransactSighash, _Event_block, _Event_extrinsic, _Event_call, _Event_evmLogAddress, _Event_evmLogTopics, _Event_contractAddress, _Event_gearProgramId, _Event_reviveContract, _Event_reviveTopics;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Block = exports.Event = exports.Call = exports.Extrinsic = exports.BlockHeader = void 0;
exports.setUpItems = setUpItems;
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_processor_tools_1 = require("@subsquid/util-internal-processor-tools");
class BlockHeader {
    constructor(runtime, runtimeOfPrevBlock, src) {
        _BlockHeader_runtime.set(this, void 0);
        _BlockHeader_runtimeOfPrevBlock.set(this, void 0);
        this.id = (0, util_internal_processor_tools_1.formatId)(src);
        __classPrivateFieldSet(this, _BlockHeader_runtime, runtime, "f");
        __classPrivateFieldSet(this, _BlockHeader_runtimeOfPrevBlock, runtimeOfPrevBlock, "f");
        Object.assign(this, src);
    }
    get _runtime() {
        return __classPrivateFieldGet(this, _BlockHeader_runtime, "f");
    }
    get _runtimeOfPrevBlock() {
        return __classPrivateFieldGet(this, _BlockHeader_runtimeOfPrevBlock, "f");
    }
    getParent() {
        if (this.height == 0)
            return this;
        return {
            _runtime: this._runtimeOfPrevBlock,
            height: this.height - 1,
            hash: this.parentHash
        };
    }
}
exports.BlockHeader = BlockHeader;
_BlockHeader_runtime = new WeakMap(), _BlockHeader_runtimeOfPrevBlock = new WeakMap();
class Extrinsic {
    constructor(block, index) {
        _Extrinsic_block.set(this, void 0);
        _Extrinsic_call.set(this, void 0);
        _Extrinsic_events.set(this, void 0);
        _Extrinsic_subcalls.set(this, void 0);
        this.id = (0, util_internal_processor_tools_1.formatId)(block, index);
        this.index = index;
        __classPrivateFieldSet(this, _Extrinsic_block, block, "f");
    }
    get block() {
        return __classPrivateFieldGet(this, _Extrinsic_block, "f");
    }
    set block(value) {
        __classPrivateFieldSet(this, _Extrinsic_block, value, "f");
    }
    get call() {
        return __classPrivateFieldGet(this, _Extrinsic_call, "f");
    }
    set call(value) {
        __classPrivateFieldSet(this, _Extrinsic_call, value, "f");
    }
    getCall() {
        if (this.call == null) {
            throw new Error(`Call is not set on extrinsic ${this.id}`);
        }
        else {
            return this.call;
        }
    }
    get subcalls() {
        __classPrivateFieldSet(this, _Extrinsic_subcalls, __classPrivateFieldGet(this, _Extrinsic_subcalls, "f") || [], "f");
        return __classPrivateFieldGet(this, _Extrinsic_subcalls, "f");
    }
    set subcalls(calls) {
        __classPrivateFieldSet(this, _Extrinsic_subcalls, calls, "f");
    }
    get events() {
        __classPrivateFieldSet(this, _Extrinsic_events, __classPrivateFieldGet(this, _Extrinsic_events, "f") || [], "f");
        return __classPrivateFieldGet(this, _Extrinsic_events, "f");
    }
    set events(events) {
        __classPrivateFieldSet(this, _Extrinsic_events, events, "f");
    }
    encode() {
        let runtime = this.block._runtime;
        let version = (0, util_internal_1.assertNotNull)(this.version, 'missing .version property');
        let callRecord = this.getCall();
        let name = (0, util_internal_1.assertNotNull)(callRecord.name, 'missing .name property on a call');
        let args = runtime.decodeJsonCallRecordArguments({ name, args: callRecord.args });
        let call = runtime.toDecodedCall({ name, args });
        let signature = this.signature && runtime.jsonCodec.decode(runtime.description.signature, this.signature);
        return runtime.encodeExtrinsic({
            version,
            signature,
            call
        });
    }
}
exports.Extrinsic = Extrinsic;
_Extrinsic_block = new WeakMap(), _Extrinsic_call = new WeakMap(), _Extrinsic_events = new WeakMap(), _Extrinsic_subcalls = new WeakMap();
class Call {
    constructor(block, extrinsicIndex, address) {
        _Call_block.set(this, void 0);
        _Call_extrinsic.set(this, void 0);
        _Call_parentCall.set(this, void 0);
        _Call_subcalls.set(this, void 0);
        _Call_events.set(this, void 0);
        _Call_ethereumTransactTo.set(this, void 0);
        _Call_ethereumTransactSighash.set(this, void 0);
        this.id = (0, util_internal_processor_tools_1.formatId)(block, extrinsicIndex, ...address);
        this.extrinsicIndex = extrinsicIndex;
        this.address = address;
        __classPrivateFieldSet(this, _Call_block, block, "f");
    }
    get block() {
        return __classPrivateFieldGet(this, _Call_block, "f");
    }
    set block(value) {
        __classPrivateFieldSet(this, _Call_block, value, "f");
    }
    get extrinsic() {
        return __classPrivateFieldGet(this, _Call_extrinsic, "f");
    }
    set extrinsic(value) {
        __classPrivateFieldSet(this, _Call_extrinsic, value, "f");
    }
    getExtrinsic() {
        if (this.extrinsic == null) {
            throw new Error(`Extrinsic is not set on call ${this.id}`);
        }
        else {
            return this.extrinsic;
        }
    }
    get parentCall() {
        return __classPrivateFieldGet(this, _Call_parentCall, "f");
    }
    set parentCall(value) {
        __classPrivateFieldSet(this, _Call_parentCall, value, "f");
    }
    getParentCall() {
        if (this.parentCall == null) {
            throw new Error(`Parent call is not set on call ${this.id}`);
        }
        else {
            return this.parentCall;
        }
    }
    get subcalls() {
        __classPrivateFieldSet(this, _Call_subcalls, __classPrivateFieldGet(this, _Call_subcalls, "f") || [], "f");
        return __classPrivateFieldGet(this, _Call_subcalls, "f");
    }
    set subcalls(calls) {
        __classPrivateFieldSet(this, _Call_subcalls, calls, "f");
    }
    get events() {
        __classPrivateFieldSet(this, _Call_events, __classPrivateFieldGet(this, _Call_events, "f") || [], "f");
        return __classPrivateFieldGet(this, _Call_events, "f");
    }
    set events(events) {
        __classPrivateFieldSet(this, _Call_events, events, "f");
    }
    encode() {
        let runtime = this.block._runtime;
        let name = (0, util_internal_1.assertNotNull)(this.name, 'missing .name property');
        let args = runtime.decodeJsonCallRecordArguments({ name, args: this.args });
        let decodedCall = runtime.toDecodedCall({ name, args });
        return runtime.encodeCall(decodedCall);
    }
    get _ethereumTransactTo() {
        return __classPrivateFieldGet(this, _Call_ethereumTransactTo, "f");
    }
    set _ethereumTransactTo(value) {
        __classPrivateFieldSet(this, _Call_ethereumTransactTo, value, "f");
    }
    get _ethereumTransactSighash() {
        return __classPrivateFieldGet(this, _Call_ethereumTransactSighash, "f");
    }
    set _ethereumTransactSighash(value) {
        __classPrivateFieldSet(this, _Call_ethereumTransactSighash, value, "f");
    }
}
exports.Call = Call;
_Call_block = new WeakMap(), _Call_extrinsic = new WeakMap(), _Call_parentCall = new WeakMap(), _Call_subcalls = new WeakMap(), _Call_events = new WeakMap(), _Call_ethereumTransactTo = new WeakMap(), _Call_ethereumTransactSighash = new WeakMap();
class Event {
    constructor(block, index) {
        _Event_block.set(this, void 0);
        _Event_extrinsic.set(this, void 0);
        _Event_call.set(this, void 0);
        _Event_evmLogAddress.set(this, void 0);
        _Event_evmLogTopics.set(this, void 0);
        _Event_contractAddress.set(this, void 0);
        _Event_gearProgramId.set(this, void 0);
        _Event_reviveContract.set(this, void 0);
        _Event_reviveTopics.set(this, void 0);
        this.id = (0, util_internal_processor_tools_1.formatId)(block, index);
        this.index = index;
        __classPrivateFieldSet(this, _Event_block, block, "f");
    }
    get block() {
        return __classPrivateFieldGet(this, _Event_block, "f");
    }
    set block(value) {
        __classPrivateFieldSet(this, _Event_block, value, "f");
    }
    get extrinsic() {
        return __classPrivateFieldGet(this, _Event_extrinsic, "f");
    }
    set extrinsic(value) {
        __classPrivateFieldSet(this, _Event_extrinsic, value, "f");
    }
    getExtrinsic() {
        if (this.extrinsic == null) {
            throw new Error(`Extrinsic is not set on event ${this.id}`);
        }
        else {
            return this.extrinsic;
        }
    }
    get call() {
        return __classPrivateFieldGet(this, _Event_call, "f");
    }
    set call(value) {
        __classPrivateFieldSet(this, _Event_call, value, "f");
    }
    getCall() {
        if (this.call == null) {
            throw new Error(`Call is not set on event ${this.id}`);
        }
        else {
            return this.call;
        }
    }
    get _evmLogAddress() {
        return __classPrivateFieldGet(this, _Event_evmLogAddress, "f");
    }
    set _evmLogAddress(value) {
        __classPrivateFieldSet(this, _Event_evmLogAddress, value, "f");
    }
    get _evmLogTopics() {
        return __classPrivateFieldGet(this, _Event_evmLogTopics, "f");
    }
    set _evmLogTopics(value) {
        __classPrivateFieldSet(this, _Event_evmLogTopics, value, "f");
    }
    get _evmLogTopic0() {
        return this._evmLogTopics?.[0];
    }
    get _evmLogTopic1() {
        return this._evmLogTopics?.[1];
    }
    get _evmLogTopic2() {
        return this._evmLogTopics?.[2];
    }
    get _evmLogTopic3() {
        return this._evmLogTopics?.[3];
    }
    get _contractAddress() {
        return __classPrivateFieldGet(this, _Event_contractAddress, "f");
    }
    set _contractAddress(value) {
        __classPrivateFieldSet(this, _Event_contractAddress, value, "f");
    }
    get _gearProgramId() {
        return __classPrivateFieldGet(this, _Event_gearProgramId, "f");
    }
    set _gearProgramId(value) {
        __classPrivateFieldSet(this, _Event_gearProgramId, value, "f");
    }
    get _reviveContract() {
        return __classPrivateFieldGet(this, _Event_reviveContract, "f");
    }
    set _reviveContract(value) {
        __classPrivateFieldSet(this, _Event_reviveContract, value, "f");
    }
    get _reviveTopics() {
        return __classPrivateFieldGet(this, _Event_reviveTopics, "f");
    }
    set _reviveTopics(value) {
        __classPrivateFieldSet(this, _Event_reviveTopics, value, "f");
    }
    get _reviveTopic0() {
        return this._reviveTopics?.[0];
    }
    get _reviveTopic1() {
        return this._reviveTopics?.[1];
    }
    get _reviveTopic2() {
        return this._reviveTopics?.[2];
    }
    get _reviveTopic3() {
        return this._reviveTopics?.[3];
    }
}
exports.Event = Event;
_Event_block = new WeakMap(), _Event_extrinsic = new WeakMap(), _Event_call = new WeakMap(), _Event_evmLogAddress = new WeakMap(), _Event_evmLogTopics = new WeakMap(), _Event_contractAddress = new WeakMap(), _Event_gearProgramId = new WeakMap(), _Event_reviveContract = new WeakMap(), _Event_reviveTopics = new WeakMap();
class Block {
    constructor(header) {
        this.header = header;
        this.extrinsics = [];
        this.calls = [];
        this.events = [];
    }
}
exports.Block = Block;
function setUpItems(block) {
    block.events.sort((a, b) => a.index - b.index);
    block.extrinsics.sort((a, b) => a.index - b.index);
    block.calls.sort(callCompare);
    let extrinsics = new Array(((0, util_internal_1.maybeLast)(block.extrinsics)?.index ?? -1) + 1);
    for (let rec of block.extrinsics) {
        extrinsics[rec.index] = rec;
    }
    for (let i = block.calls.length - 1; i >= 0; i--) {
        let rec = block.calls[i];
        let extrinsic = extrinsics[rec.extrinsicIndex];
        if (extrinsic) {
            if (rec.address.length == 0) {
                extrinsic.call = rec;
            }
            rec.extrinsic = extrinsic;
            extrinsic.subcalls.push(rec);
        }
        if (i < block.calls.length - 1) {
            let prev = block.calls[i + 1];
            if (prev.extrinsicIndex == rec.extrinsicIndex) {
                while (prev != null) {
                    if (isSubcall(prev, rec)) {
                        rec.parentCall = prev;
                        populateSubcalls(prev, rec);
                        break;
                    }
                    prev = prev.parentCall;
                }
            }
        }
    }
    for (let event of block.events) {
        if (event.extrinsicIndex == null)
            continue;
        let extrinsic = extrinsics[event.extrinsicIndex];
        if (extrinsic) {
            extrinsic.events.push(event);
            event.extrinsic = extrinsic;
        }
        if (event.callAddress && block.calls.length) {
            let pos = bisectCalls(block.calls, event.extrinsicIndex, event.callAddress);
            for (let i = pos; i < block.calls.length; i++) {
                let call = block.calls[i];
                if (isSubcall(call, { extrinsicIndex: event.extrinsicIndex, address: event.callAddress })) {
                    call.events.push(event);
                    if (addressCompare(call.address, event.callAddress) == 0) {
                        event.call = call;
                    }
                }
                else {
                    break;
                }
            }
        }
    }
}
function bisectCalls(calls, extrinsicIndex, callAddress) {
    let beg = 0;
    let end = calls.length;
    while (beg + 1 < end) {
        let dist = end - beg;
        let pos = beg + (dist - (dist % 2)) / 2;
        let call = calls[pos];
        let order = call.extrinsicIndex - extrinsicIndex || addressCompare(call.address, callAddress);
        if (order == 0)
            return pos;
        if (order > 0) {
            end = pos;
        }
        else {
            beg = pos;
        }
    }
    return beg;
}
function populateSubcalls(parent, child) {
    while (parent) {
        parent.subcalls.unshift(child);
        parent = parent.parentCall;
    }
}
function callCompare(a, b) {
    return a.extrinsicIndex - b.extrinsicIndex || addressCompare(a.address, b.address);
}
function addressCompare(a, b) {
    for (let i = 0; i < Math.min(a.length, b.length); i++) {
        let order = a[i] - b[i];
        if (order)
            return order;
    }
    return b.length - a.length; // this differs from EVM call ordering
}
function isSubcall(parent, call) {
    if (parent.extrinsicIndex != call.extrinsicIndex)
        return false;
    if (parent.address.length > call.address.length)
        return false;
    for (let i = 0; i < parent.address.length; i++) {
        if (parent.address[i] != call.address[i])
            return false;
    }
    return true;
}
//# sourceMappingURL=mapping.js.map