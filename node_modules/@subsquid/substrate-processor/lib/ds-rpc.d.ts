import type { RpcClient } from '@subsquid/rpc-client';
import { OldSpecsBundle, OldTypesBundle } from '@subsquid/substrate-runtime';
import { Batch, HotDatabaseState, HotDataSource, HotUpdate } from '@subsquid/util-internal-processor-tools';
import { RangeRequestList } from '@subsquid/util-internal-range';
import { DataRequest } from './interfaces/data-request';
import { Block } from './mapping';
export interface RpcDataSourceOptions {
    rpc: RpcClient;
    headPollInterval?: number;
    newHeadTimeout?: number;
    typesBundle?: OldTypesBundle | OldSpecsBundle;
    finalityConfirmation?: number;
}
export declare class RpcDataSource implements HotDataSource<Block, DataRequest> {
    private baseDataSource;
    constructor(options: RpcDataSourceOptions);
    getBlockHash(height: number): Promise<string | null>;
    getFinalizedHeight(): Promise<number>;
    getFinalizedBlocks(requests: RangeRequestList<DataRequest>, stopOnHead?: boolean): AsyncIterable<Batch<Block>>;
    processHotBlocks(requests: RangeRequestList<DataRequest>, state: HotDatabaseState, cb: (upd: HotUpdate<Block>) => Promise<void>): Promise<void>;
    private mapBlock;
}
//# sourceMappingURL=ds-rpc.d.ts.map