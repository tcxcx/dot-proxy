"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForInterruption = exports.listen = exports.createHttpServer = void 0;
const assert_1 = __importDefault(require("assert"));
const http = __importStar(require("http"));
const stoppable_1 = __importDefault(require("stoppable"));
function createHttpServer(handler, options) {
    let server = http.createServer(handler);
    if (options?.socketTimeout) {
        server.timeout = options.socketTimeout;
    }
    return listen(server, options?.port);
}
exports.createHttpServer = createHttpServer;
function listen(server, port) {
    let s = (0, stoppable_1.default)(server, 5000);
    function close() {
        return new Promise((resolve, reject) => {
            s.stop((err, gracefully) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    return new Promise((resolve, reject) => {
        s.listen(port || 0, (err) => {
            if (err) {
                reject(err);
            }
            else {
                let address = s.address();
                (0, assert_1.default)(address != null && typeof address == 'object');
                resolve({
                    port: address.port,
                    close
                });
            }
        });
    });
}
exports.listen = listen;
function waitForInterruption(server) {
    return new Promise((resolve, reject) => {
        function terminate() {
            process.off('SIGINT', terminate);
            process.off('SIGTERM', terminate);
            server.close().then(resolve, reject);
        }
        process.on('SIGINT', terminate);
        process.on('SIGTERM', terminate);
    });
}
exports.waitForInterruption = waitForInterruption;
//# sourceMappingURL=server.js.map