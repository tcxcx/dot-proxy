"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.archiveIngest = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const assert_1 = __importDefault(require("assert"));
function archiveIngest(args) {
    let { client, requests, stopOnHead = false, pollInterval = 20000 } = args;
    let height = new util_internal_1.Throttler(() => client.getHeight(), pollInterval);
    async function* ingest() {
        let top = await height.get();
        for (let req of requests) {
            let beg = req.range.from;
            let end = req.range.to ?? Infinity;
            while (beg <= end) {
                if (top < beg) {
                    top = await height.get();
                }
                while (top < beg) {
                    if (stopOnHead)
                        return;
                    top = await height.call();
                }
                let blocks = await client.query({
                    fromBlock: beg,
                    toBlock: req.range.to,
                    ...req.request
                });
                (0, assert_1.default)(blocks.length > 0, 'boundary blocks are expected to be included');
                let lastBlock = (0, util_internal_1.last)(blocks).header.number;
                (0, assert_1.default)(lastBlock >= beg);
                beg = lastBlock + 1;
                if (beg > top) {
                    top = await height.get();
                }
                yield {
                    blocks,
                    isHead: beg > top
                };
            }
        }
    }
    return (0, util_internal_1.concurrentMap)(2, ingest(), batch => Promise.resolve(batch));
}
exports.archiveIngest = archiveIngest;
//# sourceMappingURL=archive.js.map