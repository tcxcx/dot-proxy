"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.coldIngest = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_range_1 = require("@subsquid/util-internal-range");
const assert_1 = __importDefault(require("assert"));
function coldIngest(args) {
    let { getFinalizedHeight, getSplit, requests, splitSize, concurrency, stopOnHead, headPollInterval = 10000 } = args;
    (0, assert_1.default)(splitSize >= 1);
    (0, assert_1.default)(concurrency >= 1);
    let height = new util_internal_1.Throttler(getFinalizedHeight, headPollInterval);
    async function* strides() {
        let top = await height.get();
        for (let req of requests) {
            let beg = req.range.from;
            let end = req.range.to ?? Infinity;
            while (beg <= end) {
                if (top < beg) {
                    top = await height.get();
                }
                while (top < beg) {
                    if (stopOnHead)
                        return;
                    top = await height.call();
                }
                for (let range of (0, util_internal_range_1.splitRange)(splitSize, {
                    from: beg,
                    to: Math.min(top, end)
                })) {
                    let split = {
                        range,
                        request: req.request
                    };
                    beg = range.to + 1;
                    if (beg > top) {
                        top = await height.get();
                    }
                    yield {
                        split,
                        isHead: beg > top
                    };
                }
            }
        }
    }
    return (0, util_internal_1.concurrentMap)(concurrency, strides(), async ({ split, isHead }) => {
        let blocks = await getSplit(split);
        return { blocks, isHead };
    });
}
exports.coldIngest = coldIngest;
//# sourceMappingURL=cold.js.map