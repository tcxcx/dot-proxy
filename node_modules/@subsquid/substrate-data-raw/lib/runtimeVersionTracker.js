"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeVersionTracker = void 0;
const util_internal_ingest_tools_1 = require("@subsquid/util-internal-ingest-tools");
const util_1 = require("./util");
class RuntimeVersionTracker {
    constructor() {
        this.prevRuntimeVersion = new util_1.Prev();
    }
    async addRuntimeVersion(rpc, blocks) {
        if (blocks.length == 0)
            return;
        let prev;
        let maybePrev = this.prevRuntimeVersion.get(blocks[0].height);
        if (maybePrev == null) {
            let v = blocks[0].runtimeVersion || await rpc.getRuntimeVersion(blocks[0].hash);
            if (v == null)
                return (0, util_internal_ingest_tools_1.setInvalid)(blocks);
            prev = blocks[0].runtimeVersion = v;
            this.prevRuntimeVersion.set(blocks[0].height, prev);
        }
        else {
            prev = maybePrev;
        }
        let last = blocks.length - 1;
        let lastRuntimeVersion;
        while (last >= 0) {
            let block = blocks[last];
            if (block.runtimeVersion == null) {
                lastRuntimeVersion = await rpc.getRuntimeVersion(block.hash);
                if (lastRuntimeVersion) {
                    block.runtimeVersion = lastRuntimeVersion;
                    break;
                }
                else {
                    last -= 1;
                }
            }
            else {
                lastRuntimeVersion = block.runtimeVersion;
                break;
            }
        }
        if (lastRuntimeVersion == null)
            return (0, util_internal_ingest_tools_1.setInvalid)(blocks);
        for (let i = 0; i < last; i++) {
            let block = blocks[i];
            if (block.runtimeVersion == null) {
                if ((0, util_1.runtimeVersionEquals)(prev, lastRuntimeVersion)) {
                    block.runtimeVersion = prev;
                }
                else {
                    block.runtimeVersion = await rpc.getRuntimeVersion(block.hash);
                    if (block.runtimeVersion == null)
                        return (0, util_internal_ingest_tools_1.setInvalid)(blocks, i);
                }
            }
            if ((0, util_1.runtimeVersionEquals)(prev, block.runtimeVersion)) {
                // maintain same object reference
                block.runtimeVersion = prev;
            }
            else {
                prev = block.runtimeVersion;
                this.prevRuntimeVersion.set(block.height, prev);
            }
        }
    }
}
exports.RuntimeVersionTracker = RuntimeVersionTracker;
//# sourceMappingURL=runtimeVersionTracker.js.map