import { Logger } from '@subsquid/logger';
import { RpcClient } from '@subsquid/rpc-client';
import { Batch, HotState, HotUpdate } from '@subsquid/util-internal-ingest-tools';
import { RangeRequestList } from '@subsquid/util-internal-range';
import { BlockData, DataRequest } from './interfaces';
import { Rpc } from './rpc';
export interface RpcDataSourceOptions {
    rpc: RpcClient;
    headPollInterval?: number;
    newHeadTimeout?: number;
    finalityConfirmation?: number;
    log?: Logger;
}
export declare class RpcDataSource {
    readonly rpc: Rpc;
    private headPollInterval;
    private newHeadTimeout;
    private finalityConfirmation?;
    private log?;
    constructor(options: RpcDataSourceOptions);
    getFinalizedHeight(): Promise<number>;
    getFinalizedBlocks(requests: RangeRequestList<DataRequest>, stopOnHead?: boolean): AsyncIterable<Batch<BlockData>>;
    processHotBlocks(requests: RangeRequestList<DataRequest>, state: HotState, cb: (upd: HotUpdate<BlockData>) => Promise<void>): Promise<void>;
    private polling;
    private subscription;
    private handleNewHeads;
}
//# sourceMappingURL=datasource.d.ts.map