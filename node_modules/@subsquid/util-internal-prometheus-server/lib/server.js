"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPrometheusServer = void 0;
const util_internal_http_server_1 = require("@subsquid/util-internal-http-server");
function createPrometheusServer(registry, port) {
    let app = new util_internal_http_server_1.HttpApp();
    app.setLoggingNamespace('sqd:prometheus');
    app.add('/metrics', {
        async GET(ctx) {
            if (ctx.url.searchParams.get('json') === 'true') {
                let value = await registry.getMetricsAsJSON();
                ctx.send(200, value);
            }
            else {
                let value = await registry.metrics();
                ctx.send(200, value, registry.contentType);
            }
        }
    });
    app.add('/metrics/{name}', {
        async GET(ctx) {
            if (registry.getSingleMetric(ctx.params.name)) {
                let value = await registry.getSingleMetricAsString(ctx.params.name);
                ctx.send(200, value);
            }
            else {
                ctx.send(404, 'requested metric not found');
            }
        }
    });
    return app.listen(port);
}
exports.createPrometheusServer = createPrometheusServer;
//# sourceMappingURL=server.js.map