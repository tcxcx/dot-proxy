"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@subsquid/logger");
const rpc_client_1 = require("@subsquid/rpc-client");
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_commander_1 = require("@subsquid/util-internal-commander");
const commander_1 = require("commander");
const explore_1 = require("./explore");
const out_1 = require("./out");
const rpc_api_1 = require("./rpc-api");
const log = (0, logger_1.createLogger)('sqd:substrate-metadata-explorer');
(0, util_internal_1.runProgram)(async () => {
    let program = new commander_1.Command();
    program.description(`
Finds all spec versions by performing binary search over chain blocks.

When output file already exists, 
the search will not start from scratch and 
output file will be augmented with newly discovered versions.
`.trim());
    program.usage('substrate-metadata-explorer --rpc <url> --out <file>');
    program.requiredOption('--rpc <url>', 'chain rpc endpoint', (0, util_internal_commander_1.Url)(['http:', 'https:', 'ws:', 'wss:']));
    program.requiredOption('--out <file>', 'output file');
    program.option('--fromBlock <number>', 'start block', util_internal_commander_1.nat, 0);
    program.option('--toBlock <number>', 'end block', util_internal_commander_1.nat);
    let options = program.parse().opts();
    let out = new out_1.Out(options.out);
    if (out.isJson()) {
        log.warn(`JSON lines (.jsonl) format is recommended instead of .json, but output file is set to ${options.out}`);
    }
    let api = new rpc_api_1.RpcApi(new rpc_client_1.RpcClient({
        url: options.rpc,
        capacity: 10,
        retryAttempts: 5
    }), log);
    let range = {
        from: options.fromBlock,
        to: options.toBlock,
    };
    await (0, explore_1.explore)(api, out, log, range);
}, err => log.fatal(err));
//# sourceMappingURL=main.js.map