"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = void 0;
exports.setLogLevelCallback = setLogLevelCallback;
exports.setRootSink = setRootSink;
exports.createLogger = createLogger;
const level_1 = require("./level");
const logger_1 = require("./logger");
const json_1 = require("./sinks/json");
const pretty_1 = require("./sinks/pretty");
var level_2 = require("./level");
Object.defineProperty(exports, "LogLevel", { enumerable: true, get: function () { return level_2.LogLevel; } });
__exportStar(require("./logger"), exports);
/**
 * Override the default log level determination logic.
 *
 * Log levels are cached.
 * Call it at the very beginning of the app for it to be effective.
 *
 * Return `undefined` from the `cb` to fall back to the standard logic.
 */
function setLogLevelCallback(cb) {
    level_1.LEVELS.setLevelCallback(cb);
}
const prettyEnabled = process.env.FORCE_PRETTY_LOGGER ?
    process.env.FORCE_PRETTY_LOGGER !== '0' :
    process.stderr.isTTY;
let ROOT_SINK = prettyEnabled ? pretty_1.prettyStderrSink : json_1.jsonLinesStderrSink;
/**
 * Use custom log sink
 */
function setRootSink(sink) {
    ROOT_SINK = sink;
}
const ROOT = new logger_1.Logger(rec => ROOT_SINK(rec), '');
function createLogger(ns, attributes) {
    return ROOT.child(ns, attributes);
}
//# sourceMappingURL=index.js.map