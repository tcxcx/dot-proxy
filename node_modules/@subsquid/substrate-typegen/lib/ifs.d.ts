import { Ti, Type } from '@subsquid/substrate-runtime/lib/metadata';
import { Output } from '@subsquid/util-internal-code-printer';
export type Exp = string;
export declare class Sink {
    readonly types: Type[];
    private nameAssignment;
    private queue;
    private assignedNames;
    constructor(types: Type[], nameAssignment: Map<Ti, string>);
    push(cb: (out: Output) => void): void;
    getName(ti: Ti): string;
    hasName(ti: Ti): boolean;
    needsName(ti: Ti): boolean;
    isEmpty(): boolean;
    generate(out: Output): void;
    qualify(ns: string, exp: Exp): Exp;
}
export declare class Interfaces {
    readonly sink: Sink;
    private generated;
    private generatedNames;
    constructor(sink: Sink);
    use(ti: Ti): Exp;
    private getName;
    private makeType;
    private makeTuple;
    private makeStruct;
    private printStructFields;
    private isUndefined;
    private isUnit;
    private makeVariant;
}
export declare class Sts {
    readonly sink: Sink;
    readonly ifs: Interfaces;
    private generated;
    private generatedNames;
    constructor(sink: Sink);
    use(ti: Ti): Exp;
    private makeType;
    private makeStruct;
    private printStructFields;
    private makeVariant;
    private renderTuple;
}
//# sourceMappingURL=ifs.d.ts.map