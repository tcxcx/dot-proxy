"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toJsName = exports.toPlural = exports.toSnakeCase = exports.toCamelCase = void 0;
const camelcase_1 = __importDefault(require("camelcase"));
const inflected_1 = require("inflected");
function toCamelCase(name, uppercaseFirstLetter = false) {
    return (0, camelcase_1.default)(name, { pascalCase: uppercaseFirstLetter });
}
exports.toCamelCase = toCamelCase;
function toSnakeCase(name) {
    return (0, inflected_1.underscore)(name);
}
exports.toSnakeCase = toSnakeCase;
function toPlural(name) {
    return (0, inflected_1.pluralize)(name);
}
exports.toPlural = toPlural;
const jsReservedKeywords = new Set([
    'break',
    'case',
    'catch',
    'class',
    'const',
    'continue',
    'debugger',
    'default',
    'delete',
    'do',
    'else',
    'export',
    'extends',
    'false',
    'finally',
    'for',
    'function',
    'if',
    'import',
    'in',
    'instanceof',
    'new',
    'null',
    'return',
    'super',
    'switch',
    'this',
    'throw',
    'true',
    'try',
    'typeof',
    'var',
    'void',
    'while',
    'with',
    'let',
    'static',
    'yield',
    'await',
    'enum',
    'implements',
    'interface',
    'package',
    'private',
    'protected',
    'public',
]);
function toJsName(name) {
    if (jsReservedKeywords.has(name)) {
        return name + '_';
    }
    else {
        return name;
    }
}
exports.toJsName = toJsName;
//# sourceMappingURL=naming.js.map