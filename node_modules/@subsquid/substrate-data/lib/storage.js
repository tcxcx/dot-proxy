"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.STORAGE = void 0;
const substrate_runtime_1 = require("@subsquid/substrate-runtime");
const storage_1 = require("@subsquid/substrate-runtime/lib/runtime/storage");
const util_1 = require("@subsquid/substrate-runtime/lib/runtime/util");
const sts_1 = require("@subsquid/substrate-runtime/lib/sts");
const util_internal_1 = require("@subsquid/util-internal");
const util_2 = require("./types/util");
class ScalarStorage {
    constructor(name, type) {
        this.name = name;
        this.type = type;
    }
    assert(runtime) {
        (0, util_2.assertStorage)(getRuntime(runtime), this.name, ['Default', 'Required'], [], this.type);
    }
    check(runtime) {
        return getRuntime(runtime).checkStorageType(this.name, ['Default', 'Required'], [], this.type);
    }
    isDefined(runtime) {
        return getRuntime(runtime).hasStorageItem(this.name);
    }
    key() {
        let [pallet, name] = (0, util_1.parseQualifiedName)(this.name);
        return (0, storage_1.getNameHash)(pallet) + (0, storage_1.getNameHash)(name).slice(2);
    }
    async get(rpc, block) {
        this.assert(block);
        let value = await rpc.getStorage(this.key(), block.hash);
        if (value === undefined)
            return;
        return this.decode(block, value);
    }
    decode(runtime, value) {
        this.assert(runtime);
        return getRuntime(runtime).decodeStorageValue(this.name, value);
    }
}
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], ScalarStorage.prototype, "key", null);
function getRuntime(blockOrRuntime) {
    if (blockOrRuntime instanceof substrate_runtime_1.Runtime)
        return blockOrRuntime;
    return (0, util_internal_1.assertNotNull)(blockOrRuntime.runtime);
}
exports.STORAGE = {
    nextFeeMultiplier: new ScalarStorage('TransactionPayment.NextFeeMultiplier', (0, sts_1.numeric)()),
    sessionIndex: new ScalarStorage('Session.CurrentIndex', (0, sts_1.numeric)()),
    validators: new ScalarStorage('Session.Validators', (0, sts_1.array)((0, sts_1.bytes)()))
};
//# sourceMappingURL=storage.js.map