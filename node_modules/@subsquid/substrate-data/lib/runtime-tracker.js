"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeTracker = void 0;
const substrate_data_raw_1 = require("@subsquid/substrate-data-raw");
const substrate_runtime_1 = require("@subsquid/substrate-runtime");
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_ingest_tools_1 = require("@subsquid/util-internal-ingest-tools");
class RuntimeTracker {
    constructor(rpc, getBlockHeader, getBlockRuntimeVersion, typesBundle) {
        this.rpc = rpc;
        this.getBlockHeader = getBlockHeader;
        this.getBlockRuntimeVersion = getBlockRuntimeVersion;
        this.typesBundle = typesBundle;
        this.prev = new substrate_data_raw_1.Prev();
    }
    async setRuntime(blocks) {
        if (blocks.length == 0 || blocks[0]._isInvalid)
            return;
        let prev;
        let parentParentHeight = Math.max(0, this.getBlockHeader(blocks[0]).height - 2);
        let maybePrev = this.prev.getItem(parentParentHeight);
        if (maybePrev == null) {
            let parentParentRef = await this.getParent(getParent(this.getBlockHeader(blocks[0])));
            if (parentParentRef == null)
                return (0, util_internal_ingest_tools_1.setInvalid)(blocks);
            maybePrev = await this.fetchRuntime(parentParentRef);
            if (maybePrev == null)
                return (0, util_internal_ingest_tools_1.setInvalid)(blocks);
            prev = maybePrev;
        }
        else {
            prev = maybePrev;
        }
        for (let i = 0; i < blocks.length; i++) {
            let block = blocks[i];
            if (block._isInvalid)
                return;
            let header = this.getBlockHeader(block);
            let parentParentHeight = Math.max(0, header.height - 2);
            let parentHeight = Math.max(0, header.height - 1);
            let rtv = this.getBlockRuntimeVersion(block);
            if ((0, substrate_data_raw_1.runtimeVersionEquals)(prev.value, rtv) || prev.height == parentParentHeight) {
                block.runtimeOfPrevBlock = prev.value;
            }
            else {
                let parentParentRef = await this.getParent(getParent(header));
                if (parentParentRef == null)
                    return (0, util_internal_ingest_tools_1.setInvalid)(blocks, i);
                let maybePrev = await this.fetchRuntime(parentParentRef);
                if (maybePrev == null)
                    return (0, util_internal_ingest_tools_1.setInvalid)(blocks, i);
                prev = maybePrev;
                block.runtimeOfPrevBlock = prev.value;
            }
            if ((0, substrate_data_raw_1.runtimeVersionEquals)(prev.value, rtv)) {
                block.runtime = prev.value;
                prev = {
                    height: parentHeight,
                    value: prev.value
                };
            }
            else {
                let maybePrev = await this.fetchRuntime(getParent(header));
                if (maybePrev == null)
                    return (0, util_internal_ingest_tools_1.setInvalid)(blocks, i);
                prev = maybePrev;
                block.runtime = prev.value;
            }
        }
    }
    async fetchRuntime(ref) {
        let [runtimeVersion, metadata] = await Promise.all([
            this.rpc.getRuntimeVersion(ref.hash),
            this.rpc.getMetadata(ref.hash)
        ]);
        if (runtimeVersion == null || metadata == null)
            return undefined;
        let runtime = new substrate_runtime_1.Runtime(runtimeVersion, metadata, this.typesBundle, this.rpc.client);
        this.prev.set(ref.height, runtime);
        return { height: ref.height, value: runtime };
    }
    async getParent(ref) {
        if (ref.height == 0)
            return ref;
        let header = await this.rpc.getBlockHeader(ref.hash);
        if (header == null)
            return null;
        return {
            height: ref.height - 1,
            hash: header.parentHash
        };
    }
}
exports.RuntimeTracker = RuntimeTracker;
__decorate([
    (0, util_internal_1.annotateAsyncError)(getRefCtx),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], RuntimeTracker.prototype, "fetchRuntime", null);
function getParent(header) {
    if (header.height == 0)
        return header;
    return {
        height: header.height - 1,
        hash: header.parentHash
    };
}
function getRefCtx(ref) {
    return {
        blockHeight: ref.height,
        blockHash: ref.hash
    };
}
//# sourceMappingURL=runtime-tracker.js.map