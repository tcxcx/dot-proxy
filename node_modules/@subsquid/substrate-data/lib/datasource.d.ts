import type { RpcClient } from '@subsquid/rpc-client';
import * as raw from '@subsquid/substrate-data-raw';
import { OldSpecsBundle, OldTypesBundle } from '@subsquid/substrate-runtime/lib/metadata';
import { Batch, HotState, HotUpdate } from '@subsquid/util-internal-ingest-tools';
import { RangeRequestList } from '@subsquid/util-internal-range';
import { Block, DataRequest } from './interfaces/data';
export interface RpcDataSourceOptions {
    rpc: RpcClient;
    headPollInterval?: number;
    newHeadTimeout?: number;
    typesBundle?: OldTypesBundle | OldSpecsBundle;
    finalityConfirmation?: number;
}
export declare class RpcDataSource {
    private rawDataSource;
    private typesBundle?;
    constructor(options: RpcDataSourceOptions);
    get rpc(): raw.Rpc;
    getFinalizedHeight(): Promise<number>;
    getBlockHash(height: number): Promise<string | null>;
    getFinalizedBlocks(requests: RangeRequestList<DataRequest>, stopOnHead?: boolean): AsyncIterable<Batch<Block>>;
    processHotBlocks(requests: RangeRequestList<DataRequest>, state: HotState, cb: (upd: HotUpdate<Block>) => Promise<void>): Promise<void>;
}
//# sourceMappingURL=datasource.d.ts.map