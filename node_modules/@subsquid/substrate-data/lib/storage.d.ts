import { Rpc } from '@subsquid/substrate-data-raw';
import { Bytes, Runtime } from '@subsquid/substrate-runtime';
import { GetType, Type } from '@subsquid/substrate-runtime/lib/sts';
import { RawBlock } from './interfaces/data-raw';
declare class ScalarStorage<T extends Type> {
    private name;
    private type;
    constructor(name: string, type: T);
    assert(runtime: Runtime | RawBlock): void;
    check(runtime: Runtime | RawBlock): boolean;
    isDefined(runtime: Runtime | RawBlock): boolean;
    key(): Bytes;
    get(rpc: Rpc, block: RawBlock): Promise<GetType<T> | undefined>;
    decode(runtime: RawBlock | Runtime, value: Bytes | null): GetType<T>;
}
export declare const STORAGE: {
    nextFeeMultiplier: ScalarStorage<Type<number | bigint>>;
    sessionIndex: ScalarStorage<Type<number | bigint>>;
    validators: ScalarStorage<Type<string[]>>;
};
export {};
//# sourceMappingURL=storage.d.ts.map