"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcDataSource = void 0;
const raw = __importStar(require("@subsquid/substrate-data-raw"));
const util_internal_range_1 = require("@subsquid/util-internal-range");
const parser_1 = require("./parser");
class RpcDataSource {
    constructor(options) {
        this.rawDataSource = new raw.RpcDataSource({
            rpc: options.rpc,
            headPollInterval: options.headPollInterval,
            newHeadTimeout: options.newHeadTimeout,
            finalityConfirmation: options.finalityConfirmation
        });
        this.typesBundle = options.typesBundle;
    }
    get rpc() {
        return this.rawDataSource.rpc;
    }
    getFinalizedHeight() {
        return this.rawDataSource.getFinalizedHeight();
    }
    getBlockHash(height) {
        return this.rpc.getBlockHash(height);
    }
    async *getFinalizedBlocks(requests, stopOnHead) {
        let parser = new parser_1.Parser(this.rpc, requests, this.typesBundle);
        for await (let batch of this.rawDataSource.getFinalizedBlocks((0, util_internal_range_1.mapRangeRequestList)(requests, toRawRequest), stopOnHead)) {
            let blocks = await parser.parseCold(batch.blocks);
            yield {
                ...batch,
                blocks
            };
        }
    }
    async processHotBlocks(requests, state, cb) {
        let parser = new parser_1.Parser(this.rpc, requests, this.typesBundle);
        return this.rawDataSource.processHotBlocks((0, util_internal_range_1.mapRangeRequestList)(requests, toRawRequest), state, async (upd) => {
            let blocks = await parser.parseCold(upd.blocks);
            return cb({
                ...upd,
                blocks
            });
        });
    }
}
exports.RpcDataSource = RpcDataSource;
function toRawRequest(req) {
    return {
        runtimeVersion: true,
        extrinsics: req.blockTimestamp || !!req.extrinsics,
        events: req.events || !!req.extrinsics
    };
}
//# sourceMappingURL=datasource.js.map