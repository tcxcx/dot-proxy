import { CallRecord, EventRecord, Runtime } from '@subsquid/substrate-runtime';
import { StorageItem } from '@subsquid/substrate-runtime/lib/metadata';
import { GetType, Type } from '@subsquid/substrate-runtime/lib/sts';
import { QualifiedName } from '../interfaces/data';
export declare function isEvent<T extends Type>(runtime: Runtime, ty: T, event: EventRecord): event is EventRecord<GetType<T>>;
export declare function isCall<T extends Type>(runtime: Runtime, ty: T, call: CallRecord): call is CallRecord<GetType<T>>;
export declare class UnexpectedEventType extends Error {
    constructor(name: QualifiedName);
}
export declare class UnexpectedCallType extends Error {
    constructor(name: QualifiedName);
}
export declare class UnexpectedStorageType extends Error {
    constructor(name: QualifiedName);
}
export declare function assertEvent<T extends Type>(runtime: Runtime, ty: T, event: EventRecord): asserts event is EventRecord<GetType<T>>;
export declare function assertCall<T extends Type>(runtime: Runtime, ty: T, event: EventRecord): asserts event is CallRecord<GetType<T>>;
export declare function assertStorage(runtime: Runtime, name: QualifiedName, allowedModifiers: StorageItem['modifier'][], key: Type[], value: Type): void;
//# sourceMappingURL=util.d.ts.map