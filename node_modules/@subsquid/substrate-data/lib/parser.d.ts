import { Rpc } from '@subsquid/substrate-data-raw';
import { OldSpecsBundle, OldTypesBundle } from '@subsquid/substrate-runtime/lib/metadata';
import { RangeRequestList } from '@subsquid/util-internal-range';
import { Block, Bytes, DataRequest } from './interfaces/data';
import { RawBlock } from './interfaces/data-raw';
export declare class Parser {
    private rpc;
    private requests;
    private skipBlocks?;
    private prevValidators;
    private runtimeTracker;
    constructor(rpc: Rpc, requests: RangeRequestList<DataRequest>, typesBundle?: OldTypesBundle | OldSpecsBundle, skipBlocks?: number[] | undefined);
    parseCold(blocks: RawBlock[]): Promise<Block[]>;
    parse(blocks: RawBlock[]): Promise<void>;
    private parseBlock;
    private setValidators;
    private fetchValidators;
    private setFeeMultiplier;
}
export declare class MissingStorageValue extends Error {
    readonly key: Bytes;
    constructor(key: Bytes);
    get name(): string;
}
//# sourceMappingURL=parser.d.ts.map