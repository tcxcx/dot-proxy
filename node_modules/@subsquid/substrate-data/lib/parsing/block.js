"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseBlock = parseBlock;
const util_internal_1 = require("@subsquid/util-internal");
const assert_1 = __importDefault(require("assert"));
const contracts_1 = require("../extension/contracts");
const evm_1 = require("../extension/evm");
const gear_1 = require("../extension/gear");
const revive_1 = require("../extension/revive");
const data_1 = require("../interfaces/data");
const call_1 = require("./call");
const event_1 = require("./event");
const extrinsic_1 = require("./extrinsic");
const fee_1 = require("./fee");
const calc_1 = require("./fee/calc");
const timestamp_1 = require("./timestamp");
const tip_1 = require("./tip");
const validator_1 = require("./validator");
const types_1 = require("./validator/types");
function parseBlock(src, options) {
    let bp = new BlockParser(src, !!options.extrinsics?.hash);
    let block = bp.block();
    if (options.blockTimestamp) {
        block.header.timestamp = bp.timestamp();
    }
    if (options.blockValidator) {
        block.header.validator = bp.validator();
    }
    if (options.events) {
        block.events = bp.events();
    }
    if (options.extrinsics) {
        block.extrinsics = bp.extrinsics();
        block.calls = bp.calls();
        bp.setExtrinsicTips();
        if (options.extrinsics.fee) {
            bp.setExtrinsicFees();
        }
    }
    if (block.events) {
        for (let e of block.events) {
            (0, evm_1.setEvmLog)(block.runtime, e);
            (0, contracts_1.setEmittedContractAddress)(block.runtime, e);
            (0, gear_1.setGearProgramId)(block.runtime, e);
            (0, revive_1.setReviveContractEmitted)(block.runtime, e);
        }
    }
    if (block.calls) {
        for (let c of block.calls) {
            (0, evm_1.setEthereumTransact)(block.runtime, c);
        }
    }
    return block;
}
class BlockParser {
    constructor(src, withExtrinsicHash) {
        this.src = src;
        this.withExtrinsicHash = withExtrinsicHash;
        this.runtime = (0, util_internal_1.assertNotNull)(src.runtime);
    }
    block() {
        return new data_1.Block(this.runtime, (0, util_internal_1.assertNotNull)(this.src.runtimeOfPrevBlock), this.header());
    }
    header() {
        let runtimeVersion = (0, util_internal_1.assertNotNull)(this.src.runtimeVersion);
        let hdr = this.src.block.block.header;
        return {
            height: this.src.height,
            hash: this.src.hash,
            parentHash: hdr.parentHash,
            digest: hdr.digest,
            extrinsicsRoot: hdr.extrinsicsRoot,
            stateRoot: hdr.stateRoot,
            specName: runtimeVersion.specName,
            specVersion: runtimeVersion.specVersion,
            implName: runtimeVersion.implName,
            implVersion: runtimeVersion.implVersion
        };
    }
    decodedExtrinsics() {
        let extrinsics = (0, util_internal_1.assertNotNull)(this.src.block.block.extrinsics, 'extrinsic data is not provided');
        return (0, extrinsic_1.decodeExtrinsics)(this.runtime, extrinsics, this.withExtrinsicHash);
    }
    extrinsics() {
        return this.decodedExtrinsics().map(ex => ex.extrinsic);
    }
    events() {
        (0, assert_1.default)('events' in this.src, 'event data is not provided');
        if (this.src.events == null)
            return [];
        return (0, event_1.decodeEvents)(this.runtime, this.src.events);
    }
    calls() {
        return (0, call_1.parseCalls)(this.src, this.decodedExtrinsics(), this.events());
    }
    digest() {
        return this.src.block.block.header.digest.logs.map(hex => {
            return this.runtime.scaleCodec.decodeBinary(this.runtime.description.digestItem, hex);
        });
    }
    validator() {
        if (this.runtime.hasStorageItem('Session.Validators') &&
            this.runtime.checkType(this.runtime.description.digestItem, types_1.DigestItem)) {
            let digest = this.digest();
            let validators = (0, util_internal_1.assertNotNull)(this.src.validators, 'validator data is not provided');
            return (0, validator_1.getBlockValidator)(digest, validators);
        }
    }
    timestamp() {
        return (0, timestamp_1.getBlockTimestamp)(this.runtime, this.decodedExtrinsics());
    }
    setExtrinsicFees() {
        if (this.runtime.hasEvent('TransactionPayment.TransactionFeePaid')) {
            (0, fee_1.setExtrinsicFeesFromPaidEvent)(this.runtime, this.extrinsics(), this.events());
        }
        else if ((0, calc_1.supportsFeeCalc)(this.runtime)) {
            (0, assert_1.default)(this.src.feeMultiplier != null, 'fee multiplier value is not provided');
            let extrinsics = this.extrinsics();
            let rawExtrinsics = (0, util_internal_1.assertNotNull)(this.src.block.block.extrinsics);
            (0, fee_1.setExtrinsicFeesFromCalc)(this.runtime, rawExtrinsics, extrinsics, this.events(), this.block().runtimeOfPrevBlock.specName, this.block().runtimeOfPrevBlock.specVersion, this.src.feeMultiplier);
        }
    }
    setExtrinsicTips() {
        (0, tip_1.setExtrinsicTips)(this.runtime, this.extrinsics());
    }
}
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", data_1.Block)
], BlockParser.prototype, "block", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], BlockParser.prototype, "header", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], BlockParser.prototype, "decodedExtrinsics", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], BlockParser.prototype, "extrinsics", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], BlockParser.prototype, "events", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], BlockParser.prototype, "calls", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], BlockParser.prototype, "digest", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], BlockParser.prototype, "validator", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Number)
], BlockParser.prototype, "timestamp", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BlockParser.prototype, "setExtrinsicFees", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BlockParser.prototype, "setExtrinsicTips", null);
//# sourceMappingURL=block.js.map