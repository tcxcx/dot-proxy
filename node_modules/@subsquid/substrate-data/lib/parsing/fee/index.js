"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setExtrinsicFeesFromPaidEvent = setExtrinsicFeesFromPaidEvent;
exports.setExtrinsicFeesFromCalc = setExtrinsicFeesFromCalc;
const util_internal_1 = require("@subsquid/util-internal");
const util_1 = require("../../types/util");
const calc_1 = require("./calc");
const types_1 = require("./types");
function setExtrinsicFeesFromPaidEvent(runtime, extrinsics, events) {
    for (let e of events) {
        if (e.name == 'TransactionPayment.TransactionFeePaid') {
            let extrinsic = extrinsics[(0, util_internal_1.assertNotNull)(e.extrinsicIndex)];
            let actualFee;
            let tip;
            if ((0, util_1.isEvent)(runtime, types_1.TransactionFeePaid, e)) {
                actualFee = BigInt(e.args.actualFee);
                tip = BigInt(e.args.tip);
            }
            else if ((0, util_1.isEvent)(runtime, types_1.AcalaTransactionFeePaid, e)) {
                actualFee = BigInt(e.args.actualFee);
                tip = BigInt(e.args.actualTip);
            }
            else {
                throw new Error('TransactionPayment.TransactionFeePaid event has unexpected type');
            }
            extrinsic.fee = actualFee - tip;
            extrinsic.tip = tip;
        }
    }
}
function setExtrinsicFeesFromCalc(runtime, rawExtrinsics, extrinsics, events, prevBlockSpecName, prevBlockSpecVersion, feeMultiplier) {
    let calc = (0, calc_1.getFeeCalc)(runtime, feeMultiplier, prevBlockSpecName, prevBlockSpecVersion);
    if (calc == null)
        return;
    for (let e of events) {
        let extrinsicIndex;
        let dispatchInfo;
        switch (e.name) {
            case 'System.ExtrinsicSuccess':
                extrinsicIndex = (0, util_internal_1.assertNotNull)(e.extrinsicIndex);
                if ((0, util_1.isEvent)(runtime, types_1.ExtrinsicSuccessLatest, e)) {
                    dispatchInfo = e.args.dispatchInfo;
                }
                else if ((0, util_1.isEvent)(runtime, types_1.ExtrinsicSuccessLegacy, e)) {
                    dispatchInfo = e.args;
                }
                else {
                    throw new util_1.UnexpectedEventType('System.ExtrinsicSuccess');
                }
                break;
            case 'System.ExtrinsicFailed':
                extrinsicIndex = (0, util_internal_1.assertNotNull)(e.extrinsicIndex);
                (0, util_1.assertEvent)(runtime, types_1.ExtrinsicFailed, e);
                if (Array.isArray(e.args)) {
                    dispatchInfo = e.args[1];
                }
                else {
                    dispatchInfo = e.args.dispatchInfo;
                }
                break;
            default:
                continue;
        }
        let extrinsic = extrinsics[extrinsicIndex];
        if (extrinsic.signature == null)
            continue;
        let len = rawExtrinsics[extrinsicIndex].length / 2 - 1;
        extrinsic.fee = calc(dispatchInfo, len);
    }
}
//# sourceMappingURL=index.js.map