import { GetType } from '@subsquid/substrate-runtime/lib/sts';
export declare const NextFeeMultiplier: import("@subsquid/substrate-runtime/lib/sts").Type<number | bigint>;
export declare const TransactionByteFeeConst: import("@subsquid/substrate-runtime/lib/sts").Type<number | bigint>;
export declare const ExtrinsicBaseWeightConst: import("@subsquid/substrate-runtime/lib/sts").Type<number | bigint>;
export declare const WeightToFeeConst: import("@subsquid/substrate-runtime/lib/sts").Type<{
    coeffInteger: number | bigint;
    coeffFrac: number;
    negative: boolean;
    degree: number;
}[]>;
export declare const LengthToFeeConst: import("@subsquid/substrate-runtime/lib/sts").Type<{
    coeffInteger: number | bigint;
    coeffFrac: number;
    negative: boolean;
    degree: number;
}[]>;
export declare const BlockWeightsConst: import("@subsquid/substrate-runtime/lib/sts").Type<{
    perClass: {
        normal: {
            baseExtrinsic: number | bigint;
        };
        operational: {
            baseExtrinsic: number | bigint;
        };
        mandatory: {
            baseExtrinsic: number | bigint;
        };
    };
}>;
export declare const DispatchInfo: import("@subsquid/substrate-runtime/lib/sts").Type<{
    weight: bigint;
    class: {
        __kind: "Normal";
    } | {
        __kind: "Operational";
    } | {
        __kind: "Mandatory";
    };
    paysFee: boolean | {
        __kind: "Yes";
    } | {
        __kind: "No";
    };
}>;
export type IDispatchInfo = GetType<typeof DispatchInfo>;
export declare const ExtrinsicSuccessLatest: import("@subsquid/substrate-runtime/lib/sts").Type<{
    dispatchInfo: {
        weight: bigint;
        class: {
            __kind: "Normal";
        } | {
            __kind: "Operational";
        } | {
            __kind: "Mandatory";
        };
        paysFee: boolean | {
            __kind: "Yes";
        } | {
            __kind: "No";
        };
    };
}>;
export declare const ExtrinsicSuccessLegacy: import("@subsquid/substrate-runtime/lib/sts").Type<{
    weight: bigint;
    class: {
        __kind: "Normal";
    } | {
        __kind: "Operational";
    } | {
        __kind: "Mandatory";
    };
    paysFee: boolean | {
        __kind: "Yes";
    } | {
        __kind: "No";
    };
}>;
export declare const ExtrinsicFailed: import("@subsquid/substrate-runtime/lib/sts").Type<{
    dispatchInfo: {
        weight: bigint;
        class: {
            __kind: "Normal";
        } | {
            __kind: "Operational";
        } | {
            __kind: "Mandatory";
        };
        paysFee: boolean | {
            __kind: "Yes";
        } | {
            __kind: "No";
        };
    };
} | [unknown, {
    weight: bigint;
    class: {
        __kind: "Normal";
    } | {
        __kind: "Operational";
    } | {
        __kind: "Mandatory";
    };
    paysFee: boolean | {
        __kind: "Yes";
    } | {
        __kind: "No";
    };
}]>;
export declare const TransactionFeePaid: import("@subsquid/substrate-runtime/lib/sts").Type<{
    actualFee: number | bigint;
    tip: number | bigint;
}>;
export declare const AcalaTransactionFeePaid: import("@subsquid/substrate-runtime/lib/sts").Type<{
    actualFee: number | bigint;
    actualTip: number | bigint;
}>;
//# sourceMappingURL=types.d.ts.map