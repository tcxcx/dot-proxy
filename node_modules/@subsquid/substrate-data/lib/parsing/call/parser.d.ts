import { DecodedCall, Runtime } from '@subsquid/substrate-runtime';
import { Call, Event } from '../../interfaces/data';
import { RawBlock } from '../../interfaces/data-raw';
import { IOrigin } from '../../types/system';
import { DecodedExtrinsic } from '../extrinsic';
export type Boundary<T> = (runtime: Runtime, event: Event) => T | undefined | null | false;
export interface CallResult {
    ok: boolean;
    error?: unknown;
}
export declare class CallParser {
    readonly runtime: Runtime;
    readonly block: RawBlock;
    private extrinsics;
    private events;
    private calls;
    private eventPos;
    private extrinsic;
    private address?;
    private boundary?;
    constructor(runtime: Runtime, block: RawBlock, extrinsics: DecodedExtrinsic[], events: Event[]);
    parse(): Call[];
    private getExtrinsicFailedError;
    createCall(extrinsicIndex: number, address: number[], src: DecodedCall, origin?: IOrigin): Call;
    visitCall(call: Call): void;
    visitSubcall(call: Call, boundary: Boundary<CallResult>): void;
    visitFailedCall(call: Call, error?: unknown): void;
    unwrap(call: Call, success: boolean): void;
    getSubcalls(call: Call, origin?: IOrigin | null): Call[];
    getSubcall(call: Call, origin?: IOrigin | null): Call;
    withBoundary<T>(boundary: Boundary<unknown>, cb: () => T): T;
    get<T>(boundary: Boundary<T>): T;
    isPresent(boundary: Boundary<unknown>): boolean;
    takeEvents(): void;
    next(): Event;
    maybeNext(): Event | undefined;
    private skipExtrinsicEvents;
}
//# sourceMappingURL=parser.d.ts.map