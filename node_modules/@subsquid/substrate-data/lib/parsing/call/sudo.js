"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitSudo = visitSudo;
exports.unwrapSudo = unwrapSudo;
exports.visitSudoAs = visitSudoAs;
exports.unwrapSudoAs = unwrapSudoAs;
const sts_1 = require("@subsquid/substrate-runtime/lib/sts");
const system_1 = require("../../types/system");
const util_1 = require("../../types/util");
const util_2 = require("../util");
const Result = (0, sts_1.closedEnum)({
    Ok: (0, sts_1.unknown)(),
    Err: (0, sts_1.unknown)()
});
const SudoResultLatest = (0, sts_1.struct)({ sudoResult: Result });
const SudoResultLegacy = Result;
function END_OF_SUDO(runtime, event) {
    switch (event.name) {
        case "Sudo.Sudid":
        case "Sudo.SudoAsDone":
            break;
        default:
            return;
    }
    if (typeof event.args == 'boolean')
        return {
            ok: event.args
        };
    let result;
    if ((0, util_1.isEvent)(runtime, SudoResultLatest, event)) {
        result = event.args.sudoResult;
    }
    else if ((0, util_1.isEvent)(runtime, SudoResultLegacy, event)) {
        result = event.args;
    }
    else {
        throw new util_1.UnexpectedEventType(event.name);
    }
    switch (result.__kind) {
        case 'Ok':
            return { ok: true };
        case 'Err':
            return { ok: false, error: result.value };
    }
}
const SudoCallLatest = (0, sts_1.struct)({ call: (0, sts_1.externalEnum)() });
const SudoCallLegacy = (0, sts_1.struct)({ proposal: (0, sts_1.externalEnum)() });
function getSudoCall(runtime, call) {
    if ((0, util_1.isCall)(runtime, SudoCallLatest, call)) {
        return call.args.call;
    }
    else if ((0, util_1.isCall)(runtime, SudoCallLegacy, call)) {
        return call.args.proposal;
    }
    else {
        throw new util_1.UnexpectedCallType(call.name);
    }
}
function getSubcall(cp, call, origin) {
    return cp.createCall(call.extrinsicIndex, call.address.concat([0]), getSudoCall(cp.runtime, call), origin);
}
function visitSudo(cp, call) {
    let sub = getSubcall(cp, call, (0, util_2.rootOrigin)());
    cp.visitSubcall(sub, END_OF_SUDO);
}
function unwrapSudo(cp, call, success) {
    let sub = getSubcall(cp, call, (0, util_2.rootOrigin)());
    cp.unwrap(sub, success);
}
const SudoAs = (0, sts_1.struct)({
    who: system_1.Address
});
function visitSudoAs(cp, call) {
    (0, util_1.assertCall)(cp.runtime, SudoAs, call);
    let origin = (0, util_2.addressOrigin)(call.args.who);
    let sub = getSubcall(cp, call, origin);
    cp.visitSubcall(sub, END_OF_SUDO);
}
function unwrapSudoAs(cp, call, success) {
    (0, util_1.assertCall)(cp.runtime, SudoAs, call);
    let origin = (0, util_2.addressOrigin)(call.args.who);
    let sub = getSubcall(cp, call, origin);
    cp.unwrap(sub, success);
}
//# sourceMappingURL=sudo.js.map