import { Hash, Rpc, RuntimeVersionId } from '@subsquid/substrate-data-raw';
import { Runtime } from '@subsquid/substrate-runtime';
import { OldSpecsBundle, OldTypesBundle } from '@subsquid/substrate-runtime/lib/metadata';
import { HashAndHeight } from '@subsquid/util-internal-ingest-tools';
interface Header extends HashAndHeight {
    parentHash: Hash;
}
export interface WithRuntime {
    runtime?: Runtime;
    runtimeOfPrevBlock?: Runtime;
    _isInvalid?: boolean;
}
export declare class RuntimeTracker<B extends WithRuntime> {
    private rpc;
    private getBlockHeader;
    private getBlockRuntimeVersion;
    private typesBundle?;
    private prev;
    constructor(rpc: Rpc, getBlockHeader: (block: B) => Header, getBlockRuntimeVersion: (block: B) => RuntimeVersionId, typesBundle?: (OldTypesBundle | OldSpecsBundle) | undefined);
    setRuntime(blocks: B[]): Promise<void>;
    private fetchRuntime;
    private getParent;
}
export {};
//# sourceMappingURL=runtime-tracker.d.ts.map