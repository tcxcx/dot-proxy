import { Bytes, Ti, Type } from './types';
import type { Metadata } from './interfaces';
import { OldSpecsBundle, OldTypesBundle } from './old/types';
export interface RuntimeDescription {
    types: Type[];
    address: Ti;
    call: Ti;
    digest: Ti;
    digestItem: Ti;
    event: Ti;
    eventRecord: Ti;
    eventRecordList: Ti;
    signature: Ti;
    storage: Storage;
    constants: Constants;
}
export interface Constants {
    [pallet: string]: {
        [name: string]: Constant;
    };
}
export interface Constant {
    type: Ti;
    value: Uint8Array;
    docs: string[];
}
export type StorageHasher = 'Blake2_128' | 'Blake2_256' | 'Blake2_128Concat' | 'Twox128' | 'Twox256' | 'Twox64Concat' | 'Identity';
export interface StorageItem {
    hashers: StorageHasher[];
    keys: Ti[];
    value: Ti;
    modifier: 'Optional' | 'Default' | 'Required';
    fallback: Uint8Array;
    docs?: string[];
}
export interface Storage {
    [prefix: string]: {
        prefix: string;
        items: {
            [name: string]: StorageItem;
        };
    };
}
export declare function getRuntimeDescription(metadata: Metadata | Bytes | Uint8Array): RuntimeDescription;
export declare function getRuntimeDescription(metadata: Metadata | string | Uint8Array, specName: string, specVersion: number, typesBundle?: OldTypesBundle | OldSpecsBundle): RuntimeDescription;
//# sourceMappingURL=runtime-description.d.ts.map