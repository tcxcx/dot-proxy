import { Ti, Type } from '../types';
import * as texp from './typeExp';
import { OldTypeExp, OldTypes } from './types';
interface TypeAlias {
    kind: -1;
    alias: Ti;
    name: string;
}
export declare class OldTypeRegistry {
    private oldTypes;
    private types;
    private lookup;
    private definitions;
    constructor(oldTypes: OldTypes);
    getTypes(): Type[];
    private replaceAliases;
    define(typeName: string, fn: () => Type): void;
    use(typeExp: OldTypeExp | texp.Type, pallet?: string): Ti;
    private normalizeType;
    private normalizeNamedType;
    private buildScaleType;
    private buildNamedType;
    private buildFromDefinition;
    private buildSet;
    private buildEnum;
    private buildStruct;
    private buildArray;
    private buildTuple;
    add(type: Type): Ti;
    get(ti: Ti): Type | TypeAlias;
}
export {};
//# sourceMappingURL=typeRegistry.d.ts.map