"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscriptions = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const errors_1 = require("./errors");
class Subscriptions {
    constructor(client) {
        this.client = client;
        this.active = new Map();
        this.client.addNotificationListener(msg => this.onNotification(msg));
        this.client.addResetListener(err => this.onReset(err));
    }
    add(sub) {
        return new Handle(sub, this.client, this.active);
    }
    onNotification(msg) {
        let subscription = msg.params?.subscription;
        switch (typeof subscription) {
            case 'number':
            case 'string':
                break;
            default:
                return;
        }
        let id = `${msg.method}::${subscription}`;
        let handle = this.active.get(id);
        if (handle == null)
            return;
        let params = msg.params;
        if (params.error) {
            let err = new errors_1.RpcError(params.error);
            handle.sub.onError(err);
        }
        else {
            handle.sub.onMessage(params.result);
        }
    }
    onReset(err) {
        for (let handle of this.active.values()) {
            handle.onConnectionReset(err);
        }
    }
}
exports.Subscriptions = Subscriptions;
class Handle {
    constructor(sub, client, active) {
        this.sub = sub;
        this.client = client;
        this.active = active;
        this.closed = false;
        this.subscribe();
    }
    get isActive() {
        return !this.closed;
    }
    get isClosed() {
        return this.closed;
    }
    close() {
        if (this.closed)
            return;
        this.closed = true;
        this.unsubscribe();
    }
    onConnectionReset(reason) {
        if (this.closed)
            return;
        this.active.delete(this.id);
        this.id = undefined;
        if (reason instanceof errors_1.RpcConnectionError && this.sub.resubscribeOnConnectionLoss) {
            this.subscribe();
        }
        else {
            this.closed = true;
            this.sub.onError(reason);
        }
    }
    subscribe() {
        this.client.call(this.sub.method, this.sub.params, {
            retryAttempts: this.sub.retryAttempts,
            validateResult: (result, req) => this.validateSubscriptionResult(result, req)
        }).then(id => {
            this.id = id;
            if (this.isActive) {
                this.active.set(this.id, this);
            }
            else {
                this.unsubscribe();
            }
        }, err => {
            if (this.closed)
                return;
            this.closed = true;
            this.sub.onError(err);
        });
    }
    unsubscribe() {
        if (this.id == null)
            return;
        this.active.delete(this.id);
        this.client.call(this.sub.unsubscribe, [this.id], { retryAttempts: 0 }).catch(err => {
            if (err instanceof errors_1.RpcConnectionError)
                return;
            this.client.reset((0, util_internal_1.addErrorContext)(new errors_1.RpcConnectionError('connection was reset due to subscription cancellation error'), { rpcSubscriptionCancellationError: err }));
        });
    }
    validateSubscriptionResult(result, req) {
        switch (typeof result) {
            case 'string':
            case 'number':
                break;
            default:
                this.client.reset();
                throw (0, util_internal_1.addErrorContext)(new Error('unexpected subscription result: ' +
                    'only numbers and strings are accepted as subscription ids'), {
                    rpcResult: result
                });
        }
        let id = `${this.sub.notification}::${result}`;
        if (this.active.has(id)) {
            this.client.reset();
            throw new Error(`got duplicate subscription: ${result}`);
        }
        return id;
    }
}
//# sourceMappingURL=subscriptions.js.map