"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OneOfValidationFailure = exports.OneOfValidator = void 0;
const assert_1 = __importDefault(require("assert"));
const error_1 = require("../error");
class OneOfValidator {
    constructor(patterns) {
        this.patterns = patterns;
        this.patternNames = Object.keys(this.patterns);
        this.errors = new Array(this.patternNames.length);
        (0, assert_1.default)(this.patternNames.length > 1);
    }
    clearErrors() {
        for (let i = 0; i < this.errors.length; i++) {
            this.errors[i] = undefined;
        }
    }
    cast(value) {
        for (let i = 0; i < this.patternNames.length; i++) {
            let key = this.patternNames[i];
            let validator = this.patterns[key];
            let result = validator.cast(value);
            if (result instanceof error_1.ValidationFailure) {
                this.errors[i] = result;
            }
            else {
                this.clearErrors();
                return result;
            }
        }
        let failure = new OneOfValidationFailure(value, this.errors.slice(), this.patternNames);
        this.clearErrors();
        return failure;
    }
    validate(value) {
        for (let i = 0; i < this.patternNames.length; i++) {
            let key = this.patternNames[i];
            let validator = this.patterns[key];
            let err = validator.validate(value);
            if (err) {
                this.errors[i] = err;
            }
            else {
                this.clearErrors();
                return;
            }
        }
        let failure = new OneOfValidationFailure(value, this.errors.slice(), this.patternNames);
        this.clearErrors();
        return failure;
    }
    phantom() {
        throw new Error();
    }
}
exports.OneOfValidator = OneOfValidator;
class OneOfValidationFailure extends error_1.ValidationFailure {
    constructor(value, errors, patternNames) {
        super(value, 'given value does not match any of the expected patterns');
        this.errors = errors;
        this.patternNames = patternNames;
    }
    toString() {
        let msg = 'given value does not match any of the expected patterns:';
        for (let i = 0; i < this.patternNames.length; i++) {
            msg += `\n    ${this.patternNames[i]}: ${this.errors[i].toString()}`;
        }
        if (this.path.length) {
            msg = `invalid value at ${this.getPathString()}: ${msg}`;
        }
        return msg;
    }
}
exports.OneOfValidationFailure = OneOfValidationFailure;
//# sourceMappingURL=one-of.js.map