"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sentinel = void 0;
const SUPPRESSED_LABELS = initSuppressedLabels();
let LOG;
try {
    LOG = require('@subsquid/logger').createLogger('sqd:validation');
}
catch (err) { }
function warn(label) {
    if (LOG == null || SUPPRESSED_LABELS[label])
        return;
    SUPPRESSED_LABELS[label] = true;
    LOG.warn(`Sentinel value was used in place of ${label}. ` +
        `This message will be printed only once. ` +
        `To suppress it entirely set SQD_ALLOW_SENTINEL=${label} env variable. ` +
        `Use commas (,) to separate multiple labels.`);
}
class Sentinel {
    constructor(label, value, item) {
        this.label = label;
        this.value = value;
        this.item = item;
    }
    cast(value) {
        if (value == null) {
            warn(this.label);
            return this.value;
        }
        else {
            return this.item.cast(value);
        }
    }
    validate(value) {
        if (value == null)
            return;
        return this.item.validate(value);
    }
    phantom() {
        return undefined;
    }
}
exports.Sentinel = Sentinel;
function initSuppressedLabels() {
    let rec = {};
    if (typeof process.env.SQD_ALLOW_SENTINEL == 'string') {
        let labels = process.env.SQD_ALLOW_SENTINEL.split(',').map(l => l.trim());
        for (let l of labels) {
            rec[l] = true;
        }
    }
    return rec;
}
//# sourceMappingURL=sentinel.js.map