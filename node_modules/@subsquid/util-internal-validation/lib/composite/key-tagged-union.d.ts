import { ValidationFailure } from '../error';
import { GetCastType, GetSrcType, Validator } from '../interface';
import { AddOptionToUndefined, Simplify } from '../util';
export type GetKeyTaggedUnionCast<U> = Simplify<{
    [C in keyof U]: Simplify<AddOptionToUndefined<{
        [K in keyof U]: K extends C ? GetCastType<U[C]> : undefined;
    }>>;
}[keyof U]>;
export type GetKeyTaggedUnionSrc<U> = Simplify<{
    [C in keyof U]: AddOptionToUndefined<{
        [K in keyof U]: K extends C ? GetSrcType<U[C]> : undefined;
    }>;
}[keyof U]>;
export declare class KeyTaggedUnionValidator<U extends Record<string, Validator<any>>> implements Validator<GetKeyTaggedUnionCast<U>, GetKeyTaggedUnionSrc<U>> {
    readonly union: U;
    private onlyOneOfMessage?;
    private noPropsMessage?;
    constructor(union: U);
    cast(value: any): ValidationFailure | GetKeyTaggedUnionCast<U>;
    validate(value: any): ValidationFailure | undefined;
    phantom(): GetKeyTaggedUnionSrc<U>;
    private getTag;
    private getOnlyOneOfMessage;
    private getNoPropsMessage;
}
//# sourceMappingURL=key-tagged-union.d.ts.map