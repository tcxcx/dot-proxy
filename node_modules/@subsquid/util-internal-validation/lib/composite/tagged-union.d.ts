import { ValidationFailure } from '../error';
import { GetCastType, GetSrcType, Validator } from '../interface';
import { Simplify } from '../util';
export type GetTaggedUnionCast<F extends string, U> = Simplify<{
    [C in keyof U]: GetCastType<U[C]> & {
        [T in F]: C;
    };
}[keyof U]>;
export type GetTaggedUnionSrc<F extends string, U> = Simplify<{
    [C in keyof U]: GetSrcType<U[C]> & {
        [T in F]: C;
    };
}[keyof U]>;
export declare class TaggedUnion<F extends string, U extends Record<string, Validator<any>>> implements Validator<GetTaggedUnionCast<F, U>, GetTaggedUnionSrc<F, U>> {
    readonly tagField: F;
    readonly variants: U;
    private wrongTagMessage;
    constructor(tagField: F, variants: U);
    cast(value: any): ValidationFailure | GetTaggedUnionCast<F, U>;
    validate(value: unknown): ValidationFailure | undefined;
    private getVariant;
    phantom(): GetTaggedUnionSrc<F, U>;
}
//# sourceMappingURL=tagged-union.d.ts.map