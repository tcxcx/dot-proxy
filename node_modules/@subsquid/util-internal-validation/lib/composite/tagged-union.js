"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaggedUnion = void 0;
const error_1 = require("../error");
const util_1 = require("../util");
class TaggedUnion {
    constructor(tagField, variants) {
        this.tagField = tagField;
        this.variants = variants;
        this.wrongTagMessage = `got {value}, but expected one of ${(0, util_1.print)(Object.keys(this.variants))}`;
    }
    cast(value) {
        let variant = this.getVariant(value);
        if (variant instanceof error_1.ValidationFailure)
            return variant;
        let result = variant.cast(value);
        if (result instanceof error_1.ValidationFailure)
            return result;
        result[this.tagField] = value[this.tagField];
        return result;
    }
    validate(value) {
        let variant = this.getVariant(value);
        if (variant instanceof error_1.ValidationFailure)
            return variant;
        return variant.validate(value);
    }
    getVariant(object) {
        if (typeof object != 'object' || !object)
            return new error_1.ValidationFailure(object, `{value} is not an object`);
        let tag = object[this.tagField];
        let variant = this.variants[tag];
        if (variant)
            return variant;
        let failure = new error_1.ValidationFailure(tag, this.wrongTagMessage);
        failure.path.push(this.tagField);
        return failure;
    }
    phantom() {
        throw new Error();
    }
}
exports.TaggedUnion = TaggedUnion;
//# sourceMappingURL=tagged-union.js.map