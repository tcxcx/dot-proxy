import { ValidationFailure } from '../error';
import { GetCastType, GetSrcType, Validator } from '../interface';
import { Simplify } from '../util';
export type GetOneOfCast<P> = Simplify<{
    [K in keyof P]: GetCastType<P[K]>;
}[keyof P]>;
export type GetOneOfSrc<P> = Simplify<{
    [K in keyof P]: GetSrcType<P[K]>;
}[keyof P]>;
export declare class OneOfValidator<P extends Record<string, Validator<any>>> implements Validator<GetOneOfCast<P>, GetOneOfSrc<P>> {
    readonly patterns: P;
    private patternNames;
    private errors;
    constructor(patterns: P);
    private clearErrors;
    cast(value: unknown): ValidationFailure | GetOneOfCast<P>;
    validate(value: unknown): ValidationFailure | undefined;
    phantom(): GetOneOfSrc<P>;
}
export declare class OneOfValidationFailure extends ValidationFailure {
    errors: ValidationFailure[];
    patternNames: string[];
    constructor(value: unknown, errors: ValidationFailure[], patternNames: string[]);
    toString(): string;
}
//# sourceMappingURL=one-of.d.ts.map