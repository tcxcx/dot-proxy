import { ValidationFailure } from '../error';
import { GetCastType, GetSrcType, Validator } from '../interface';
import { AddOptionToUndefined, Simplify } from '../util';
export type GetPropsCast<Props> = Simplify<AddOptionToUndefined<{
    [K in keyof Props]: GetCastType<Props[K]>;
}>>;
export type GetPropsSrc<Props> = Simplify<AddOptionToUndefined<{
    [K in keyof Props]: GetSrcType<Props[K]>;
}>>;
export declare class ObjectValidator<Props extends Record<string, Validator>> implements Validator<GetPropsCast<Props>, GetPropsSrc<Props>> {
    readonly props: Props;
    constructor(props: Props);
    cast(object: any): ValidationFailure | GetPropsCast<Props>;
    validate(object: any): ValidationFailure | undefined;
    phantom(): GetPropsSrc<Props>;
}
//# sourceMappingURL=object.d.ts.map