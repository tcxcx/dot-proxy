"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitRangeByRequest = exports.splitBlocksByRequest = exports.hasRequestsAfter = exports.getRequestAt = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const util_1 = require("./util");
function getRequestAt(requests, height) {
    for (let req of requests) {
        let from = req.range.from;
        let to = req.range.to ?? Infinity;
        if (from <= height && height <= to)
            return req.request;
    }
}
exports.getRequestAt = getRequestAt;
function hasRequestsAfter(requests, height) {
    for (let req of requests) {
        let to = req.range.to ?? Infinity;
        if (height < to)
            return true;
    }
    return false;
}
exports.hasRequestsAfter = hasRequestsAfter;
function* splitBlocksByRequest(requests, blocks, getBlockHeight) {
    for (let pack of (0, util_internal_1.partitionBy)(blocks, b => getRequestAt(requests, getBlockHeight(b)))) {
        yield {
            blocks: pack.items,
            request: pack.value
        };
    }
}
exports.splitBlocksByRequest = splitBlocksByRequest;
function* splitRangeByRequest(requests, range) {
    requests = (0, util_1.applyRangeBound)(requests, range);
    for (let i = 0; i < requests.length; i++) {
        let req = requests[i];
        if (i > 0) {
            let from = (0, util_internal_1.assertNotNull)(requests[i - 1].range.to) + 1;
            let to = req.range.from - 1;
            if (from <= to) {
                yield { range: { from, to } };
            }
        }
        yield req;
    }
}
exports.splitRangeByRequest = splitRangeByRequest;
//# sourceMappingURL=requests.js.map