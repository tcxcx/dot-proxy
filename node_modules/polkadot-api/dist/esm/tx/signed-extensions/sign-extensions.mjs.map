{"version":3,"file":"sign-extensions.mjs","sources":["../../../../src/tx/signed-extensions/sign-extensions.ts"],"sourcesContent":["import {\n  getDynamicBuilder,\n  MetadataLookup,\n} from \"@polkadot-api/metadata-builders\"\nimport { Encoder } from \"@polkadot-api/substrate-bindings\"\nimport { OfflineTxExtensions } from \"../types\"\nimport { fromHex, mapObject } from \"@polkadot-api/utils\"\nimport { getSystemVersionStruct } from \"./system-version\"\nimport { mortal } from \"./mortal-enc\"\nimport { ChargeAssetTxPaymentEnc } from \"./charge-asset-tx-enc\"\n\nconst empty = new Uint8Array()\nconst zero = Uint8Array.from([0])\ntype DynamicBuilder = ReturnType<typeof getDynamicBuilder>\n\nconst value = (value: Uint8Array) => ({\n  value,\n  additionalSigned: empty,\n})\nconst additionalSigned = (additionalSigned: Uint8Array) => ({\n  value: empty,\n  additionalSigned,\n})\nconst both = (value: Uint8Array, additionalSigned: Uint8Array) => ({\n  value,\n  additionalSigned,\n})\n\nexport const getSignExtensionsCreator = (\n  genesis: Uint8Array,\n  lookupFn: MetadataLookup,\n  dynamicBuilder: DynamicBuilder,\n) => {\n  const signedExtensionsEncoders: Record<string, [Encoder<any>, Encoder<any>]> =\n    {}\n  lookupFn.metadata.extrinsic.signedExtensions.forEach(\n    ({ identifier, type, additionalSigned }) => {\n      signedExtensionsEncoders[identifier] = [type, additionalSigned].map(\n        (x) => dynamicBuilder.buildDefinition(x)[0],\n      ) as [Encoder<any>, Encoder<any>]\n    },\n  )\n\n  return <Asset>({\n    mortality,\n    tip = 0n,\n    nonce,\n    customSignedExtensions = {},\n    ...rest\n  }: OfflineTxExtensions<Asset>): Record<\n    string,\n    { identifier: string; value: Uint8Array; additionalSigned: Uint8Array }\n  > => {\n    const invalidKeys: string[] = []\n    const systemVersion = getSystemVersionStruct(lookupFn, dynamicBuilder)\n    const getFromCustomEntry = (key: string) => {\n      const [valueEnc, additionalEnc] = signedExtensionsEncoders[key]\n      const customEntry = customSignedExtensions[key] as any\n      try {\n        return mapObject(\n          {\n            value: valueEnc,\n            additionalSigned: additionalEnc,\n          },\n          (encoder, key) => {\n            const input = customEntry?.[key]\n            // if the encoder is _void, then the input value is ignored, so no harm in passing `undefined`\n            // only an `Option` encoder will accept `undefined` as an input without crashing\n            return input instanceof Uint8Array ? input : encoder(input)\n          },\n        )\n      } catch {\n        // this means that a non optional custom signed-extension has not received its value\n        invalidKeys.push(key)\n        return null\n      }\n    }\n\n    const result = mapObject(\n      signedExtensionsEncoders,\n      ([valueEnc, additionalEnc], key) => {\n        if (customSignedExtensions[key]) return getFromCustomEntry(key)\n\n        switch (key) {\n          case \"CheckNonce\":\n            return value(valueEnc(nonce))\n\n          case \"CheckMortality\":\n            return mortality.mortal\n              ? both(\n                  mortal({\n                    period: mortality.period,\n                    phase: mortality.startAtBlock.height % mortality.period,\n                  }),\n                  fromHex(mortality.startAtBlock.hash),\n                )\n              : both(zero, genesis)\n\n          case \"ChargeTransactionPayment\":\n            return value(valueEnc(tip))\n\n          case \"ChargeAssetTxPayment\":\n            return value(\n              ChargeAssetTxPaymentEnc({\n                tip,\n                asset: (rest as any).asset,\n              }),\n            )\n\n          case \"CheckGenesis\":\n            return additionalSigned(genesis)\n\n          case \"CheckMetadataHash\":\n            return both(zero, zero)\n\n          case \"CheckSpecVersion\":\n            return additionalSigned(\n              additionalEnc(systemVersion[\"spec_version\"]),\n            )\n\n          case \"CheckTxVersion\":\n            return additionalSigned(\n              additionalEnc(systemVersion[\"transaction_version\"]),\n            )\n\n          default:\n            return getFromCustomEntry(key)\n        }\n      },\n    )\n\n    invalidKeys.forEach((key) => {\n      delete result[key]\n    })\n    return mapObject(result, (x, identifier) => ({ ...x, identifier })) as any\n  }\n}\n"],"names":["value","additionalSigned","key"],"mappings":"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"}