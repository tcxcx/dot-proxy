import { AbortError } from '@polkadot-api/utils';
import { noop } from 'rxjs';

function firstValueFromWithSignal(source, signal) {
  return new Promise((resolve, reject) => {
    let subscription = null;
    let isDone = false;
    const onAbort = signal ? () => {
      subscription?.unsubscribe();
      reject(new AbortError());
    } : noop;
    subscription = source.subscribe({
      next: (value) => {
        resolve(value);
        subscription?.unsubscribe();
        isDone = true;
      },
      error: (e) => {
        signal?.removeEventListener("abort", onAbort);
        reject(e);
        isDone = true;
      },
      complete: () => {
        signal?.removeEventListener("abort", onAbort);
        reject(new Error("Observable completed without emitting"));
        isDone = true;
      }
    });
    if (!isDone) signal?.addEventListener("abort", onAbort);
  });
}

export { firstValueFromWithSignal };
//# sourceMappingURL=firstValueFromWithSignal.mjs.map
